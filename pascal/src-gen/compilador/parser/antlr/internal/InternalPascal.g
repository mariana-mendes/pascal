/*
 * generated by Xtext 2.16.0
 */
grammar InternalPascal;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package compilador.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package compilador.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import compilador.services.PascalGrammarAccess;

}

@parser::members {

 	private PascalGrammarAccess grammarAccess;

    public InternalPascalParser(TokenStream input, PascalGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "pascal";
   	}

   	@Override
   	protected PascalGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRulepascal
entryRulepascal returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPascalRule()); }
	iv_rulepascal=rulepascal
	{ $current=$iv_rulepascal.current; }
	EOF;

// Rule pascal
rulepascal returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getPascalAccess().getProgramProgramParserRuleCall_0());
			}
			lv_program_0_0=ruleprogram
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getPascalRule());
				}
				add(
					$current,
					"program",
					lv_program_0_0,
					"compilador.Pascal.program");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleprogram
entryRuleprogram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	iv_ruleprogram=ruleprogram
	{ $current=$iv_ruleprogram.current; }
	EOF;

// Rule program
ruleprogram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getProgramAccess().getHeadProgramHeadingParserRuleCall_0_0());
				}
				lv_head_0_0=ruleprogramHeading
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProgramRule());
					}
					set(
						$current,
						"head",
						lv_head_0_0,
						"compilador.Pascal.programHeading");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1='interface'
			{
				newLeafNode(otherlv_1, grammarAccess.getProgramAccess().getInterfaceKeyword_1());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getProgramAccess().getBlockBlockParserRuleCall_2_0());
				}
				lv_block_2_0=ruleblock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProgramRule());
					}
					set(
						$current,
						"block",
						lv_block_2_0,
						"compilador.Pascal.block");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='.'
		{
			newLeafNode(otherlv_3, grammarAccess.getProgramAccess().getFullStopKeyword_3());
		}
	)
;

// Entry rule entryRuleprogramHeading
entryRuleprogramHeading returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProgramHeadingRule()); }
	iv_ruleprogramHeading=ruleprogramHeading
	{ $current=$iv_ruleprogramHeading.current; }
	EOF;

// Rule programHeading
ruleprogramHeading returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='program'
		{
			newLeafNode(otherlv_0, grammarAccess.getProgramHeadingAccess().getProgramKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProgramHeadingAccess().getIdentiferIdentifierParserRuleCall_1_0());
				}
				lv_identifer_1_0=ruleidentifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProgramHeadingRule());
					}
					set(
						$current,
						"identifer",
						lv_identifer_1_0,
						"compilador.Pascal.identifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2='('
			{
				newLeafNode(otherlv_2, grammarAccess.getProgramHeadingAccess().getLeftParenthesisKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getProgramHeadingAccess().getIdentifierListIdentifierListParserRuleCall_2_1_0());
					}
					lv_identifierList_3_0=ruleidentifierList
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getProgramHeadingRule());
						}
						set(
							$current,
							"identifierList",
							lv_identifierList_3_0,
							"compilador.Pascal.identifierList");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_4=')'
			{
				newLeafNode(otherlv_4, grammarAccess.getProgramHeadingAccess().getRightParenthesisKeyword_2_2());
			}
		)?
		otherlv_5=';'
		{
			newLeafNode(otherlv_5, grammarAccess.getProgramHeadingAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleidentifierList
entryRuleidentifierList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIdentifierListRule()); }
	iv_ruleidentifierList=ruleidentifierList
	{ $current=$iv_ruleidentifierList.current; }
	EOF;

// Rule identifierList
ruleidentifierList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getIdentifierListAccess().getIdentifierListAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getIdentifierListAccess().getIdentifierIdentifierParserRuleCall_1_0());
				}
				lv_identifier_1_0=ruleidentifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIdentifierListRule());
					}
					set(
						$current,
						"identifier",
						lv_identifier_1_0,
						"compilador.Pascal.identifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getIdentifierListAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getIdentifierListAccess().getIdentifierList1IdentifierParserRuleCall_2_1_0());
					}
					lv_identifierList1_3_0=ruleidentifier
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIdentifierListRule());
						}
						add(
							$current,
							"identifierList1",
							lv_identifierList1_3_0,
							"compilador.Pascal.identifier");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleidentifier
entryRuleidentifier returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIdentifierRule()); }
	iv_ruleidentifier=ruleidentifier
	{ $current=$iv_ruleidentifier.current; }
	EOF;

// Rule identifier
ruleidentifier returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_identifier_0_0=RULE_IDENT
			{
				newLeafNode(lv_identifier_0_0, grammarAccess.getIdentifierAccess().getIdentifierIDENTTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getIdentifierRule());
				}
				setWithLastConsumed(
					$current,
					"identifier",
					lv_identifier_0_0,
					"compilador.Pascal.IDENT");
			}
		)
	)
;

// Entry rule entryRuleblock
entryRuleblock returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBlockRule()); }
	iv_ruleblock=ruleblock
	{ $current=$iv_ruleblock.current; }
	EOF;

// Rule block
ruleblock returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBlockAccess().getBlockAction_0(),
					$current);
			}
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getBlockAccess().getLabelLabel_declaration_partParserRuleCall_1_0_0());
					}
					lv_label_1_0=rulelabel_declaration_part
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBlockRule());
						}
						add(
							$current,
							"label",
							lv_label_1_0,
							"compilador.Pascal.label_declaration_part");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getBlockAccess().getConstantDefinitionPartsConstantDefinitionPartParserRuleCall_1_1_0());
					}
					lv_constantDefinitionParts_2_0=ruleconstantDefinitionPart
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBlockRule());
						}
						add(
							$current,
							"constantDefinitionParts",
							lv_constantDefinitionParts_2_0,
							"compilador.Pascal.constantDefinitionPart");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getBlockAccess().getTypeDefinitionPartsTypeDefinitionPartParserRuleCall_1_2_0());
					}
					lv_typeDefinitionParts_3_0=ruletypeDefinitionPart
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBlockRule());
						}
						add(
							$current,
							"typeDefinitionParts",
							lv_typeDefinitionParts_3_0,
							"compilador.Pascal.typeDefinitionPart");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getBlockAccess().getVariableDeclarationPartsVariableDeclarationPartParserRuleCall_1_3_0());
					}
					lv_variableDeclarationParts_4_0=rulevariableDeclarationPart
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBlockRule());
						}
						add(
							$current,
							"variableDeclarationParts",
							lv_variableDeclarationParts_4_0,
							"compilador.Pascal.variableDeclarationPart");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getBlockAccess().getProcedureAndFunctionDeclarationPartsProcedureAndFunctionDeclarationPartParserRuleCall_1_4_0());
					}
					lv_procedureAndFunctionDeclarationParts_5_0=ruleprocedureAndFunctionDeclarationPart
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBlockRule());
						}
						add(
							$current,
							"procedureAndFunctionDeclarationParts",
							lv_procedureAndFunctionDeclarationParts_5_0,
							"compilador.Pascal.procedureAndFunctionDeclarationPart");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getBlockAccess().getUsesUnitsPartsUsesUnitsPartParserRuleCall_1_5_0());
					}
					lv_usesUnitsParts_6_0=ruleusesUnitsPart
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBlockRule());
						}
						add(
							$current,
							"usesUnitsParts",
							lv_usesUnitsParts_6_0,
							"compilador.Pascal.usesUnitsPart");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			otherlv_7='implemetation'
			{
				newLeafNode(otherlv_7, grammarAccess.getBlockAccess().getImplemetationKeyword_1_6());
			}
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getBlockAccess().getCompoundStatementCompoundStatementParserRuleCall_2_0());
				}
				lv_compoundStatement_8_0=rulecompoundStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBlockRule());
					}
					set(
						$current,
						"compoundStatement",
						lv_compoundStatement_8_0,
						"compilador.Pascal.compoundStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulelabel_declaration_part
entryRulelabel_declaration_part returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLabel_declaration_partRule()); }
	iv_rulelabel_declaration_part=rulelabel_declaration_part
	{ $current=$iv_rulelabel_declaration_part.current; }
	EOF;

// Rule label_declaration_part
rulelabel_declaration_part returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='label'
		{
			newLeafNode(otherlv_0, grammarAccess.getLabel_declaration_partAccess().getLabelKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getLabel_declaration_partAccess().getLabelParserRuleCall_1());
		}
		this_label_1=rulelabel
		{
			$current = $this_label_1.current;
			afterParserOrEnumRuleCall();
		}
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getLabel_declaration_partAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLabel_declaration_partAccess().getLabelLabelParserRuleCall_2_1_0());
					}
					lv_label_3_0=rulelabel
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLabel_declaration_partRule());
						}
						add(
							$current,
							"label",
							lv_label_3_0,
							"compilador.Pascal.label");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getLabel_declaration_partAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRulelabel
entryRulelabel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLabelRule()); }
	iv_rulelabel=rulelabel
	{ $current=$iv_rulelabel.current; }
	EOF;

// Rule label
rulelabel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getLabelAccess().getUnsignedIntegerUnsignedIntegerParserRuleCall_0_0());
				}
				lv_unsignedInteger_0_0=ruleunsignedInteger
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLabelRule());
					}
					set(
						$current,
						"unsignedInteger",
						lv_unsignedInteger_0_0,
						"compilador.Pascal.unsignedInteger");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getLabelAccess().getIdentifierIdentifierParserRuleCall_1_0());
				}
				lv_identifier_1_0=ruleidentifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLabelRule());
					}
					set(
						$current,
						"identifier",
						lv_identifier_1_0,
						"compilador.Pascal.identifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleunsignedInteger
entryRuleunsignedInteger returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnsignedIntegerRule()); }
	iv_ruleunsignedInteger=ruleunsignedInteger
	{ $current=$iv_ruleunsignedInteger.current; }
	EOF;

// Rule unsignedInteger
ruleunsignedInteger returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_number_0_0=RULE_NUM
			{
				newLeafNode(lv_number_0_0, grammarAccess.getUnsignedIntegerAccess().getNumberNUMTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getUnsignedIntegerRule());
				}
				setWithLastConsumed(
					$current,
					"number",
					lv_number_0_0,
					"compilador.Pascal.NUM");
			}
		)
	)
;

// Entry rule entryRuleconstantDefinitionPart
entryRuleconstantDefinitionPart returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstantDefinitionPartRule()); }
	iv_ruleconstantDefinitionPart=ruleconstantDefinitionPart
	{ $current=$iv_ruleconstantDefinitionPart.current; }
	EOF;

// Rule constantDefinitionPart
ruleconstantDefinitionPart returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='const'
		{
			newLeafNode(otherlv_0, grammarAccess.getConstantDefinitionPartAccess().getConstKeyword_0());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getConstantDefinitionPartAccess().getConstantDefinitionConstantDefinitionParserRuleCall_1_0_0());
					}
					lv_constantDefinition_1_0=ruleconstantDefinition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConstantDefinitionPartRule());
						}
						add(
							$current,
							"constantDefinition",
							lv_constantDefinition_1_0,
							"compilador.Pascal.constantDefinition");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_2=';'
			{
				newLeafNode(otherlv_2, grammarAccess.getConstantDefinitionPartAccess().getSemicolonKeyword_1_1());
			}
		)+
	)
;

// Entry rule entryRuleconstantDefinition
entryRuleconstantDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstantDefinitionRule()); }
	iv_ruleconstantDefinition=ruleconstantDefinition
	{ $current=$iv_ruleconstantDefinition.current; }
	EOF;

// Rule constantDefinition
ruleconstantDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getConstantDefinitionAccess().getIdentifierIdentifierParserRuleCall_0_0());
				}
				lv_identifier_0_0=ruleidentifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstantDefinitionRule());
					}
					set(
						$current,
						"identifier",
						lv_identifier_0_0,
						"compilador.Pascal.identifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getConstantDefinitionAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConstantDefinitionAccess().getConstantConstantParserRuleCall_2_0());
				}
				lv_constant_2_0=ruleconstant
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstantDefinitionRule());
					}
					set(
						$current,
						"constant",
						lv_constant_2_0,
						"compilador.Pascal.constant");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleconstant
entryRuleconstant returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstantRule()); }
	iv_ruleconstant=ruleconstant
	{ $current=$iv_ruleconstant.current; }
	EOF;

// Rule constant
ruleconstant returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getConstantAccess().getSignSignParserRuleCall_0_0_0());
					}
					lv_sign_0_0=rulesign
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConstantRule());
						}
						set(
							$current,
							"sign",
							lv_sign_0_0,
							"compilador.Pascal.sign");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getConstantAccess().getUnsignedNumberUnsignedNumberParserRuleCall_0_1_0());
					}
					lv_unsignedNumber_1_0=ruleunsignedNumber
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConstantRule());
						}
						set(
							$current,
							"unsignedNumber",
							lv_unsignedNumber_1_0,
							"compilador.Pascal.unsignedNumber");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getConstantAccess().getUnsignedNumberUnsignedNumberParserRuleCall_1_0());
				}
				lv_unsignedNumber_2_0=ruleunsignedNumber
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstantRule());
					}
					set(
						$current,
						"unsignedNumber",
						lv_unsignedNumber_2_0,
						"compilador.Pascal.unsignedNumber");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getConstantAccess().getIdentifierIdentifierParserRuleCall_2_0());
				}
				lv_identifier_3_0=ruleidentifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstantRule());
					}
					set(
						$current,
						"identifier",
						lv_identifier_3_0,
						"compilador.Pascal.identifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				lv_string_4_0=RULE_STRING_LITERAL
				{
					newLeafNode(lv_string_4_0, grammarAccess.getConstantAccess().getStringSTRING_LITERALTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConstantRule());
					}
					setWithLastConsumed(
						$current,
						"string",
						lv_string_4_0,
						"compilador.Pascal.STRING_LITERAL");
				}
			)
		)
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getConstantAccess().getSignSignParserRuleCall_4_0_0());
					}
					lv_sign_5_0=rulesign
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConstantRule());
						}
						set(
							$current,
							"sign",
							lv_sign_5_0,
							"compilador.Pascal.sign");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getConstantAccess().getIdentifierIdentifierParserRuleCall_4_1_0());
					}
					lv_identifier_6_0=ruleidentifier
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConstantRule());
						}
						set(
							$current,
							"identifier",
							lv_identifier_6_0,
							"compilador.Pascal.identifier");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getConstantAccess().getConstantChrConstantChrParserRuleCall_5_0());
				}
				lv_constantChr_7_0=ruleconstantChr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstantRule());
					}
					set(
						$current,
						"constantChr",
						lv_constantChr_7_0,
						"compilador.Pascal.constantChr");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				lv_bool_8_0=RULE_BOOL
				{
					newLeafNode(lv_bool_8_0, grammarAccess.getConstantAccess().getBoolBOOLTerminalRuleCall_6_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConstantRule());
					}
					setWithLastConsumed(
						$current,
						"bool",
						lv_bool_8_0,
						"compilador.Pascal.BOOL");
				}
			)
		)
	)
;

// Entry rule entryRuleconstantChr
entryRuleconstantChr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstantChrRule()); }
	iv_ruleconstantChr=ruleconstantChr
	{ $current=$iv_ruleconstantChr.current; }
	EOF;

// Rule constantChr
ruleconstantChr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='chr'
		{
			newLeafNode(otherlv_0, grammarAccess.getConstantChrAccess().getChrKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getConstantChrAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConstantChrAccess().getUnsignedIntegerUnsignedIntegerParserRuleCall_2_0());
				}
				lv_unsignedInteger_2_0=ruleunsignedInteger
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstantChrRule());
					}
					set(
						$current,
						"unsignedInteger",
						lv_unsignedInteger_2_0,
						"compilador.Pascal.unsignedInteger");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getConstantChrAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleunsignedNumber
entryRuleunsignedNumber returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnsignedNumberRule()); }
	iv_ruleunsignedNumber=ruleunsignedNumber
	{ $current=$iv_ruleunsignedNumber.current; }
	EOF;

// Rule unsignedNumber
ruleunsignedNumber returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getUnsignedNumberAccess().getUnsignedIntegerUnsignedIntegerParserRuleCall_0_0());
				}
				lv_unsignedInteger_0_0=ruleunsignedInteger
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnsignedNumberRule());
					}
					set(
						$current,
						"unsignedInteger",
						lv_unsignedInteger_0_0,
						"compilador.Pascal.unsignedInteger");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getUnsignedNumberAccess().getUnsignedRealUnsignedRealParserRuleCall_1_0());
				}
				lv_unsignedReal_1_0=ruleunsignedReal
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnsignedNumberRule());
					}
					set(
						$current,
						"unsignedReal",
						lv_unsignedReal_1_0,
						"compilador.Pascal.unsignedReal");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleunsignedReal
entryRuleunsignedReal returns [String current=null]:
	{ newCompositeNode(grammarAccess.getUnsignedRealRule()); }
	iv_ruleunsignedReal=ruleunsignedReal
	{ $current=$iv_ruleunsignedReal.current.getText(); }
	EOF;

// Rule unsignedReal
ruleunsignedReal returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_NUM_REAL_0=RULE_NUM_REAL
	{
		$current.merge(this_NUM_REAL_0);
	}
	{
		newLeafNode(this_NUM_REAL_0, grammarAccess.getUnsignedRealAccess().getNUM_REALTerminalRuleCall());
	}
;

// Entry rule entryRulesign
entryRulesign returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSignRule()); }
	iv_rulesign=rulesign
	{ $current=$iv_rulesign.current.getText(); }
	EOF;

// Rule sign
rulesign returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='+'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSignAccess().getPlusSignKeyword_0());
		}
		    |
		kw='-'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSignAccess().getHyphenMinusKeyword_1());
		}
	)
;

// Entry rule entryRuleusesUnitsPart
entryRuleusesUnitsPart returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUsesUnitsPartRule()); }
	iv_ruleusesUnitsPart=ruleusesUnitsPart
	{ $current=$iv_ruleusesUnitsPart.current; }
	EOF;

// Rule usesUnitsPart
ruleusesUnitsPart returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='uses'
		{
			newLeafNode(otherlv_0, grammarAccess.getUsesUnitsPartAccess().getUsesKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getUsesUnitsPartAccess().getIdentifierListIdentifierListParserRuleCall_1_0());
				}
				lv_identifierList_1_0=ruleidentifierList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUsesUnitsPartRule());
					}
					set(
						$current,
						"identifierList",
						lv_identifierList_1_0,
						"compilador.Pascal.identifierList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getUsesUnitsPartAccess().getSemicolonKeyword_2());
		}
	)
;

// Entry rule entryRuletypeDefinitionPart
entryRuletypeDefinitionPart returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeDefinitionPartRule()); }
	iv_ruletypeDefinitionPart=ruletypeDefinitionPart
	{ $current=$iv_ruletypeDefinitionPart.current; }
	EOF;

// Rule typeDefinitionPart
ruletypeDefinitionPart returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='type'
		{
			newLeafNode(otherlv_0, grammarAccess.getTypeDefinitionPartAccess().getTypeKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeDefinitionPartAccess().getTypeDefinitionTypeDefinitionParserRuleCall_1_0());
				}
				lv_typeDefinition_1_0=ruletypeDefinition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeDefinitionPartRule());
					}
					set(
						$current,
						"typeDefinition",
						lv_typeDefinition_1_0,
						"compilador.Pascal.typeDefinition");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeDefinitionPartAccess().getTypeDefinition1TypeDefinitionParserRuleCall_2_0());
				}
				lv_typeDefinition1_2_0=ruletypeDefinition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeDefinitionPartRule());
					}
					add(
						$current,
						"typeDefinition1",
						lv_typeDefinition1_2_0,
						"compilador.Pascal.typeDefinition");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3=';'
		{
			newLeafNode(otherlv_3, grammarAccess.getTypeDefinitionPartAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuletypeDefinition
entryRuletypeDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeDefinitionRule()); }
	iv_ruletypeDefinition=ruletypeDefinition
	{ $current=$iv_ruletypeDefinition.current; }
	EOF;

// Rule typeDefinition
ruletypeDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeDefinitionAccess().getIdentifierIdentifierParserRuleCall_0_0());
				}
				lv_identifier_0_0=ruleidentifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeDefinitionRule());
					}
					set(
						$current,
						"identifier",
						lv_identifier_0_0,
						"compilador.Pascal.identifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getTypeDefinitionAccess().getEqualsSignKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getTypeDefinitionAccess().getTypeTypeParserRuleCall_2_0_0());
					}
					lv_type_2_0=ruletype
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTypeDefinitionRule());
						}
						set(
							$current,
							"type",
							lv_type_2_0,
							"compilador.Pascal.type");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getTypeDefinitionAccess().getFunctionTypeFunctionTypeParserRuleCall_2_1_0());
					}
					lv_functionType_3_0=rulefunctionType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTypeDefinitionRule());
						}
						set(
							$current,
							"functionType",
							lv_functionType_3_0,
							"compilador.Pascal.functionType");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getTypeDefinitionAccess().getProcedureTypeProcedureTypeParserRuleCall_2_2_0());
					}
					lv_procedureType_4_0=ruleprocedureType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTypeDefinitionRule());
						}
						set(
							$current,
							"procedureType",
							lv_procedureType_4_0,
							"compilador.Pascal.procedureType");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRulefunctionType
entryRulefunctionType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionTypeRule()); }
	iv_rulefunctionType=rulefunctionType
	{ $current=$iv_rulefunctionType.current; }
	EOF;

// Rule functionType
rulefunctionType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='function'
		{
			newLeafNode(otherlv_0, grammarAccess.getFunctionTypeAccess().getFunctionKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionTypeAccess().getFormalParameterListFormalParameterListParserRuleCall_1_0());
				}
				lv_formalParameterList_1_0=ruleformalParameterList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionTypeRule());
					}
					set(
						$current,
						"formalParameterList",
						lv_formalParameterList_1_0,
						"compilador.Pascal.formalParameterList");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getFunctionTypeAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionTypeAccess().getTypeIdentifierTypeIdentifierParserRuleCall_3_0());
				}
				lv_typeIdentifier_3_0=ruletypeIdentifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionTypeRule());
					}
					set(
						$current,
						"typeIdentifier",
						lv_typeIdentifier_3_0,
						"compilador.Pascal.typeIdentifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleformalParameterList
entryRuleformalParameterList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFormalParameterListRule()); }
	iv_ruleformalParameterList=ruleformalParameterList
	{ $current=$iv_ruleformalParameterList.current; }
	EOF;

// Rule formalParameterList
ruleformalParameterList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getFormalParameterListAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFormalParameterListAccess().getFormalParameterSectionFormalParameterSectionParserRuleCall_1_0());
				}
				lv_formalParameterSection_1_0=ruleformalParameterSection
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFormalParameterListRule());
					}
					set(
						$current,
						"formalParameterSection",
						lv_formalParameterSection_1_0,
						"compilador.Pascal.formalParameterSection");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=';'
			{
				newLeafNode(otherlv_2, grammarAccess.getFormalParameterListAccess().getSemicolonKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFormalParameterListAccess().getFormalParameterSection2FormalParameterSectionParserRuleCall_2_1_0());
					}
					lv_formalParameterSection2_3_0=ruleformalParameterSection
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFormalParameterListRule());
						}
						add(
							$current,
							"formalParameterSection2",
							lv_formalParameterSection2_3_0,
							"compilador.Pascal.formalParameterSection");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getFormalParameterListAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleformalParameterSection
entryRuleformalParameterSection returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFormalParameterSectionRule()); }
	iv_ruleformalParameterSection=ruleformalParameterSection
	{ $current=$iv_ruleformalParameterSection.current; }
	EOF;

// Rule formalParameterSection
ruleformalParameterSection returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getFormalParameterSectionAccess().getParameterGroupParameterGroupParserRuleCall_0_0());
				}
				lv_parameterGroup_0_0=ruleparameterGroup
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFormalParameterSectionRule());
					}
					set(
						$current,
						"parameterGroup",
						lv_parameterGroup_0_0,
						"compilador.Pascal.parameterGroup");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			otherlv_1='var'
			{
				newLeafNode(otherlv_1, grammarAccess.getFormalParameterSectionAccess().getVarKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFormalParameterSectionAccess().getParameterGroup2ParameterGroupParserRuleCall_1_1_0());
					}
					lv_parameterGroup2_2_0=ruleparameterGroup
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFormalParameterSectionRule());
						}
						add(
							$current,
							"parameterGroup2",
							lv_parameterGroup2_2_0,
							"compilador.Pascal.parameterGroup");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			otherlv_3='function'
			{
				newLeafNode(otherlv_3, grammarAccess.getFormalParameterSectionAccess().getFunctionKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFormalParameterSectionAccess().getParameterGroup3ParameterGroupParserRuleCall_2_1_0());
					}
					lv_parameterGroup3_4_0=ruleparameterGroup
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFormalParameterSectionRule());
						}
						add(
							$current,
							"parameterGroup3",
							lv_parameterGroup3_4_0,
							"compilador.Pascal.parameterGroup");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			otherlv_5='procedure'
			{
				newLeafNode(otherlv_5, grammarAccess.getFormalParameterSectionAccess().getProcedureKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFormalParameterSectionAccess().getParameterGroup4ParameterGroupParserRuleCall_3_1_0());
					}
					lv_parameterGroup4_6_0=ruleparameterGroup
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFormalParameterSectionRule());
						}
						add(
							$current,
							"parameterGroup4",
							lv_parameterGroup4_6_0,
							"compilador.Pascal.parameterGroup");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleparameterGroup
entryRuleparameterGroup returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameterGroupRule()); }
	iv_ruleparameterGroup=ruleparameterGroup
	{ $current=$iv_ruleparameterGroup.current; }
	EOF;

// Rule parameterGroup
ruleparameterGroup returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getParameterGroupAccess().getIdentifierListIdentifierListParserRuleCall_0_0());
				}
				lv_identifierList_0_0=ruleidentifierList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParameterGroupRule());
					}
					set(
						$current,
						"identifierList",
						lv_identifierList_0_0,
						"compilador.Pascal.identifierList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getParameterGroupAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getParameterGroupAccess().getTypeIdentifierTypeIdentifierParserRuleCall_2_0());
				}
				lv_typeIdentifier_2_0=ruletypeIdentifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParameterGroupRule());
					}
					set(
						$current,
						"typeIdentifier",
						lv_typeIdentifier_2_0,
						"compilador.Pascal.typeIdentifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuletypeIdentifier
entryRuletypeIdentifier returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeIdentifierRule()); }
	iv_ruletypeIdentifier=ruletypeIdentifier
	{ $current=$iv_ruletypeIdentifier.current; }
	EOF;

// Rule typeIdentifier
ruletypeIdentifier returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeIdentifierAccess().getIdentifierIdentifierParserRuleCall_0_0());
				}
				lv_identifier_0_0=ruleidentifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeIdentifierRule());
					}
					set(
						$current,
						"identifier",
						lv_identifier_0_0,
						"compilador.Pascal.identifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				lv_char_1_0='char'
				{
					newLeafNode(lv_char_1_0, grammarAccess.getTypeIdentifierAccess().getCharCharKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTypeIdentifierRule());
					}
					setWithLastConsumed($current, "char", lv_char_1_0, "char");
				}
			)
		)
		    |
		(
			(
				lv_boolean_2_0='boolean'
				{
					newLeafNode(lv_boolean_2_0, grammarAccess.getTypeIdentifierAccess().getBooleanBooleanKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTypeIdentifierRule());
					}
					setWithLastConsumed($current, "boolean", lv_boolean_2_0, "boolean");
				}
			)
		)
		    |
		(
			(
				lv_integer_3_0='integer'
				{
					newLeafNode(lv_integer_3_0, grammarAccess.getTypeIdentifierAccess().getIntegerIntegerKeyword_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTypeIdentifierRule());
					}
					setWithLastConsumed($current, "integer", lv_integer_3_0, "integer");
				}
			)
		)
		    |
		(
			(
				lv_real_4_0='real'
				{
					newLeafNode(lv_real_4_0, grammarAccess.getTypeIdentifierAccess().getRealRealKeyword_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTypeIdentifierRule());
					}
					setWithLastConsumed($current, "real", lv_real_4_0, "real");
				}
			)
		)
		    |
		(
			(
				lv_string_5_0='string'
				{
					newLeafNode(lv_string_5_0, grammarAccess.getTypeIdentifierAccess().getStringStringKeyword_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTypeIdentifierRule());
					}
					setWithLastConsumed($current, "string", lv_string_5_0, "string");
				}
			)
		)
	)
;

// Entry rule entryRuleprocedureType
entryRuleprocedureType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProcedureTypeRule()); }
	iv_ruleprocedureType=ruleprocedureType
	{ $current=$iv_ruleprocedureType.current; }
	EOF;

// Rule procedureType
ruleprocedureType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getProcedureTypeAccess().getProcedureTypeAction_0(),
					$current);
			}
		)
		otherlv_1='procedure'
		{
			newLeafNode(otherlv_1, grammarAccess.getProcedureTypeAccess().getProcedureKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProcedureTypeAccess().getFormalParameterListFormalParameterListParserRuleCall_2_0());
				}
				lv_formalParameterList_2_0=ruleformalParameterList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProcedureTypeRule());
					}
					set(
						$current,
						"formalParameterList",
						lv_formalParameterList_2_0,
						"compilador.Pascal.formalParameterList");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuletype
entryRuletype returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruletype=ruletype
	{ $current=$iv_ruletype.current; }
	EOF;

// Rule type
ruletype returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeAccess().getSimpleTypeSimpleTypeParserRuleCall_0_0());
				}
				lv_simpleType_0_0=rulesimpleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeRule());
					}
					set(
						$current,
						"simpleType",
						lv_simpleType_0_0,
						"compilador.Pascal.simpleType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeAccess().getStructuredTypeStructuredTypeParserRuleCall_1_0());
				}
				lv_structuredType_1_0=rulestructuredType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeRule());
					}
					set(
						$current,
						"structuredType",
						lv_structuredType_1_0,
						"compilador.Pascal.structuredType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeAccess().getPointerTypePointerTypeParserRuleCall_2_0());
				}
				lv_pointerType_2_0=rulepointerType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeRule());
					}
					set(
						$current,
						"pointerType",
						lv_pointerType_2_0,
						"compilador.Pascal.pointerType");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulepointerType
entryRulepointerType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPointerTypeRule()); }
	iv_rulepointerType=rulepointerType
	{ $current=$iv_rulepointerType.current; }
	EOF;

// Rule pointerType
rulepointerType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='^'
		{
			newLeafNode(otherlv_0, grammarAccess.getPointerTypeAccess().getCircumflexAccentKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPointerTypeAccess().getTypeIdentifierTypeIdentifierParserRuleCall_1_0());
				}
				lv_typeIdentifier_1_0=ruletypeIdentifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPointerTypeRule());
					}
					set(
						$current,
						"typeIdentifier",
						lv_typeIdentifier_1_0,
						"compilador.Pascal.typeIdentifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulesimpleType
entryRulesimpleType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSimpleTypeRule()); }
	iv_rulesimpleType=rulesimpleType
	{ $current=$iv_rulesimpleType.current; }
	EOF;

// Rule simpleType
rulesimpleType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSimpleTypeAccess().getScalarTypeScalarTypeParserRuleCall_0_0());
				}
				lv_scalarType_0_0=rulescalarType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSimpleTypeRule());
					}
					set(
						$current,
						"scalarType",
						lv_scalarType_0_0,
						"compilador.Pascal.scalarType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getSimpleTypeAccess().getSubrangeTypeSubrangeTypeParserRuleCall_1_0());
				}
				lv_subrangeType_1_0=rulesubrangeType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSimpleTypeRule());
					}
					set(
						$current,
						"subrangeType",
						lv_subrangeType_1_0,
						"compilador.Pascal.subrangeType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getSimpleTypeAccess().getTypeIdentifierTypeIdentifierParserRuleCall_2_0());
				}
				lv_typeIdentifier_2_0=ruletypeIdentifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSimpleTypeRule());
					}
					set(
						$current,
						"typeIdentifier",
						lv_typeIdentifier_2_0,
						"compilador.Pascal.typeIdentifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getSimpleTypeAccess().getStringtypeStringtypeParserRuleCall_3_0());
				}
				lv_stringtype_3_0=rulestringtype
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSimpleTypeRule());
					}
					set(
						$current,
						"stringtype",
						lv_stringtype_3_0,
						"compilador.Pascal.stringtype");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulescalarType
entryRulescalarType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getScalarTypeRule()); }
	iv_rulescalarType=rulescalarType
	{ $current=$iv_rulescalarType.current; }
	EOF;

// Rule scalarType
rulescalarType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getScalarTypeAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getScalarTypeAccess().getIdentifierListIdentifierListParserRuleCall_1_0());
				}
				lv_identifierList_1_0=ruleidentifierList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getScalarTypeRule());
					}
					set(
						$current,
						"identifierList",
						lv_identifierList_1_0,
						"compilador.Pascal.identifierList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=')'
		{
			newLeafNode(otherlv_2, grammarAccess.getScalarTypeAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRulesubrangeType
entryRulesubrangeType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSubrangeTypeRule()); }
	iv_rulesubrangeType=rulesubrangeType
	{ $current=$iv_rulesubrangeType.current; }
	EOF;

// Rule subrangeType
rulesubrangeType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSubrangeTypeAccess().getConstantConstantParserRuleCall_0_0());
				}
				lv_constant_0_0=ruleconstant
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSubrangeTypeRule());
					}
					set(
						$current,
						"constant",
						lv_constant_0_0,
						"compilador.Pascal.constant");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='..'
		{
			newLeafNode(otherlv_1, grammarAccess.getSubrangeTypeAccess().getFullStopFullStopKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSubrangeTypeAccess().getConstant2ConstantParserRuleCall_2_0());
				}
				lv_constant2_2_0=ruleconstant
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSubrangeTypeRule());
					}
					set(
						$current,
						"constant2",
						lv_constant2_2_0,
						"compilador.Pascal.constant");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulestructuredType
entryRulestructuredType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStructuredTypeRule()); }
	iv_rulestructuredType=rulestructuredType
	{ $current=$iv_rulestructuredType.current; }
	EOF;

// Rule structuredType
rulestructuredType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='packed'
			{
				newLeafNode(otherlv_0, grammarAccess.getStructuredTypeAccess().getPackedKeyword_0_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getStructuredTypeAccess().getUnpackedStructuredTypeUnpackedStructuredTypeParserRuleCall_0_1_0());
					}
					lv_unpackedStructuredType_1_0=ruleunpackedStructuredType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStructuredTypeRule());
						}
						set(
							$current,
							"unpackedStructuredType",
							lv_unpackedStructuredType_1_0,
							"compilador.Pascal.unpackedStructuredType");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getStructuredTypeAccess().getUnpackedStructuredType1UnpackedStructuredTypeParserRuleCall_1_0());
				}
				lv_unpackedStructuredType1_2_0=ruleunpackedStructuredType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStructuredTypeRule());
					}
					add(
						$current,
						"unpackedStructuredType1",
						lv_unpackedStructuredType1_2_0,
						"compilador.Pascal.unpackedStructuredType");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleunpackedStructuredType
entryRuleunpackedStructuredType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnpackedStructuredTypeRule()); }
	iv_ruleunpackedStructuredType=ruleunpackedStructuredType
	{ $current=$iv_ruleunpackedStructuredType.current; }
	EOF;

// Rule unpackedStructuredType
ruleunpackedStructuredType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getUnpackedStructuredTypeAccess().getRecordTypeRecordTypeParserRuleCall_0());
			}
			lv_recordType_0_0=rulerecordType
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getUnpackedStructuredTypeRule());
				}
				set(
					$current,
					"recordType",
					lv_recordType_0_0,
					"compilador.Pascal.recordType");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRulestringtype
entryRulestringtype returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringtypeRule()); }
	iv_rulestringtype=rulestringtype
	{ $current=$iv_rulestringtype.current; }
	EOF;

// Rule stringtype
rulestringtype returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='string'
		{
			newLeafNode(otherlv_0, grammarAccess.getStringtypeAccess().getStringKeyword_0());
		}
		otherlv_1='['
		{
			newLeafNode(otherlv_1, grammarAccess.getStringtypeAccess().getLeftSquareBracketKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getStringtypeAccess().getIdentifierIdentifierParserRuleCall_2_0_0());
					}
					lv_identifier_2_0=ruleidentifier
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStringtypeRule());
						}
						set(
							$current,
							"identifier",
							lv_identifier_2_0,
							"compilador.Pascal.identifier");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getStringtypeAccess().getUnsignedNumberUnsignedNumberParserRuleCall_2_1_0());
					}
					lv_unsignedNumber_3_0=ruleunsignedNumber
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStringtypeRule());
						}
						set(
							$current,
							"unsignedNumber",
							lv_unsignedNumber_3_0,
							"compilador.Pascal.unsignedNumber");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		otherlv_4=']'
		{
			newLeafNode(otherlv_4, grammarAccess.getStringtypeAccess().getRightSquareBracketKeyword_3());
		}
	)
;

// Entry rule entryRulerecordType
entryRulerecordType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRecordTypeRule()); }
	iv_rulerecordType=rulerecordType
	{ $current=$iv_rulerecordType.current; }
	EOF;

// Rule recordType
rulerecordType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getRecordTypeAccess().getRecordTypeAction_0(),
					$current);
			}
		)
		otherlv_1='record'
		{
			newLeafNode(otherlv_1, grammarAccess.getRecordTypeAccess().getRecordKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRecordTypeAccess().getFieldListFieldListParserRuleCall_2_0());
				}
				lv_fieldList_2_0=rulefieldList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRecordTypeRule());
					}
					set(
						$current,
						"fieldList",
						lv_fieldList_2_0,
						"compilador.Pascal.fieldList");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_3='end'
		{
			newLeafNode(otherlv_3, grammarAccess.getRecordTypeAccess().getEndKeyword_3());
		}
	)
;

// Entry rule entryRulefieldList
entryRulefieldList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFieldListRule()); }
	iv_rulefieldList=rulefieldList
	{ $current=$iv_rulefieldList.current; }
	EOF;

// Rule fieldList
rulefieldList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getFieldListAccess().getFixedPartFixedPartParserRuleCall_0_0_0());
					}
					lv_fixedPart_0_0=rulefixedPart
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFieldListRule());
						}
						set(
							$current,
							"fixedPart",
							lv_fixedPart_0_0,
							"compilador.Pascal.fixedPart");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_1=';'
				{
					newLeafNode(otherlv_1, grammarAccess.getFieldListAccess().getSemicolonKeyword_0_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getFieldListAccess().getVariantPartVariantPartParserRuleCall_0_1_1_0());
						}
						lv_variantPart_2_0=rulevariantPart
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getFieldListRule());
							}
							set(
								$current,
								"variantPart",
								lv_variantPart_2_0,
								"compilador.Pascal.variantPart");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)?
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getFieldListAccess().getVariantPart1VariantPartParserRuleCall_1_0());
				}
				lv_variantPart1_3_0=rulevariantPart
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFieldListRule());
					}
					add(
						$current,
						"variantPart1",
						lv_variantPart1_3_0,
						"compilador.Pascal.variantPart");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulefixedPart
entryRulefixedPart returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFixedPartRule()); }
	iv_rulefixedPart=rulefixedPart
	{ $current=$iv_rulefixedPart.current; }
	EOF;

// Rule fixedPart
rulefixedPart returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getFixedPartAccess().getRecordSectionRecordSectionParserRuleCall_0_0());
				}
				lv_recordSection_0_0=rulerecordSection
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFixedPartRule());
					}
					set(
						$current,
						"recordSection",
						lv_recordSection_0_0,
						"compilador.Pascal.recordSection");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=';'
			{
				newLeafNode(otherlv_1, grammarAccess.getFixedPartAccess().getSemicolonKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFixedPartAccess().getRecordSection1RecordSectionParserRuleCall_1_1_0());
					}
					lv_recordSection1_2_0=rulerecordSection
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFixedPartRule());
						}
						add(
							$current,
							"recordSection1",
							lv_recordSection1_2_0,
							"compilador.Pascal.recordSection");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulerecordSection
entryRulerecordSection returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRecordSectionRule()); }
	iv_rulerecordSection=rulerecordSection
	{ $current=$iv_rulerecordSection.current; }
	EOF;

// Rule recordSection
rulerecordSection returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getRecordSectionAccess().getIdentifierListIdentifierListParserRuleCall_0_0());
				}
				lv_identifierList_0_0=ruleidentifierList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRecordSectionRule());
					}
					set(
						$current,
						"identifierList",
						lv_identifierList_0_0,
						"compilador.Pascal.identifierList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getRecordSectionAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRecordSectionAccess().getTypeTypeParserRuleCall_2_0());
				}
				lv_type_2_0=ruletype
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRecordSectionRule());
					}
					set(
						$current,
						"type",
						lv_type_2_0,
						"compilador.Pascal.type");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulevariantPart
entryRulevariantPart returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariantPartRule()); }
	iv_rulevariantPart=rulevariantPart
	{ $current=$iv_rulevariantPart.current; }
	EOF;

// Rule variantPart
rulevariantPart returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='case'
		{
			newLeafNode(otherlv_0, grammarAccess.getVariantPartAccess().getCaseKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVariantPartAccess().getTagTagParserRuleCall_1_0());
				}
				lv_tag_1_0=ruletag
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariantPartRule());
					}
					set(
						$current,
						"tag",
						lv_tag_1_0,
						"compilador.Pascal.tag");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='of'
		{
			newLeafNode(otherlv_2, grammarAccess.getVariantPartAccess().getOfKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVariantPartAccess().getVariantVariantParserRuleCall_3_0());
				}
				lv_variant_3_0=rulevariant
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariantPartRule());
					}
					set(
						$current,
						"variant",
						lv_variant_3_0,
						"compilador.Pascal.variant");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4=';'
			{
				newLeafNode(otherlv_4, grammarAccess.getVariantPartAccess().getSemicolonKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getVariantPartAccess().getVariant1VariantParserRuleCall_4_1_0());
					}
					lv_variant1_5_0=rulevariant
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVariantPartRule());
						}
						add(
							$current,
							"variant1",
							lv_variant1_5_0,
							"compilador.Pascal.variant");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuletag
entryRuletag returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTagRule()); }
	iv_ruletag=ruletag
	{ $current=$iv_ruletag.current; }
	EOF;

// Rule tag
ruletag returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getTagAccess().getIdentifierIdentifierParserRuleCall_0_0_0());
					}
					lv_identifier_0_0=ruleidentifier
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTagRule());
						}
						set(
							$current,
							"identifier",
							lv_identifier_0_0,
							"compilador.Pascal.identifier");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_1=':'
			{
				newLeafNode(otherlv_1, grammarAccess.getTagAccess().getColonKeyword_0_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTagAccess().getTypeIdentifierTypeIdentifierParserRuleCall_0_2_0());
					}
					lv_typeIdentifier_2_0=ruletypeIdentifier
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTagRule());
						}
						set(
							$current,
							"typeIdentifier",
							lv_typeIdentifier_2_0,
							"compilador.Pascal.typeIdentifier");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getTagAccess().getTypeIdentifier1TypeIdentifierParserRuleCall_1_0());
				}
				lv_typeIdentifier1_3_0=ruletypeIdentifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTagRule());
					}
					add(
						$current,
						"typeIdentifier1",
						lv_typeIdentifier1_3_0,
						"compilador.Pascal.typeIdentifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulevariant
entryRulevariant returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariantRule()); }
	iv_rulevariant=rulevariant
	{ $current=$iv_rulevariant.current; }
	EOF;

// Rule variant
rulevariant returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getVariantAccess().getConstantParserRuleCall_0());
		}
		this_constant_0=ruleconstant
		{
			$current = $this_constant_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			otherlv_1=';'
			{
				newLeafNode(otherlv_1, grammarAccess.getVariantAccess().getSemicolonKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getVariantAccess().getConstantConstantParserRuleCall_1_1_0());
					}
					lv_constant_2_0=ruleconstant
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVariantRule());
						}
						add(
							$current,
							"constant",
							lv_constant_2_0,
							"compilador.Pascal.constant");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_3=':'
		{
			newLeafNode(otherlv_3, grammarAccess.getVariantAccess().getColonKeyword_2());
		}
		otherlv_4='('
		{
			newLeafNode(otherlv_4, grammarAccess.getVariantAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVariantAccess().getFieldListFieldListParserRuleCall_4_0());
				}
				lv_fieldList_5_0=rulefieldList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariantRule());
					}
					set(
						$current,
						"fieldList",
						lv_fieldList_5_0,
						"compilador.Pascal.fieldList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getVariantAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleconstList
entryRuleconstList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstListRule()); }
	iv_ruleconstList=ruleconstList
	{ $current=$iv_ruleconstList.current; }
	EOF;

// Rule constList
ruleconstList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getConstListAccess().getConstantConstantParserRuleCall_0_0());
				}
				lv_constant_0_0=ruleconstant
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstListRule());
					}
					set(
						$current,
						"constant",
						lv_constant_0_0,
						"compilador.Pascal.constant");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getConstListAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getConstListAccess().getConstant1ConstantParserRuleCall_1_1_0());
					}
					lv_constant1_2_0=ruleconstant
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConstListRule());
						}
						add(
							$current,
							"constant1",
							lv_constant1_2_0,
							"compilador.Pascal.constant");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulevariableDeclarationPart
entryRulevariableDeclarationPart returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableDeclarationPartRule()); }
	iv_rulevariableDeclarationPart=rulevariableDeclarationPart
	{ $current=$iv_rulevariableDeclarationPart.current; }
	EOF;

// Rule variableDeclarationPart
rulevariableDeclarationPart returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='var'
		{
			newLeafNode(otherlv_0, grammarAccess.getVariableDeclarationPartAccess().getVarKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVariableDeclarationPartAccess().getVariableDeclarationVariableDeclarationParserRuleCall_1_0());
				}
				lv_variableDeclaration_1_0=rulevariableDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariableDeclarationPartRule());
					}
					set(
						$current,
						"variableDeclaration",
						lv_variableDeclaration_1_0,
						"compilador.Pascal.variableDeclaration");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=';'
			{
				newLeafNode(otherlv_2, grammarAccess.getVariableDeclarationPartAccess().getSemicolonKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getVariableDeclarationPartAccess().getVariableDeclaration1VariableDeclarationParserRuleCall_2_1_0());
					}
					lv_variableDeclaration1_3_0=rulevariableDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVariableDeclarationPartRule());
						}
						add(
							$current,
							"variableDeclaration1",
							lv_variableDeclaration1_3_0,
							"compilador.Pascal.variableDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getVariableDeclarationPartAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRulevariableDeclaration
entryRulevariableDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableDeclarationRule()); }
	iv_rulevariableDeclaration=rulevariableDeclaration
	{ $current=$iv_rulevariableDeclaration.current; }
	EOF;

// Rule variableDeclaration
rulevariableDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getVariableDeclarationAccess().getIdentifierListIdentifierListParserRuleCall_0_0());
				}
				lv_identifierList_0_0=ruleidentifierList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
					}
					set(
						$current,
						"identifierList",
						lv_identifierList_0_0,
						"compilador.Pascal.identifierList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getVariableDeclarationAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVariableDeclarationAccess().getTypeTypeParserRuleCall_2_0());
				}
				lv_type_2_0=ruletype
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
					}
					set(
						$current,
						"type",
						lv_type_2_0,
						"compilador.Pascal.type");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3='='
			{
				newLeafNode(otherlv_3, grammarAccess.getVariableDeclarationAccess().getEqualsSignKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getVariableDeclarationAccess().getExpressionExpressionParserRuleCall_3_1_0());
					}
					lv_expression_4_0=ruleexpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
						}
						set(
							$current,
							"expression",
							lv_expression_4_0,
							"compilador.Pascal.expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleprocedureAndFunctionDeclarationPart
entryRuleprocedureAndFunctionDeclarationPart returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProcedureAndFunctionDeclarationPartRule()); }
	iv_ruleprocedureAndFunctionDeclarationPart=ruleprocedureAndFunctionDeclarationPart
	{ $current=$iv_ruleprocedureAndFunctionDeclarationPart.current; }
	EOF;

// Rule procedureAndFunctionDeclarationPart
ruleprocedureAndFunctionDeclarationPart returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getProcedureAndFunctionDeclarationPartAccess().getProcedureOrFunctionDeclarationProcedureOrFunctionDeclarationParserRuleCall_0_0());
				}
				lv_procedureOrFunctionDeclaration_0_0=ruleprocedureOrFunctionDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProcedureAndFunctionDeclarationPartRule());
					}
					set(
						$current,
						"procedureOrFunctionDeclaration",
						lv_procedureOrFunctionDeclaration_0_0,
						"compilador.Pascal.procedureOrFunctionDeclaration");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=';'
		{
			newLeafNode(otherlv_1, grammarAccess.getProcedureAndFunctionDeclarationPartAccess().getSemicolonKeyword_1());
		}
	)
;

// Entry rule entryRuleprocedureOrFunctionDeclaration
entryRuleprocedureOrFunctionDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProcedureOrFunctionDeclarationRule()); }
	iv_ruleprocedureOrFunctionDeclaration=ruleprocedureOrFunctionDeclaration
	{ $current=$iv_ruleprocedureOrFunctionDeclaration.current; }
	EOF;

// Rule procedureOrFunctionDeclaration
ruleprocedureOrFunctionDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getProcedureOrFunctionDeclarationAccess().getProcedureDeclarationProcedureDeclarationParserRuleCall_0_0());
				}
				lv_procedureDeclaration_0_0=ruleprocedureDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProcedureOrFunctionDeclarationRule());
					}
					set(
						$current,
						"procedureDeclaration",
						lv_procedureDeclaration_0_0,
						"compilador.Pascal.procedureDeclaration");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getProcedureOrFunctionDeclarationAccess().getFunctionDeclarationFunctionDeclarationParserRuleCall_1_0());
				}
				lv_functionDeclaration_1_0=rulefunctionDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProcedureOrFunctionDeclarationRule());
					}
					set(
						$current,
						"functionDeclaration",
						lv_functionDeclaration_1_0,
						"compilador.Pascal.functionDeclaration");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleprocedureDeclaration
entryRuleprocedureDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProcedureDeclarationRule()); }
	iv_ruleprocedureDeclaration=ruleprocedureDeclaration
	{ $current=$iv_ruleprocedureDeclaration.current; }
	EOF;

// Rule procedureDeclaration
ruleprocedureDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='procedure'
		{
			newLeafNode(otherlv_0, grammarAccess.getProcedureDeclarationAccess().getProcedureKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProcedureDeclarationAccess().getIdentifierIdentifierParserRuleCall_1_0());
				}
				lv_identifier_1_0=ruleidentifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProcedureDeclarationRule());
					}
					set(
						$current,
						"identifier",
						lv_identifier_1_0,
						"compilador.Pascal.identifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getProcedureDeclarationAccess().getFormalParameterListFormalParameterListParserRuleCall_2_0());
				}
				lv_formalParameterList_2_0=ruleformalParameterList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProcedureDeclarationRule());
					}
					set(
						$current,
						"formalParameterList",
						lv_formalParameterList_2_0,
						"compilador.Pascal.formalParameterList");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_3=';'
		{
			newLeafNode(otherlv_3, grammarAccess.getProcedureDeclarationAccess().getSemicolonKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProcedureDeclarationAccess().getBlockBlockParserRuleCall_4_0());
				}
				lv_block_4_0=ruleblock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProcedureDeclarationRule());
					}
					set(
						$current,
						"block",
						lv_block_4_0,
						"compilador.Pascal.block");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulefunctionDeclaration
entryRulefunctionDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionDeclarationRule()); }
	iv_rulefunctionDeclaration=rulefunctionDeclaration
	{ $current=$iv_rulefunctionDeclaration.current; }
	EOF;

// Rule functionDeclaration
rulefunctionDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='function'
		{
			newLeafNode(otherlv_0, grammarAccess.getFunctionDeclarationAccess().getFunctionKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getIdentifierIdentifierParserRuleCall_1_0());
				}
				lv_identifier_1_0=ruleidentifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
					}
					set(
						$current,
						"identifier",
						lv_identifier_1_0,
						"compilador.Pascal.identifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getFormalParameterListFormalParameterListParserRuleCall_2_0());
				}
				lv_formalParameterList_2_0=ruleformalParameterList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
					}
					set(
						$current,
						"formalParameterList",
						lv_formalParameterList_2_0,
						"compilador.Pascal.formalParameterList");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_3=':'
		{
			newLeafNode(otherlv_3, grammarAccess.getFunctionDeclarationAccess().getColonKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getTypeIdentifierTypeIdentifierParserRuleCall_4_0());
				}
				lv_typeIdentifier_4_0=ruletypeIdentifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
					}
					set(
						$current,
						"typeIdentifier",
						lv_typeIdentifier_4_0,
						"compilador.Pascal.typeIdentifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=';'
		{
			newLeafNode(otherlv_5, grammarAccess.getFunctionDeclarationAccess().getSemicolonKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getBlockBlockParserRuleCall_6_0());
				}
				lv_block_6_0=ruleblock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
					}
					set(
						$current,
						"block",
						lv_block_6_0,
						"compilador.Pascal.block");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulestatement
entryRulestatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_rulestatement=rulestatement
	{ $current=$iv_rulestatement.current; }
	EOF;

// Rule statement
rulestatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getStatementAccess().getLabelParserRuleCall_0_0());
			}
			this_label_0=rulelabel
			{
				$current = $this_label_0.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_1=':'
			{
				newLeafNode(otherlv_1, grammarAccess.getStatementAccess().getColonKeyword_0_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getStatementAccess().getUnlabelledStatementUnlabelledStatementParserRuleCall_0_2_0());
					}
					lv_unlabelledStatement_2_0=ruleunlabelledStatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStatementRule());
						}
						set(
							$current,
							"unlabelledStatement",
							lv_unlabelledStatement_2_0,
							"compilador.Pascal.unlabelledStatement");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getStatementAccess().getUnlabelledStatementUnlabelledStatementParserRuleCall_1_0());
				}
				lv_unlabelledStatement_3_0=ruleunlabelledStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStatementRule());
					}
					set(
						$current,
						"unlabelledStatement",
						lv_unlabelledStatement_3_0,
						"compilador.Pascal.unlabelledStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleunlabelledStatement
entryRuleunlabelledStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnlabelledStatementRule()); }
	iv_ruleunlabelledStatement=ruleunlabelledStatement
	{ $current=$iv_ruleunlabelledStatement.current; }
	EOF;

// Rule unlabelledStatement
ruleunlabelledStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getUnlabelledStatementAccess().getSimpleStatementSimpleStatementParserRuleCall_0_0());
				}
				lv_simpleStatement_0_0=rulesimpleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnlabelledStatementRule());
					}
					set(
						$current,
						"simpleStatement",
						lv_simpleStatement_0_0,
						"compilador.Pascal.simpleStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getUnlabelledStatementAccess().getStructuredStatementStructuredStatementParserRuleCall_1_0());
				}
				lv_structuredStatement_1_0=rulestructuredStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnlabelledStatementRule());
					}
					set(
						$current,
						"structuredStatement",
						lv_structuredStatement_1_0,
						"compilador.Pascal.structuredStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getUnlabelledStatementAccess().getIdentifierIdentifierParserRuleCall_2_0_0());
					}
					lv_identifier_2_0=ruleidentifier
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getUnlabelledStatementRule());
						}
						set(
							$current,
							"identifier",
							lv_identifier_2_0,
							"compilador.Pascal.identifier");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3='('
				{
					newLeafNode(otherlv_3, grammarAccess.getUnlabelledStatementAccess().getLeftParenthesisKeyword_2_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getUnlabelledStatementAccess().getParameterListParameterListParserRuleCall_2_1_1_0());
						}
						lv_parameterList_4_0=ruleparameterList
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getUnlabelledStatementRule());
							}
							set(
								$current,
								"parameterList",
								lv_parameterList_4_0,
								"compilador.Pascal.parameterList");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_5=')'
				{
					newLeafNode(otherlv_5, grammarAccess.getUnlabelledStatementAccess().getRightParenthesisKeyword_2_1_2());
				}
			)?
		)
	)
;

// Entry rule entryRulesimpleStatement
entryRulesimpleStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSimpleStatementRule()); }
	iv_rulesimpleStatement=rulesimpleStatement
	{ $current=$iv_rulesimpleStatement.current; }
	EOF;

// Rule simpleStatement
rulesimpleStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSimpleStatementAccess().getSimpleStatementAction_0(),
					$current);
			}
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getSimpleStatementAccess().getGotoStatementGotoStatementParserRuleCall_1_0_0());
					}
					lv_gotoStatement_1_0=rulegotoStatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSimpleStatementRule());
						}
						set(
							$current,
							"gotoStatement",
							lv_gotoStatement_1_0,
							"compilador.Pascal.gotoStatement");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getSimpleStatementAccess().getAssignmentStatementAssignmentStatementParserRuleCall_1_1_0());
					}
					lv_assignmentStatement_2_0=ruleassignmentStatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSimpleStatementRule());
						}
						set(
							$current,
							"assignmentStatement",
							lv_assignmentStatement_2_0,
							"compilador.Pascal.assignmentStatement");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleassignmentStatement
entryRuleassignmentStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssignmentStatementRule()); }
	iv_ruleassignmentStatement=ruleassignmentStatement
	{ $current=$iv_ruleassignmentStatement.current; }
	EOF;

// Rule assignmentStatement
ruleassignmentStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAssignmentStatementAccess().getVariableVariableParserRuleCall_0_0());
				}
				lv_variable_0_0=rulevariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssignmentStatementRule());
					}
					set(
						$current,
						"variable",
						lv_variable_0_0,
						"compilador.Pascal.variable");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=':='
		{
			newLeafNode(otherlv_1, grammarAccess.getAssignmentStatementAccess().getColonEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAssignmentStatementAccess().getExpressionExpressionParserRuleCall_2_0());
				}
				lv_expression_2_0=ruleexpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssignmentStatementRule());
					}
					set(
						$current,
						"expression",
						lv_expression_2_0,
						"compilador.Pascal.expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulevariable
entryRulevariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	iv_rulevariable=rulevariable
	{ $current=$iv_rulevariable.current; }
	EOF;

// Rule variable
rulevariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='@'
			{
				newLeafNode(otherlv_0, grammarAccess.getVariableAccess().getCommercialAtKeyword_0_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getVariableAccess().getIdentifierIdentifierParserRuleCall_0_1_0());
					}
					lv_identifier_1_0=ruleidentifier
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVariableRule());
						}
						set(
							$current,
							"identifier",
							lv_identifier_1_0,
							"compilador.Pascal.identifier");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getVariableAccess().getIdentifierIdentifierParserRuleCall_1_0());
				}
				lv_identifier_2_0=ruleidentifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariableRule());
					}
					set(
						$current,
						"identifier",
						lv_identifier_2_0,
						"compilador.Pascal.identifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleexpression
entryRuleexpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleexpression=ruleexpression
	{ $current=$iv_ruleexpression.current; }
	EOF;

// Rule expression
ruleexpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionAccess().getSimpleExpressionSimpleExpressionParserRuleCall_0_0());
				}
				lv_simpleExpression_0_0=rulesimpleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionRule());
					}
					set(
						$current,
						"simpleExpression",
						lv_simpleExpression_0_0,
						"compilador.Pascal.simpleExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getExpressionAccess().getRelationaloperatorRelationaloperatorParserRuleCall_1_0_0());
					}
					lv_relationaloperator_1_0=rulerelationaloperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpressionRule());
						}
						set(
							$current,
							"relationaloperator",
							lv_relationaloperator_1_0,
							"compilador.Pascal.relationaloperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getExpressionAccess().getExpressionExpressionParserRuleCall_1_1_0());
					}
					lv_expression_2_0=ruleexpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpressionRule());
						}
						set(
							$current,
							"expression",
							lv_expression_2_0,
							"compilador.Pascal.expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRulerelationaloperator
entryRulerelationaloperator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRelationaloperatorRule()); }
	iv_rulerelationaloperator=rulerelationaloperator
	{ $current=$iv_rulerelationaloperator.current.getText(); }
	EOF;

// Rule relationaloperator
rulerelationaloperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRelationaloperatorAccess().getEqualsSignKeyword_0());
		}
		    |
		kw='<>'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRelationaloperatorAccess().getLessThanSignGreaterThanSignKeyword_1());
		}
		    |
		kw='<'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRelationaloperatorAccess().getLessThanSignKeyword_2());
		}
		    |
		kw='<='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRelationaloperatorAccess().getLessThanSignEqualsSignKeyword_3());
		}
		    |
		kw='>='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRelationaloperatorAccess().getGreaterThanSignEqualsSignKeyword_4());
		}
		    |
		kw='>'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRelationaloperatorAccess().getGreaterThanSignKeyword_5());
		}
		    |
		kw='in'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRelationaloperatorAccess().getInKeyword_6());
		}
	)
;

// Entry rule entryRulesimpleExpression
entryRulesimpleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSimpleExpressionRule()); }
	iv_rulesimpleExpression=rulesimpleExpression
	{ $current=$iv_rulesimpleExpression.current; }
	EOF;

// Rule simpleExpression
rulesimpleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSimpleExpressionAccess().getTermTermParserRuleCall_0_0());
				}
				lv_term_0_0=ruleterm
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSimpleExpressionRule());
					}
					set(
						$current,
						"term",
						lv_term_0_0,
						"compilador.Pascal.term");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getSimpleExpressionAccess().getAdditiveoperatorAdditiveoperatorParserRuleCall_1_0_0());
					}
					lv_additiveoperator_1_0=ruleadditiveoperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSimpleExpressionRule());
						}
						set(
							$current,
							"additiveoperator",
							lv_additiveoperator_1_0,
							"compilador.Pascal.additiveoperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getSimpleExpressionAccess().getSimpleExpressionSimpleExpressionParserRuleCall_1_1_0());
					}
					lv_simpleExpression_2_0=rulesimpleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSimpleExpressionRule());
						}
						set(
							$current,
							"simpleExpression",
							lv_simpleExpression_2_0,
							"compilador.Pascal.simpleExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleadditiveoperator
entryRuleadditiveoperator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAdditiveoperatorRule()); }
	iv_ruleadditiveoperator=ruleadditiveoperator
	{ $current=$iv_ruleadditiveoperator.current.getText(); }
	EOF;

// Rule additiveoperator
ruleadditiveoperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='+'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAdditiveoperatorAccess().getPlusSignKeyword_0());
		}
		    |
		kw='-'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAdditiveoperatorAccess().getHyphenMinusKeyword_1());
		}
		    |
		kw='or'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAdditiveoperatorAccess().getOrKeyword_2());
		}
	)
;

// Entry rule entryRuleterm
entryRuleterm returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTermRule()); }
	iv_ruleterm=ruleterm
	{ $current=$iv_ruleterm.current; }
	EOF;

// Rule term
ruleterm returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTermAccess().getSignedFactorSignedFactorParserRuleCall_0_0());
				}
				lv_signedFactor_0_0=rulesignedFactor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTermRule());
					}
					set(
						$current,
						"signedFactor",
						lv_signedFactor_0_0,
						"compilador.Pascal.signedFactor");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getTermAccess().getMultiplicativeoperatorMultiplicativeoperatorParserRuleCall_1_0_0());
					}
					lv_multiplicativeoperator_1_0=rulemultiplicativeoperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTermRule());
						}
						set(
							$current,
							"multiplicativeoperator",
							lv_multiplicativeoperator_1_0,
							"compilador.Pascal.multiplicativeoperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getTermAccess().getTermTermParserRuleCall_1_1_0());
					}
					lv_term_2_0=ruleterm
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTermRule());
						}
						set(
							$current,
							"term",
							lv_term_2_0,
							"compilador.Pascal.term");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRulemultiplicativeoperator
entryRulemultiplicativeoperator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getMultiplicativeoperatorRule()); }
	iv_rulemultiplicativeoperator=rulemultiplicativeoperator
	{ $current=$iv_rulemultiplicativeoperator.current.getText(); }
	EOF;

// Rule multiplicativeoperator
rulemultiplicativeoperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='*'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMultiplicativeoperatorAccess().getAsteriskKeyword_0());
		}
		    |
		kw='/'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMultiplicativeoperatorAccess().getSolidusKeyword_1());
		}
		    |
		kw='div'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMultiplicativeoperatorAccess().getDivKeyword_2());
		}
		    |
		kw='mod'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMultiplicativeoperatorAccess().getModKeyword_3());
		}
		    |
		kw='and'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMultiplicativeoperatorAccess().getAndKeyword_4());
		}
	)
;

// Entry rule entryRulesignedFactor
entryRulesignedFactor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSignedFactorRule()); }
	iv_rulesignedFactor=rulesignedFactor
	{ $current=$iv_rulesignedFactor.current; }
	EOF;

// Rule signedFactor
rulesignedFactor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='+'
			{
				newLeafNode(otherlv_0, grammarAccess.getSignedFactorAccess().getPlusSignKeyword_0_0());
			}
			    |
			otherlv_1='-'
			{
				newLeafNode(otherlv_1, grammarAccess.getSignedFactorAccess().getHyphenMinusKeyword_0_1());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getSignedFactorAccess().getFactorFactorParserRuleCall_1_0());
				}
				lv_factor_2_0=rulefactor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSignedFactorRule());
					}
					set(
						$current,
						"factor",
						lv_factor_2_0,
						"compilador.Pascal.factor");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulefactor
entryRulefactor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFactorRule()); }
	iv_rulefactor=rulefactor
	{ $current=$iv_rulefactor.current; }
	EOF;

// Rule factor
rulefactor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='('
			{
				newLeafNode(otherlv_0, grammarAccess.getFactorAccess().getLeftParenthesisKeyword_0_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFactorAccess().getExpressionExpressionParserRuleCall_0_1_0());
					}
					lv_expression_1_0=ruleexpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFactorRule());
						}
						set(
							$current,
							"expression",
							lv_expression_1_0,
							"compilador.Pascal.expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_2=')'
			{
				newLeafNode(otherlv_2, grammarAccess.getFactorAccess().getRightParenthesisKeyword_0_2());
			}
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getFactorAccess().getUnsignedConstantUnsignedConstantParserRuleCall_1_0());
				}
				lv_unsignedConstant_3_0=ruleunsignedConstant
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFactorRule());
					}
					set(
						$current,
						"unsignedConstant",
						lv_unsignedConstant_3_0,
						"compilador.Pascal.unsignedConstant");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			otherlv_4='not'
			{
				newLeafNode(otherlv_4, grammarAccess.getFactorAccess().getNotKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFactorAccess().getFactorFactorParserRuleCall_2_1_0());
					}
					lv_factor_5_0=rulefactor
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFactorRule());
						}
						set(
							$current,
							"factor",
							lv_factor_5_0,
							"compilador.Pascal.factor");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				lv_bool_6_0=RULE_BOOL
				{
					newLeafNode(lv_bool_6_0, grammarAccess.getFactorAccess().getBoolBOOLTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFactorRule());
					}
					setWithLastConsumed(
						$current,
						"bool",
						lv_bool_6_0,
						"compilador.Pascal.BOOL");
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getFactorAccess().getFunctionDesignatorFunctionDesignatorParserRuleCall_4_0());
				}
				lv_functionDesignator_7_0=rulefunctionDesignator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFactorRule());
					}
					set(
						$current,
						"functionDesignator",
						lv_functionDesignator_7_0,
						"compilador.Pascal.functionDesignator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getFactorAccess().getVariableVariableParserRuleCall_5_0());
				}
				lv_variable_8_0=rulevariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFactorRule());
					}
					set(
						$current,
						"variable",
						lv_variable_8_0,
						"compilador.Pascal.variable");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleunsignedConstant
entryRuleunsignedConstant returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnsignedConstantRule()); }
	iv_ruleunsignedConstant=ruleunsignedConstant
	{ $current=$iv_ruleunsignedConstant.current; }
	EOF;

// Rule unsignedConstant
ruleunsignedConstant returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getUnsignedConstantAccess().getUnsignedNumberUnsignedNumberParserRuleCall_0_0());
				}
				lv_unsignedNumber_0_0=ruleunsignedNumber
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnsignedConstantRule());
					}
					set(
						$current,
						"unsignedNumber",
						lv_unsignedNumber_0_0,
						"compilador.Pascal.unsignedNumber");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				lv_string_literal_1_0=RULE_STRING_LITERAL
				{
					newLeafNode(lv_string_literal_1_0, grammarAccess.getUnsignedConstantAccess().getString_literalSTRING_LITERALTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getUnsignedConstantRule());
					}
					setWithLastConsumed(
						$current,
						"string_literal",
						lv_string_literal_1_0,
						"compilador.Pascal.STRING_LITERAL");
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getUnsignedConstantAccess().getConstantChrConstantChrParserRuleCall_2_0());
				}
				lv_constantChr_2_0=ruleconstantChr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnsignedConstantRule());
					}
					set(
						$current,
						"constantChr",
						lv_constantChr_2_0,
						"compilador.Pascal.constantChr");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getUnsignedConstantAccess().getUnsignedConstantAction_3_0(),
						$current);
				}
			)
			otherlv_4='nil'
			{
				newLeafNode(otherlv_4, grammarAccess.getUnsignedConstantAccess().getNilKeyword_3_1());
			}
		)
	)
;

// Entry rule entryRulefunctionDesignator
entryRulefunctionDesignator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionDesignatorRule()); }
	iv_rulefunctionDesignator=rulefunctionDesignator
	{ $current=$iv_rulefunctionDesignator.current; }
	EOF;

// Rule functionDesignator
rulefunctionDesignator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionDesignatorAccess().getIdentifierIdentifierParserRuleCall_0_0());
				}
				lv_identifier_0_0=ruleidentifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionDesignatorRule());
					}
					set(
						$current,
						"identifier",
						lv_identifier_0_0,
						"compilador.Pascal.identifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getFunctionDesignatorAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionDesignatorAccess().getParameterListParameterListParserRuleCall_2_0());
				}
				lv_parameterList_2_0=ruleparameterList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionDesignatorRule());
					}
					set(
						$current,
						"parameterList",
						lv_parameterList_2_0,
						"compilador.Pascal.parameterList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getFunctionDesignatorAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleparameterList
entryRuleparameterList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameterListRule()); }
	iv_ruleparameterList=ruleparameterList
	{ $current=$iv_ruleparameterList.current; }
	EOF;

// Rule parameterList
ruleparameterList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getParameterListAccess().getActualParameterParserRuleCall_0());
		}
		this_actualParameter_0=ruleactualParameter
		{
			$current = $this_actualParameter_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getParameterListAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getParameterListAccess().getActualParameterActualParameterParserRuleCall_1_1_0());
					}
					lv_actualParameter_2_0=ruleactualParameter
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getParameterListRule());
						}
						add(
							$current,
							"actualParameter",
							lv_actualParameter_2_0,
							"compilador.Pascal.actualParameter");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleactualParameter
entryRuleactualParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActualParameterRule()); }
	iv_ruleactualParameter=ruleactualParameter
	{ $current=$iv_ruleactualParameter.current; }
	EOF;

// Rule actualParameter
ruleactualParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getActualParameterAccess().getExpressionExpressionParserRuleCall_0());
			}
			lv_expression_0_0=ruleexpression
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getActualParameterRule());
				}
				set(
					$current,
					"expression",
					lv_expression_0_0,
					"compilador.Pascal.expression");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRulegotoStatement
entryRulegotoStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGotoStatementRule()); }
	iv_rulegotoStatement=rulegotoStatement
	{ $current=$iv_rulegotoStatement.current; }
	EOF;

// Rule gotoStatement
rulegotoStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='goto'
		{
			newLeafNode(otherlv_0, grammarAccess.getGotoStatementAccess().getGotoKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGotoStatementAccess().getLabelLabelParserRuleCall_1_0());
				}
				lv_label_1_0=rulelabel
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGotoStatementRule());
					}
					set(
						$current,
						"label",
						lv_label_1_0,
						"compilador.Pascal.label");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulestructuredStatement
entryRulestructuredStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStructuredStatementRule()); }
	iv_rulestructuredStatement=rulestructuredStatement
	{ $current=$iv_rulestructuredStatement.current; }
	EOF;

// Rule structuredStatement
rulestructuredStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getStructuredStatementAccess().getCompoundStatementCompoundStatementParserRuleCall_0_0());
				}
				lv_compoundStatement_0_0=rulecompoundStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStructuredStatementRule());
					}
					set(
						$current,
						"compoundStatement",
						lv_compoundStatement_0_0,
						"compilador.Pascal.compoundStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getStructuredStatementAccess().getConditionalStatementConditionalStatementParserRuleCall_1_0());
				}
				lv_conditionalStatement_1_0=ruleconditionalStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStructuredStatementRule());
					}
					set(
						$current,
						"conditionalStatement",
						lv_conditionalStatement_1_0,
						"compilador.Pascal.conditionalStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulecompoundStatement
entryRulecompoundStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCompoundStatementRule()); }
	iv_rulecompoundStatement=rulecompoundStatement
	{ $current=$iv_rulecompoundStatement.current; }
	EOF;

// Rule compoundStatement
rulecompoundStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='begin'
		{
			newLeafNode(otherlv_0, grammarAccess.getCompoundStatementAccess().getBeginKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCompoundStatementAccess().getStatementsStatementsParserRuleCall_1_0());
				}
				lv_statements_1_0=rulestatements
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCompoundStatementRule());
					}
					set(
						$current,
						"statements",
						lv_statements_1_0,
						"compilador.Pascal.statements");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='end'
		{
			newLeafNode(otherlv_2, grammarAccess.getCompoundStatementAccess().getEndKeyword_2());
		}
	)
;

// Entry rule entryRulestatements
entryRulestatements returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementsRule()); }
	iv_rulestatements=rulestatements
	{ $current=$iv_rulestatements.current; }
	EOF;

// Rule statements
rulestatements returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getStatementsAccess().getStatementStatementParserRuleCall_0_0());
				}
				lv_statement_0_0=rulestatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStatementsRule());
					}
					add(
						$current,
						"statement",
						lv_statement_0_0,
						"compilador.Pascal.statement");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=';'
			{
				newLeafNode(otherlv_1, grammarAccess.getStatementsAccess().getSemicolonKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getStatementsAccess().getStatementStatementParserRuleCall_1_1_0());
					}
					lv_statement_2_0=rulestatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStatementsRule());
						}
						add(
							$current,
							"statement",
							lv_statement_2_0,
							"compilador.Pascal.statement");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleconditionalStatement
entryRuleconditionalStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionalStatementRule()); }
	iv_ruleconditionalStatement=ruleconditionalStatement
	{ $current=$iv_ruleconditionalStatement.current; }
	EOF;

// Rule conditionalStatement
ruleconditionalStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getConditionalStatementAccess().getCaseStatementCaseStatementParserRuleCall_0());
			}
			lv_caseStatement_0_0=rulecaseStatement
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getConditionalStatementRule());
				}
				set(
					$current,
					"caseStatement",
					lv_caseStatement_0_0,
					"compilador.Pascal.caseStatement");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRulecaseStatement
entryRulecaseStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCaseStatementRule()); }
	iv_rulecaseStatement=rulecaseStatement
	{ $current=$iv_rulecaseStatement.current; }
	EOF;

// Rule caseStatement
rulecaseStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='case'
		{
			newLeafNode(otherlv_0, grammarAccess.getCaseStatementAccess().getCaseKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCaseStatementAccess().getExpressionExpressionParserRuleCall_1_0());
				}
				lv_expression_1_0=ruleexpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCaseStatementRule());
					}
					set(
						$current,
						"expression",
						lv_expression_1_0,
						"compilador.Pascal.expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='of'
		{
			newLeafNode(otherlv_2, grammarAccess.getCaseStatementAccess().getOfKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCaseStatementAccess().getCaseListElementCaseListElementParserRuleCall_3_0());
				}
				lv_caseListElement_3_0=rulecaseListElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCaseStatementRule());
					}
					set(
						$current,
						"caseListElement",
						lv_caseListElement_3_0,
						"compilador.Pascal.caseListElement");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4=';'
			{
				newLeafNode(otherlv_4, grammarAccess.getCaseStatementAccess().getSemicolonKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCaseStatementAccess().getCaseListElement1CaseListElementParserRuleCall_4_1_0());
					}
					lv_caseListElement1_5_0=rulecaseListElement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCaseStatementRule());
						}
						add(
							$current,
							"caseListElement1",
							lv_caseListElement1_5_0,
							"compilador.Pascal.caseListElement");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		(
			otherlv_6=';'
			{
				newLeafNode(otherlv_6, grammarAccess.getCaseStatementAccess().getSemicolonKeyword_5_0());
			}
			otherlv_7='else'
			{
				newLeafNode(otherlv_7, grammarAccess.getCaseStatementAccess().getElseKeyword_5_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCaseStatementAccess().getStatementsStatementsParserRuleCall_5_2_0());
					}
					lv_statements_8_0=rulestatements
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCaseStatementRule());
						}
						set(
							$current,
							"statements",
							lv_statements_8_0,
							"compilador.Pascal.statements");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_9='end'
		{
			newLeafNode(otherlv_9, grammarAccess.getCaseStatementAccess().getEndKeyword_6());
		}
	)
;

// Entry rule entryRulecaseListElement
entryRulecaseListElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCaseListElementRule()); }
	iv_rulecaseListElement=rulecaseListElement
	{ $current=$iv_rulecaseListElement.current; }
	EOF;

// Rule caseListElement
rulecaseListElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getCaseListElementAccess().getConstListConstListParserRuleCall_0_0());
				}
				lv_constList_0_0=ruleconstList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCaseListElementRule());
					}
					set(
						$current,
						"constList",
						lv_constList_0_0,
						"compilador.Pascal.constList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getCaseListElementAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCaseListElementAccess().getStatementStatementParserRuleCall_2_0());
				}
				lv_statement_2_0=rulestatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCaseListElementRule());
					}
					set(
						$current,
						"statement",
						lv_statement_2_0,
						"compilador.Pascal.statement");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

RULE_BOOL : ('true'|'false');

RULE_IDENT : ('a'..'z'|'A'..'Z') ('a'..'z'|'A'..'Z'|RULE_NUM|'_')*;

RULE_STRING_LITERAL : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

fragment RULE_EXPONENT : 'e' ('+'|'-')? RULE_NUM+;

RULE_NUM : ('0'..'9')+;

RULE_NUM_REAL : RULE_NUM+ '.' RULE_NUM+ RULE_EXPONENT?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
