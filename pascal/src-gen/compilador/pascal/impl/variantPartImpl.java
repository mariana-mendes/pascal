/**
 * generated by Xtext 2.16.0
 */
package compilador.pascal.impl;

import compilador.pascal.PascalPackage;
import compilador.pascal.tag;
import compilador.pascal.variant;
import compilador.pascal.variantPart;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>variant Part</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link compilador.pascal.impl.variantPartImpl#getTag <em>Tag</em>}</li>
 *   <li>{@link compilador.pascal.impl.variantPartImpl#getVariant <em>Variant</em>}</li>
 *   <li>{@link compilador.pascal.impl.variantPartImpl#getVariant1 <em>Variant1</em>}</li>
 * </ul>
 *
 * @generated
 */
public class variantPartImpl extends MinimalEObjectImpl.Container implements variantPart
{
  /**
   * The cached value of the '{@link #getTag() <em>Tag</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTag()
   * @generated
   * @ordered
   */
  protected tag tag;

  /**
   * The cached value of the '{@link #getVariant() <em>Variant</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVariant()
   * @generated
   * @ordered
   */
  protected variant variant;

  /**
   * The cached value of the '{@link #getVariant1() <em>Variant1</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVariant1()
   * @generated
   * @ordered
   */
  protected EList<variant> variant1;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected variantPartImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return PascalPackage.Literals.VARIANT_PART;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public tag getTag()
  {
    return tag;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTag(tag newTag, NotificationChain msgs)
  {
    tag oldTag = tag;
    tag = newTag;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PascalPackage.VARIANT_PART__TAG, oldTag, newTag);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTag(tag newTag)
  {
    if (newTag != tag)
    {
      NotificationChain msgs = null;
      if (tag != null)
        msgs = ((InternalEObject)tag).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PascalPackage.VARIANT_PART__TAG, null, msgs);
      if (newTag != null)
        msgs = ((InternalEObject)newTag).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PascalPackage.VARIANT_PART__TAG, null, msgs);
      msgs = basicSetTag(newTag, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PascalPackage.VARIANT_PART__TAG, newTag, newTag));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public variant getVariant()
  {
    return variant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetVariant(variant newVariant, NotificationChain msgs)
  {
    variant oldVariant = variant;
    variant = newVariant;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PascalPackage.VARIANT_PART__VARIANT, oldVariant, newVariant);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setVariant(variant newVariant)
  {
    if (newVariant != variant)
    {
      NotificationChain msgs = null;
      if (variant != null)
        msgs = ((InternalEObject)variant).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PascalPackage.VARIANT_PART__VARIANT, null, msgs);
      if (newVariant != null)
        msgs = ((InternalEObject)newVariant).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PascalPackage.VARIANT_PART__VARIANT, null, msgs);
      msgs = basicSetVariant(newVariant, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PascalPackage.VARIANT_PART__VARIANT, newVariant, newVariant));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<variant> getVariant1()
  {
    if (variant1 == null)
    {
      variant1 = new EObjectContainmentEList<variant>(variant.class, this, PascalPackage.VARIANT_PART__VARIANT1);
    }
    return variant1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case PascalPackage.VARIANT_PART__TAG:
        return basicSetTag(null, msgs);
      case PascalPackage.VARIANT_PART__VARIANT:
        return basicSetVariant(null, msgs);
      case PascalPackage.VARIANT_PART__VARIANT1:
        return ((InternalEList<?>)getVariant1()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case PascalPackage.VARIANT_PART__TAG:
        return getTag();
      case PascalPackage.VARIANT_PART__VARIANT:
        return getVariant();
      case PascalPackage.VARIANT_PART__VARIANT1:
        return getVariant1();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case PascalPackage.VARIANT_PART__TAG:
        setTag((tag)newValue);
        return;
      case PascalPackage.VARIANT_PART__VARIANT:
        setVariant((variant)newValue);
        return;
      case PascalPackage.VARIANT_PART__VARIANT1:
        getVariant1().clear();
        getVariant1().addAll((Collection<? extends variant>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case PascalPackage.VARIANT_PART__TAG:
        setTag((tag)null);
        return;
      case PascalPackage.VARIANT_PART__VARIANT:
        setVariant((variant)null);
        return;
      case PascalPackage.VARIANT_PART__VARIANT1:
        getVariant1().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case PascalPackage.VARIANT_PART__TAG:
        return tag != null;
      case PascalPackage.VARIANT_PART__VARIANT:
        return variant != null;
      case PascalPackage.VARIANT_PART__VARIANT1:
        return variant1 != null && !variant1.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //variantPartImpl
