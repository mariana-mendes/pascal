/**
 * generated by Xtext 2.15.0
 */
package compilador.pascal.impl;

import compilador.pascal.PascalPackage;
import compilador.pascal.caseListElement;
import compilador.pascal.caseStatement;
import compilador.pascal.expression;
import compilador.pascal.statements;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>case Statement</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@link compilador.pascal.impl.caseStatementImpl#getExpression <em>Expression</em>}</li>
 *   <li>{@link compilador.pascal.impl.caseStatementImpl#getCaseListElement <em>Case List Element</em>}</li>
 *   <li>{@link compilador.pascal.impl.caseStatementImpl#getCaseListElement1 <em>Case List Element1</em>}</li>
 *   <li>{@link compilador.pascal.impl.caseStatementImpl#getStatements <em>Statements</em>}</li>
 * </ul>
 * </p>
 *
 * @generated
 */
public class caseStatementImpl extends MinimalEObjectImpl.Container implements caseStatement
{
  /**
   * The cached value of the '{@link #getExpression() <em>Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpression()
   * @generated
   * @ordered
   */
  protected expression expression;

  /**
   * The cached value of the '{@link #getCaseListElement() <em>Case List Element</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCaseListElement()
   * @generated
   * @ordered
   */
  protected caseListElement caseListElement;

  /**
   * The cached value of the '{@link #getCaseListElement1() <em>Case List Element1</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCaseListElement1()
   * @generated
   * @ordered
   */
  protected EList<caseListElement> caseListElement1;

  /**
   * The cached value of the '{@link #getStatements() <em>Statements</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStatements()
   * @generated
   * @ordered
   */
  protected statements statements;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected caseStatementImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return PascalPackage.Literals.CASE_STATEMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public expression getExpression()
  {
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExpression(expression newExpression, NotificationChain msgs)
  {
    expression oldExpression = expression;
    expression = newExpression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PascalPackage.CASE_STATEMENT__EXPRESSION, oldExpression, newExpression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setExpression(expression newExpression)
  {
    if (newExpression != expression)
    {
      NotificationChain msgs = null;
      if (expression != null)
        msgs = ((InternalEObject)expression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PascalPackage.CASE_STATEMENT__EXPRESSION, null, msgs);
      if (newExpression != null)
        msgs = ((InternalEObject)newExpression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PascalPackage.CASE_STATEMENT__EXPRESSION, null, msgs);
      msgs = basicSetExpression(newExpression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PascalPackage.CASE_STATEMENT__EXPRESSION, newExpression, newExpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public caseListElement getCaseListElement()
  {
    return caseListElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCaseListElement(caseListElement newCaseListElement, NotificationChain msgs)
  {
    caseListElement oldCaseListElement = caseListElement;
    caseListElement = newCaseListElement;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PascalPackage.CASE_STATEMENT__CASE_LIST_ELEMENT, oldCaseListElement, newCaseListElement);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCaseListElement(caseListElement newCaseListElement)
  {
    if (newCaseListElement != caseListElement)
    {
      NotificationChain msgs = null;
      if (caseListElement != null)
        msgs = ((InternalEObject)caseListElement).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PascalPackage.CASE_STATEMENT__CASE_LIST_ELEMENT, null, msgs);
      if (newCaseListElement != null)
        msgs = ((InternalEObject)newCaseListElement).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PascalPackage.CASE_STATEMENT__CASE_LIST_ELEMENT, null, msgs);
      msgs = basicSetCaseListElement(newCaseListElement, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PascalPackage.CASE_STATEMENT__CASE_LIST_ELEMENT, newCaseListElement, newCaseListElement));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<caseListElement> getCaseListElement1()
  {
    if (caseListElement1 == null)
    {
      caseListElement1 = new EObjectContainmentEList<caseListElement>(caseListElement.class, this, PascalPackage.CASE_STATEMENT__CASE_LIST_ELEMENT1);
    }
    return caseListElement1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public statements getStatements()
  {
    return statements;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetStatements(statements newStatements, NotificationChain msgs)
  {
    statements oldStatements = statements;
    statements = newStatements;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PascalPackage.CASE_STATEMENT__STATEMENTS, oldStatements, newStatements);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setStatements(statements newStatements)
  {
    if (newStatements != statements)
    {
      NotificationChain msgs = null;
      if (statements != null)
        msgs = ((InternalEObject)statements).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PascalPackage.CASE_STATEMENT__STATEMENTS, null, msgs);
      if (newStatements != null)
        msgs = ((InternalEObject)newStatements).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PascalPackage.CASE_STATEMENT__STATEMENTS, null, msgs);
      msgs = basicSetStatements(newStatements, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PascalPackage.CASE_STATEMENT__STATEMENTS, newStatements, newStatements));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case PascalPackage.CASE_STATEMENT__EXPRESSION:
        return basicSetExpression(null, msgs);
      case PascalPackage.CASE_STATEMENT__CASE_LIST_ELEMENT:
        return basicSetCaseListElement(null, msgs);
      case PascalPackage.CASE_STATEMENT__CASE_LIST_ELEMENT1:
        return ((InternalEList<?>)getCaseListElement1()).basicRemove(otherEnd, msgs);
      case PascalPackage.CASE_STATEMENT__STATEMENTS:
        return basicSetStatements(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case PascalPackage.CASE_STATEMENT__EXPRESSION:
        return getExpression();
      case PascalPackage.CASE_STATEMENT__CASE_LIST_ELEMENT:
        return getCaseListElement();
      case PascalPackage.CASE_STATEMENT__CASE_LIST_ELEMENT1:
        return getCaseListElement1();
      case PascalPackage.CASE_STATEMENT__STATEMENTS:
        return getStatements();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case PascalPackage.CASE_STATEMENT__EXPRESSION:
        setExpression((expression)newValue);
        return;
      case PascalPackage.CASE_STATEMENT__CASE_LIST_ELEMENT:
        setCaseListElement((caseListElement)newValue);
        return;
      case PascalPackage.CASE_STATEMENT__CASE_LIST_ELEMENT1:
        getCaseListElement1().clear();
        getCaseListElement1().addAll((Collection<? extends caseListElement>)newValue);
        return;
      case PascalPackage.CASE_STATEMENT__STATEMENTS:
        setStatements((statements)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case PascalPackage.CASE_STATEMENT__EXPRESSION:
        setExpression((expression)null);
        return;
      case PascalPackage.CASE_STATEMENT__CASE_LIST_ELEMENT:
        setCaseListElement((caseListElement)null);
        return;
      case PascalPackage.CASE_STATEMENT__CASE_LIST_ELEMENT1:
        getCaseListElement1().clear();
        return;
      case PascalPackage.CASE_STATEMENT__STATEMENTS:
        setStatements((statements)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case PascalPackage.CASE_STATEMENT__EXPRESSION:
        return expression != null;
      case PascalPackage.CASE_STATEMENT__CASE_LIST_ELEMENT:
        return caseListElement != null;
      case PascalPackage.CASE_STATEMENT__CASE_LIST_ELEMENT1:
        return caseListElement1 != null && !caseListElement1.isEmpty();
      case PascalPackage.CASE_STATEMENT__STATEMENTS:
        return statements != null;
    }
    return super.eIsSet(featureID);
  }

} //caseStatementImpl
