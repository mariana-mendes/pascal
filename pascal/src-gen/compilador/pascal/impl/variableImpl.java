/**
 * generated by Xtext 2.15.0
 */
package compilador.pascal.impl;

import compilador.pascal.PascalPackage;
import compilador.pascal.expression;
import compilador.pascal.variable;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>variable</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link compilador.pascal.impl.variableImpl#getIdentifier <em>Identifier</em>}</li>
 *   <li>{@link compilador.pascal.impl.variableImpl#getExpression <em>Expression</em>}</li>
 *   <li>{@link compilador.pascal.impl.variableImpl#getExpression1 <em>Expression1</em>}</li>
 *   <li>{@link compilador.pascal.impl.variableImpl#getExpression2 <em>Expression2</em>}</li>
 *   <li>{@link compilador.pascal.impl.variableImpl#getExpression3 <em>Expression3</em>}</li>
 *   <li>{@link compilador.pascal.impl.variableImpl#getIdentifier2 <em>Identifier2</em>}</li>
 * </ul>
 *
 * @generated
 */
public class variableImpl extends MinimalEObjectImpl.Container implements variable
{
  /**
   * The default value of the '{@link #getIdentifier() <em>Identifier</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIdentifier()
   * @generated
   * @ordered
   */
  protected static final String IDENTIFIER_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getIdentifier() <em>Identifier</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIdentifier()
   * @generated
   * @ordered
   */
  protected String identifier = IDENTIFIER_EDEFAULT;

  /**
   * The cached value of the '{@link #getExpression() <em>Expression</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpression()
   * @generated
   * @ordered
   */
  protected EList<expression> expression;

  /**
   * The cached value of the '{@link #getExpression1() <em>Expression1</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpression1()
   * @generated
   * @ordered
   */
  protected EList<expression> expression1;

  /**
   * The cached value of the '{@link #getExpression2() <em>Expression2</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpression2()
   * @generated
   * @ordered
   */
  protected EList<expression> expression2;

  /**
   * The cached value of the '{@link #getExpression3() <em>Expression3</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpression3()
   * @generated
   * @ordered
   */
  protected EList<expression> expression3;

  /**
   * The cached value of the '{@link #getIdentifier2() <em>Identifier2</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIdentifier2()
   * @generated
   * @ordered
   */
  protected EList<String> identifier2;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected variableImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return PascalPackage.Literals.VARIABLE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getIdentifier()
  {
    return identifier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setIdentifier(String newIdentifier)
  {
    String oldIdentifier = identifier;
    identifier = newIdentifier;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PascalPackage.VARIABLE__IDENTIFIER, oldIdentifier, identifier));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<expression> getExpression()
  {
    if (expression == null)
    {
      expression = new EObjectContainmentEList<expression>(expression.class, this, PascalPackage.VARIABLE__EXPRESSION);
    }
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<expression> getExpression1()
  {
    if (expression1 == null)
    {
      expression1 = new EObjectContainmentEList<expression>(expression.class, this, PascalPackage.VARIABLE__EXPRESSION1);
    }
    return expression1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<expression> getExpression2()
  {
    if (expression2 == null)
    {
      expression2 = new EObjectContainmentEList<expression>(expression.class, this, PascalPackage.VARIABLE__EXPRESSION2);
    }
    return expression2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<expression> getExpression3()
  {
    if (expression3 == null)
    {
      expression3 = new EObjectContainmentEList<expression>(expression.class, this, PascalPackage.VARIABLE__EXPRESSION3);
    }
    return expression3;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<String> getIdentifier2()
  {
    if (identifier2 == null)
    {
      identifier2 = new EDataTypeEList<String>(String.class, this, PascalPackage.VARIABLE__IDENTIFIER2);
    }
    return identifier2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case PascalPackage.VARIABLE__EXPRESSION:
        return ((InternalEList<?>)getExpression()).basicRemove(otherEnd, msgs);
      case PascalPackage.VARIABLE__EXPRESSION1:
        return ((InternalEList<?>)getExpression1()).basicRemove(otherEnd, msgs);
      case PascalPackage.VARIABLE__EXPRESSION2:
        return ((InternalEList<?>)getExpression2()).basicRemove(otherEnd, msgs);
      case PascalPackage.VARIABLE__EXPRESSION3:
        return ((InternalEList<?>)getExpression3()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case PascalPackage.VARIABLE__IDENTIFIER:
        return getIdentifier();
      case PascalPackage.VARIABLE__EXPRESSION:
        return getExpression();
      case PascalPackage.VARIABLE__EXPRESSION1:
        return getExpression1();
      case PascalPackage.VARIABLE__EXPRESSION2:
        return getExpression2();
      case PascalPackage.VARIABLE__EXPRESSION3:
        return getExpression3();
      case PascalPackage.VARIABLE__IDENTIFIER2:
        return getIdentifier2();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case PascalPackage.VARIABLE__IDENTIFIER:
        setIdentifier((String)newValue);
        return;
      case PascalPackage.VARIABLE__EXPRESSION:
        getExpression().clear();
        getExpression().addAll((Collection<? extends expression>)newValue);
        return;
      case PascalPackage.VARIABLE__EXPRESSION1:
        getExpression1().clear();
        getExpression1().addAll((Collection<? extends expression>)newValue);
        return;
      case PascalPackage.VARIABLE__EXPRESSION2:
        getExpression2().clear();
        getExpression2().addAll((Collection<? extends expression>)newValue);
        return;
      case PascalPackage.VARIABLE__EXPRESSION3:
        getExpression3().clear();
        getExpression3().addAll((Collection<? extends expression>)newValue);
        return;
      case PascalPackage.VARIABLE__IDENTIFIER2:
        getIdentifier2().clear();
        getIdentifier2().addAll((Collection<? extends String>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case PascalPackage.VARIABLE__IDENTIFIER:
        setIdentifier(IDENTIFIER_EDEFAULT);
        return;
      case PascalPackage.VARIABLE__EXPRESSION:
        getExpression().clear();
        return;
      case PascalPackage.VARIABLE__EXPRESSION1:
        getExpression1().clear();
        return;
      case PascalPackage.VARIABLE__EXPRESSION2:
        getExpression2().clear();
        return;
      case PascalPackage.VARIABLE__EXPRESSION3:
        getExpression3().clear();
        return;
      case PascalPackage.VARIABLE__IDENTIFIER2:
        getIdentifier2().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case PascalPackage.VARIABLE__IDENTIFIER:
        return IDENTIFIER_EDEFAULT == null ? identifier != null : !IDENTIFIER_EDEFAULT.equals(identifier);
      case PascalPackage.VARIABLE__EXPRESSION:
        return expression != null && !expression.isEmpty();
      case PascalPackage.VARIABLE__EXPRESSION1:
        return expression1 != null && !expression1.isEmpty();
      case PascalPackage.VARIABLE__EXPRESSION2:
        return expression2 != null && !expression2.isEmpty();
      case PascalPackage.VARIABLE__EXPRESSION3:
        return expression3 != null && !expression3.isEmpty();
      case PascalPackage.VARIABLE__IDENTIFIER2:
        return identifier2 != null && !identifier2.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (identifier: ");
    result.append(identifier);
    result.append(", identifier2: ");
    result.append(identifier2);
    result.append(')');
    return result.toString();
  }

} //variableImpl
