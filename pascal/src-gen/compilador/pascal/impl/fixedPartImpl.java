/**
 * generated by Xtext 2.15.0
 */
package compilador.pascal.impl;

import compilador.pascal.PascalPackage;
import compilador.pascal.fixedPart;
import compilador.pascal.recordSection;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>fixed Part</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link compilador.pascal.impl.fixedPartImpl#getRecordSection <em>Record Section</em>}</li>
 *   <li>{@link compilador.pascal.impl.fixedPartImpl#getRecordSection1 <em>Record Section1</em>}</li>
 * </ul>
 *
 * @generated
 */
public class fixedPartImpl extends MinimalEObjectImpl.Container implements fixedPart
{
  /**
   * The cached value of the '{@link #getRecordSection() <em>Record Section</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRecordSection()
   * @generated
   * @ordered
   */
  protected recordSection recordSection;

  /**
   * The cached value of the '{@link #getRecordSection1() <em>Record Section1</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRecordSection1()
   * @generated
   * @ordered
   */
  protected EList<recordSection> recordSection1;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected fixedPartImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return PascalPackage.Literals.FIXED_PART;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public recordSection getRecordSection()
  {
    return recordSection;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRecordSection(recordSection newRecordSection, NotificationChain msgs)
  {
    recordSection oldRecordSection = recordSection;
    recordSection = newRecordSection;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PascalPackage.FIXED_PART__RECORD_SECTION, oldRecordSection, newRecordSection);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRecordSection(recordSection newRecordSection)
  {
    if (newRecordSection != recordSection)
    {
      NotificationChain msgs = null;
      if (recordSection != null)
        msgs = ((InternalEObject)recordSection).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PascalPackage.FIXED_PART__RECORD_SECTION, null, msgs);
      if (newRecordSection != null)
        msgs = ((InternalEObject)newRecordSection).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PascalPackage.FIXED_PART__RECORD_SECTION, null, msgs);
      msgs = basicSetRecordSection(newRecordSection, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PascalPackage.FIXED_PART__RECORD_SECTION, newRecordSection, newRecordSection));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<recordSection> getRecordSection1()
  {
    if (recordSection1 == null)
    {
      recordSection1 = new EObjectContainmentEList<recordSection>(recordSection.class, this, PascalPackage.FIXED_PART__RECORD_SECTION1);
    }
    return recordSection1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case PascalPackage.FIXED_PART__RECORD_SECTION:
        return basicSetRecordSection(null, msgs);
      case PascalPackage.FIXED_PART__RECORD_SECTION1:
        return ((InternalEList<?>)getRecordSection1()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case PascalPackage.FIXED_PART__RECORD_SECTION:
        return getRecordSection();
      case PascalPackage.FIXED_PART__RECORD_SECTION1:
        return getRecordSection1();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case PascalPackage.FIXED_PART__RECORD_SECTION:
        setRecordSection((recordSection)newValue);
        return;
      case PascalPackage.FIXED_PART__RECORD_SECTION1:
        getRecordSection1().clear();
        getRecordSection1().addAll((Collection<? extends recordSection>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case PascalPackage.FIXED_PART__RECORD_SECTION:
        setRecordSection((recordSection)null);
        return;
      case PascalPackage.FIXED_PART__RECORD_SECTION1:
        getRecordSection1().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case PascalPackage.FIXED_PART__RECORD_SECTION:
        return recordSection != null;
      case PascalPackage.FIXED_PART__RECORD_SECTION1:
        return recordSection1 != null && !recordSection1.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //fixedPartImpl
