/**
 * generated by Xtext 2.15.0
 */
package compilador.pascal.impl;

import compilador.pascal.PascalPackage;
import compilador.pascal.expression;
import compilador.pascal.factor;
import compilador.pascal.functionDesignator;
import compilador.pascal.unsignedConstant;
import compilador.pascal.variable;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>factor</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@link compilador.pascal.impl.factorImpl#getExpression <em>Expression</em>}</li>
 *   <li>{@link compilador.pascal.impl.factorImpl#getUnsignedConstant <em>Unsigned Constant</em>}</li>
 *   <li>{@link compilador.pascal.impl.factorImpl#getFactor <em>Factor</em>}</li>
 *   <li>{@link compilador.pascal.impl.factorImpl#getBool <em>Bool</em>}</li>
 *   <li>{@link compilador.pascal.impl.factorImpl#getFunctionDesignator <em>Function Designator</em>}</li>
 *   <li>{@link compilador.pascal.impl.factorImpl#getVariable <em>Variable</em>}</li>
 * </ul>
 * </p>
 *
 * @generated
 */
public class factorImpl extends MinimalEObjectImpl.Container implements factor
{
  /**
   * The cached value of the '{@link #getExpression() <em>Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpression()
   * @generated
   * @ordered
   */
  protected expression expression;

  /**
   * The cached value of the '{@link #getUnsignedConstant() <em>Unsigned Constant</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUnsignedConstant()
   * @generated
   * @ordered
   */
  protected unsignedConstant unsignedConstant;

  /**
   * The cached value of the '{@link #getFactor() <em>Factor</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFactor()
   * @generated
   * @ordered
   */
  protected factor factor;

  /**
   * The default value of the '{@link #getBool() <em>Bool</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBool()
   * @generated
   * @ordered
   */
  protected static final String BOOL_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getBool() <em>Bool</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBool()
   * @generated
   * @ordered
   */
  protected String bool = BOOL_EDEFAULT;

  /**
   * The cached value of the '{@link #getFunctionDesignator() <em>Function Designator</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFunctionDesignator()
   * @generated
   * @ordered
   */
  protected functionDesignator functionDesignator;

  /**
   * The cached value of the '{@link #getVariable() <em>Variable</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVariable()
   * @generated
   * @ordered
   */
  protected variable variable;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected factorImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return PascalPackage.Literals.FACTOR;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public expression getExpression()
  {
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExpression(expression newExpression, NotificationChain msgs)
  {
    expression oldExpression = expression;
    expression = newExpression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PascalPackage.FACTOR__EXPRESSION, oldExpression, newExpression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setExpression(expression newExpression)
  {
    if (newExpression != expression)
    {
      NotificationChain msgs = null;
      if (expression != null)
        msgs = ((InternalEObject)expression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PascalPackage.FACTOR__EXPRESSION, null, msgs);
      if (newExpression != null)
        msgs = ((InternalEObject)newExpression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PascalPackage.FACTOR__EXPRESSION, null, msgs);
      msgs = basicSetExpression(newExpression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PascalPackage.FACTOR__EXPRESSION, newExpression, newExpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public unsignedConstant getUnsignedConstant()
  {
    return unsignedConstant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetUnsignedConstant(unsignedConstant newUnsignedConstant, NotificationChain msgs)
  {
    unsignedConstant oldUnsignedConstant = unsignedConstant;
    unsignedConstant = newUnsignedConstant;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PascalPackage.FACTOR__UNSIGNED_CONSTANT, oldUnsignedConstant, newUnsignedConstant);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setUnsignedConstant(unsignedConstant newUnsignedConstant)
  {
    if (newUnsignedConstant != unsignedConstant)
    {
      NotificationChain msgs = null;
      if (unsignedConstant != null)
        msgs = ((InternalEObject)unsignedConstant).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PascalPackage.FACTOR__UNSIGNED_CONSTANT, null, msgs);
      if (newUnsignedConstant != null)
        msgs = ((InternalEObject)newUnsignedConstant).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PascalPackage.FACTOR__UNSIGNED_CONSTANT, null, msgs);
      msgs = basicSetUnsignedConstant(newUnsignedConstant, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PascalPackage.FACTOR__UNSIGNED_CONSTANT, newUnsignedConstant, newUnsignedConstant));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public factor getFactor()
  {
    return factor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetFactor(factor newFactor, NotificationChain msgs)
  {
    factor oldFactor = factor;
    factor = newFactor;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PascalPackage.FACTOR__FACTOR, oldFactor, newFactor);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setFactor(factor newFactor)
  {
    if (newFactor != factor)
    {
      NotificationChain msgs = null;
      if (factor != null)
        msgs = ((InternalEObject)factor).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PascalPackage.FACTOR__FACTOR, null, msgs);
      if (newFactor != null)
        msgs = ((InternalEObject)newFactor).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PascalPackage.FACTOR__FACTOR, null, msgs);
      msgs = basicSetFactor(newFactor, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PascalPackage.FACTOR__FACTOR, newFactor, newFactor));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getBool()
  {
    return bool;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setBool(String newBool)
  {
    String oldBool = bool;
    bool = newBool;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PascalPackage.FACTOR__BOOL, oldBool, bool));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public functionDesignator getFunctionDesignator()
  {
    return functionDesignator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetFunctionDesignator(functionDesignator newFunctionDesignator, NotificationChain msgs)
  {
    functionDesignator oldFunctionDesignator = functionDesignator;
    functionDesignator = newFunctionDesignator;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PascalPackage.FACTOR__FUNCTION_DESIGNATOR, oldFunctionDesignator, newFunctionDesignator);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setFunctionDesignator(functionDesignator newFunctionDesignator)
  {
    if (newFunctionDesignator != functionDesignator)
    {
      NotificationChain msgs = null;
      if (functionDesignator != null)
        msgs = ((InternalEObject)functionDesignator).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PascalPackage.FACTOR__FUNCTION_DESIGNATOR, null, msgs);
      if (newFunctionDesignator != null)
        msgs = ((InternalEObject)newFunctionDesignator).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PascalPackage.FACTOR__FUNCTION_DESIGNATOR, null, msgs);
      msgs = basicSetFunctionDesignator(newFunctionDesignator, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PascalPackage.FACTOR__FUNCTION_DESIGNATOR, newFunctionDesignator, newFunctionDesignator));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public variable getVariable()
  {
    return variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetVariable(variable newVariable, NotificationChain msgs)
  {
    variable oldVariable = variable;
    variable = newVariable;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PascalPackage.FACTOR__VARIABLE, oldVariable, newVariable);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setVariable(variable newVariable)
  {
    if (newVariable != variable)
    {
      NotificationChain msgs = null;
      if (variable != null)
        msgs = ((InternalEObject)variable).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PascalPackage.FACTOR__VARIABLE, null, msgs);
      if (newVariable != null)
        msgs = ((InternalEObject)newVariable).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PascalPackage.FACTOR__VARIABLE, null, msgs);
      msgs = basicSetVariable(newVariable, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PascalPackage.FACTOR__VARIABLE, newVariable, newVariable));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case PascalPackage.FACTOR__EXPRESSION:
        return basicSetExpression(null, msgs);
      case PascalPackage.FACTOR__UNSIGNED_CONSTANT:
        return basicSetUnsignedConstant(null, msgs);
      case PascalPackage.FACTOR__FACTOR:
        return basicSetFactor(null, msgs);
      case PascalPackage.FACTOR__FUNCTION_DESIGNATOR:
        return basicSetFunctionDesignator(null, msgs);
      case PascalPackage.FACTOR__VARIABLE:
        return basicSetVariable(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case PascalPackage.FACTOR__EXPRESSION:
        return getExpression();
      case PascalPackage.FACTOR__UNSIGNED_CONSTANT:
        return getUnsignedConstant();
      case PascalPackage.FACTOR__FACTOR:
        return getFactor();
      case PascalPackage.FACTOR__BOOL:
        return getBool();
      case PascalPackage.FACTOR__FUNCTION_DESIGNATOR:
        return getFunctionDesignator();
      case PascalPackage.FACTOR__VARIABLE:
        return getVariable();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case PascalPackage.FACTOR__EXPRESSION:
        setExpression((expression)newValue);
        return;
      case PascalPackage.FACTOR__UNSIGNED_CONSTANT:
        setUnsignedConstant((unsignedConstant)newValue);
        return;
      case PascalPackage.FACTOR__FACTOR:
        setFactor((factor)newValue);
        return;
      case PascalPackage.FACTOR__BOOL:
        setBool((String)newValue);
        return;
      case PascalPackage.FACTOR__FUNCTION_DESIGNATOR:
        setFunctionDesignator((functionDesignator)newValue);
        return;
      case PascalPackage.FACTOR__VARIABLE:
        setVariable((variable)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case PascalPackage.FACTOR__EXPRESSION:
        setExpression((expression)null);
        return;
      case PascalPackage.FACTOR__UNSIGNED_CONSTANT:
        setUnsignedConstant((unsignedConstant)null);
        return;
      case PascalPackage.FACTOR__FACTOR:
        setFactor((factor)null);
        return;
      case PascalPackage.FACTOR__BOOL:
        setBool(BOOL_EDEFAULT);
        return;
      case PascalPackage.FACTOR__FUNCTION_DESIGNATOR:
        setFunctionDesignator((functionDesignator)null);
        return;
      case PascalPackage.FACTOR__VARIABLE:
        setVariable((variable)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case PascalPackage.FACTOR__EXPRESSION:
        return expression != null;
      case PascalPackage.FACTOR__UNSIGNED_CONSTANT:
        return unsignedConstant != null;
      case PascalPackage.FACTOR__FACTOR:
        return factor != null;
      case PascalPackage.FACTOR__BOOL:
        return BOOL_EDEFAULT == null ? bool != null : !BOOL_EDEFAULT.equals(bool);
      case PascalPackage.FACTOR__FUNCTION_DESIGNATOR:
        return functionDesignator != null;
      case PascalPackage.FACTOR__VARIABLE:
        return variable != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (bool: ");
    result.append(bool);
    result.append(')');
    return result.toString();
  }

} //factorImpl
