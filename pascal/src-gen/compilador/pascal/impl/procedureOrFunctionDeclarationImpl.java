/**
 * generated by Xtext 2.15.0
 */
package compilador.pascal.impl;

import compilador.pascal.PascalPackage;
import compilador.pascal.functionDeclaration;
import compilador.pascal.procedureDeclaration;
import compilador.pascal.procedureOrFunctionDeclaration;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>procedure Or Function Declaration</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link compilador.pascal.impl.procedureOrFunctionDeclarationImpl#getProcedureDeclaration <em>Procedure Declaration</em>}</li>
 *   <li>{@link compilador.pascal.impl.procedureOrFunctionDeclarationImpl#getFunctionDeclaration <em>Function Declaration</em>}</li>
 * </ul>
 *
 * @generated
 */
public class procedureOrFunctionDeclarationImpl extends MinimalEObjectImpl.Container implements procedureOrFunctionDeclaration
{
  /**
   * The cached value of the '{@link #getProcedureDeclaration() <em>Procedure Declaration</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProcedureDeclaration()
   * @generated
   * @ordered
   */
  protected procedureDeclaration procedureDeclaration;

  /**
   * The cached value of the '{@link #getFunctionDeclaration() <em>Function Declaration</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFunctionDeclaration()
   * @generated
   * @ordered
   */
  protected functionDeclaration functionDeclaration;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected procedureOrFunctionDeclarationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return PascalPackage.Literals.PROCEDURE_OR_FUNCTION_DECLARATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public procedureDeclaration getProcedureDeclaration()
  {
    return procedureDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetProcedureDeclaration(procedureDeclaration newProcedureDeclaration, NotificationChain msgs)
  {
    procedureDeclaration oldProcedureDeclaration = procedureDeclaration;
    procedureDeclaration = newProcedureDeclaration;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PascalPackage.PROCEDURE_OR_FUNCTION_DECLARATION__PROCEDURE_DECLARATION, oldProcedureDeclaration, newProcedureDeclaration);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setProcedureDeclaration(procedureDeclaration newProcedureDeclaration)
  {
    if (newProcedureDeclaration != procedureDeclaration)
    {
      NotificationChain msgs = null;
      if (procedureDeclaration != null)
        msgs = ((InternalEObject)procedureDeclaration).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PascalPackage.PROCEDURE_OR_FUNCTION_DECLARATION__PROCEDURE_DECLARATION, null, msgs);
      if (newProcedureDeclaration != null)
        msgs = ((InternalEObject)newProcedureDeclaration).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PascalPackage.PROCEDURE_OR_FUNCTION_DECLARATION__PROCEDURE_DECLARATION, null, msgs);
      msgs = basicSetProcedureDeclaration(newProcedureDeclaration, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PascalPackage.PROCEDURE_OR_FUNCTION_DECLARATION__PROCEDURE_DECLARATION, newProcedureDeclaration, newProcedureDeclaration));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public functionDeclaration getFunctionDeclaration()
  {
    return functionDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetFunctionDeclaration(functionDeclaration newFunctionDeclaration, NotificationChain msgs)
  {
    functionDeclaration oldFunctionDeclaration = functionDeclaration;
    functionDeclaration = newFunctionDeclaration;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PascalPackage.PROCEDURE_OR_FUNCTION_DECLARATION__FUNCTION_DECLARATION, oldFunctionDeclaration, newFunctionDeclaration);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setFunctionDeclaration(functionDeclaration newFunctionDeclaration)
  {
    if (newFunctionDeclaration != functionDeclaration)
    {
      NotificationChain msgs = null;
      if (functionDeclaration != null)
        msgs = ((InternalEObject)functionDeclaration).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PascalPackage.PROCEDURE_OR_FUNCTION_DECLARATION__FUNCTION_DECLARATION, null, msgs);
      if (newFunctionDeclaration != null)
        msgs = ((InternalEObject)newFunctionDeclaration).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PascalPackage.PROCEDURE_OR_FUNCTION_DECLARATION__FUNCTION_DECLARATION, null, msgs);
      msgs = basicSetFunctionDeclaration(newFunctionDeclaration, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PascalPackage.PROCEDURE_OR_FUNCTION_DECLARATION__FUNCTION_DECLARATION, newFunctionDeclaration, newFunctionDeclaration));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case PascalPackage.PROCEDURE_OR_FUNCTION_DECLARATION__PROCEDURE_DECLARATION:
        return basicSetProcedureDeclaration(null, msgs);
      case PascalPackage.PROCEDURE_OR_FUNCTION_DECLARATION__FUNCTION_DECLARATION:
        return basicSetFunctionDeclaration(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case PascalPackage.PROCEDURE_OR_FUNCTION_DECLARATION__PROCEDURE_DECLARATION:
        return getProcedureDeclaration();
      case PascalPackage.PROCEDURE_OR_FUNCTION_DECLARATION__FUNCTION_DECLARATION:
        return getFunctionDeclaration();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case PascalPackage.PROCEDURE_OR_FUNCTION_DECLARATION__PROCEDURE_DECLARATION:
        setProcedureDeclaration((procedureDeclaration)newValue);
        return;
      case PascalPackage.PROCEDURE_OR_FUNCTION_DECLARATION__FUNCTION_DECLARATION:
        setFunctionDeclaration((functionDeclaration)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case PascalPackage.PROCEDURE_OR_FUNCTION_DECLARATION__PROCEDURE_DECLARATION:
        setProcedureDeclaration((procedureDeclaration)null);
        return;
      case PascalPackage.PROCEDURE_OR_FUNCTION_DECLARATION__FUNCTION_DECLARATION:
        setFunctionDeclaration((functionDeclaration)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case PascalPackage.PROCEDURE_OR_FUNCTION_DECLARATION__PROCEDURE_DECLARATION:
        return procedureDeclaration != null;
      case PascalPackage.PROCEDURE_OR_FUNCTION_DECLARATION__FUNCTION_DECLARATION:
        return functionDeclaration != null;
    }
    return super.eIsSet(featureID);
  }

} //procedureOrFunctionDeclarationImpl
