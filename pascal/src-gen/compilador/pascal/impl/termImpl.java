/**
 * generated by Xtext 2.15.0
 */
package compilador.pascal.impl;

import compilador.pascal.PascalPackage;
import compilador.pascal.signedFactor;
import compilador.pascal.term;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>term</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@link compilador.pascal.impl.termImpl#getSignedFactor <em>Signed Factor</em>}</li>
 *   <li>{@link compilador.pascal.impl.termImpl#getMultiplicativeoperator <em>Multiplicativeoperator</em>}</li>
 *   <li>{@link compilador.pascal.impl.termImpl#getTerm <em>Term</em>}</li>
 * </ul>
 * </p>
 *
 * @generated
 */
public class termImpl extends MinimalEObjectImpl.Container implements term
{
  /**
   * The cached value of the '{@link #getSignedFactor() <em>Signed Factor</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSignedFactor()
   * @generated
   * @ordered
   */
  protected signedFactor signedFactor;

  /**
   * The default value of the '{@link #getMultiplicativeoperator() <em>Multiplicativeoperator</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMultiplicativeoperator()
   * @generated
   * @ordered
   */
  protected static final String MULTIPLICATIVEOPERATOR_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getMultiplicativeoperator() <em>Multiplicativeoperator</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMultiplicativeoperator()
   * @generated
   * @ordered
   */
  protected String multiplicativeoperator = MULTIPLICATIVEOPERATOR_EDEFAULT;

  /**
   * The cached value of the '{@link #getTerm() <em>Term</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTerm()
   * @generated
   * @ordered
   */
  protected term term;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected termImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return PascalPackage.Literals.TERM;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public signedFactor getSignedFactor()
  {
    return signedFactor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSignedFactor(signedFactor newSignedFactor, NotificationChain msgs)
  {
    signedFactor oldSignedFactor = signedFactor;
    signedFactor = newSignedFactor;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PascalPackage.TERM__SIGNED_FACTOR, oldSignedFactor, newSignedFactor);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSignedFactor(signedFactor newSignedFactor)
  {
    if (newSignedFactor != signedFactor)
    {
      NotificationChain msgs = null;
      if (signedFactor != null)
        msgs = ((InternalEObject)signedFactor).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PascalPackage.TERM__SIGNED_FACTOR, null, msgs);
      if (newSignedFactor != null)
        msgs = ((InternalEObject)newSignedFactor).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PascalPackage.TERM__SIGNED_FACTOR, null, msgs);
      msgs = basicSetSignedFactor(newSignedFactor, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PascalPackage.TERM__SIGNED_FACTOR, newSignedFactor, newSignedFactor));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getMultiplicativeoperator()
  {
    return multiplicativeoperator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setMultiplicativeoperator(String newMultiplicativeoperator)
  {
    String oldMultiplicativeoperator = multiplicativeoperator;
    multiplicativeoperator = newMultiplicativeoperator;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PascalPackage.TERM__MULTIPLICATIVEOPERATOR, oldMultiplicativeoperator, multiplicativeoperator));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public term getTerm()
  {
    return term;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTerm(term newTerm, NotificationChain msgs)
  {
    term oldTerm = term;
    term = newTerm;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PascalPackage.TERM__TERM, oldTerm, newTerm);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTerm(term newTerm)
  {
    if (newTerm != term)
    {
      NotificationChain msgs = null;
      if (term != null)
        msgs = ((InternalEObject)term).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PascalPackage.TERM__TERM, null, msgs);
      if (newTerm != null)
        msgs = ((InternalEObject)newTerm).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PascalPackage.TERM__TERM, null, msgs);
      msgs = basicSetTerm(newTerm, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PascalPackage.TERM__TERM, newTerm, newTerm));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case PascalPackage.TERM__SIGNED_FACTOR:
        return basicSetSignedFactor(null, msgs);
      case PascalPackage.TERM__TERM:
        return basicSetTerm(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case PascalPackage.TERM__SIGNED_FACTOR:
        return getSignedFactor();
      case PascalPackage.TERM__MULTIPLICATIVEOPERATOR:
        return getMultiplicativeoperator();
      case PascalPackage.TERM__TERM:
        return getTerm();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case PascalPackage.TERM__SIGNED_FACTOR:
        setSignedFactor((signedFactor)newValue);
        return;
      case PascalPackage.TERM__MULTIPLICATIVEOPERATOR:
        setMultiplicativeoperator((String)newValue);
        return;
      case PascalPackage.TERM__TERM:
        setTerm((term)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case PascalPackage.TERM__SIGNED_FACTOR:
        setSignedFactor((signedFactor)null);
        return;
      case PascalPackage.TERM__MULTIPLICATIVEOPERATOR:
        setMultiplicativeoperator(MULTIPLICATIVEOPERATOR_EDEFAULT);
        return;
      case PascalPackage.TERM__TERM:
        setTerm((term)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case PascalPackage.TERM__SIGNED_FACTOR:
        return signedFactor != null;
      case PascalPackage.TERM__MULTIPLICATIVEOPERATOR:
        return MULTIPLICATIVEOPERATOR_EDEFAULT == null ? multiplicativeoperator != null : !MULTIPLICATIVEOPERATOR_EDEFAULT.equals(multiplicativeoperator);
      case PascalPackage.TERM__TERM:
        return term != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (multiplicativeoperator: ");
    result.append(multiplicativeoperator);
    result.append(')');
    return result.toString();
  }

} //termImpl
