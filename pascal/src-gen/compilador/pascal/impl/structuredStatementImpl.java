/**
 * generated by Xtext 2.15.0
 */
package compilador.pascal.impl;

import compilador.pascal.PascalPackage;
import compilador.pascal.compoundStatement;
import compilador.pascal.conditionalStatement;
import compilador.pascal.structuredStatement;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>structured Statement</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@link compilador.pascal.impl.structuredStatementImpl#getCompoundStatement <em>Compound Statement</em>}</li>
 *   <li>{@link compilador.pascal.impl.structuredStatementImpl#getConditionalStatement <em>Conditional Statement</em>}</li>
 * </ul>
 * </p>
 *
 * @generated
 */
public class structuredStatementImpl extends MinimalEObjectImpl.Container implements structuredStatement
{
  /**
   * The cached value of the '{@link #getCompoundStatement() <em>Compound Statement</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCompoundStatement()
   * @generated
   * @ordered
   */
  protected compoundStatement compoundStatement;

  /**
   * The cached value of the '{@link #getConditionalStatement() <em>Conditional Statement</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConditionalStatement()
   * @generated
   * @ordered
   */
  protected conditionalStatement conditionalStatement;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected structuredStatementImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return PascalPackage.Literals.STRUCTURED_STATEMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public compoundStatement getCompoundStatement()
  {
    return compoundStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCompoundStatement(compoundStatement newCompoundStatement, NotificationChain msgs)
  {
    compoundStatement oldCompoundStatement = compoundStatement;
    compoundStatement = newCompoundStatement;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PascalPackage.STRUCTURED_STATEMENT__COMPOUND_STATEMENT, oldCompoundStatement, newCompoundStatement);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCompoundStatement(compoundStatement newCompoundStatement)
  {
    if (newCompoundStatement != compoundStatement)
    {
      NotificationChain msgs = null;
      if (compoundStatement != null)
        msgs = ((InternalEObject)compoundStatement).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PascalPackage.STRUCTURED_STATEMENT__COMPOUND_STATEMENT, null, msgs);
      if (newCompoundStatement != null)
        msgs = ((InternalEObject)newCompoundStatement).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PascalPackage.STRUCTURED_STATEMENT__COMPOUND_STATEMENT, null, msgs);
      msgs = basicSetCompoundStatement(newCompoundStatement, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PascalPackage.STRUCTURED_STATEMENT__COMPOUND_STATEMENT, newCompoundStatement, newCompoundStatement));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public conditionalStatement getConditionalStatement()
  {
    return conditionalStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetConditionalStatement(conditionalStatement newConditionalStatement, NotificationChain msgs)
  {
    conditionalStatement oldConditionalStatement = conditionalStatement;
    conditionalStatement = newConditionalStatement;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PascalPackage.STRUCTURED_STATEMENT__CONDITIONAL_STATEMENT, oldConditionalStatement, newConditionalStatement);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setConditionalStatement(conditionalStatement newConditionalStatement)
  {
    if (newConditionalStatement != conditionalStatement)
    {
      NotificationChain msgs = null;
      if (conditionalStatement != null)
        msgs = ((InternalEObject)conditionalStatement).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PascalPackage.STRUCTURED_STATEMENT__CONDITIONAL_STATEMENT, null, msgs);
      if (newConditionalStatement != null)
        msgs = ((InternalEObject)newConditionalStatement).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PascalPackage.STRUCTURED_STATEMENT__CONDITIONAL_STATEMENT, null, msgs);
      msgs = basicSetConditionalStatement(newConditionalStatement, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PascalPackage.STRUCTURED_STATEMENT__CONDITIONAL_STATEMENT, newConditionalStatement, newConditionalStatement));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case PascalPackage.STRUCTURED_STATEMENT__COMPOUND_STATEMENT:
        return basicSetCompoundStatement(null, msgs);
      case PascalPackage.STRUCTURED_STATEMENT__CONDITIONAL_STATEMENT:
        return basicSetConditionalStatement(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case PascalPackage.STRUCTURED_STATEMENT__COMPOUND_STATEMENT:
        return getCompoundStatement();
      case PascalPackage.STRUCTURED_STATEMENT__CONDITIONAL_STATEMENT:
        return getConditionalStatement();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case PascalPackage.STRUCTURED_STATEMENT__COMPOUND_STATEMENT:
        setCompoundStatement((compoundStatement)newValue);
        return;
      case PascalPackage.STRUCTURED_STATEMENT__CONDITIONAL_STATEMENT:
        setConditionalStatement((conditionalStatement)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case PascalPackage.STRUCTURED_STATEMENT__COMPOUND_STATEMENT:
        setCompoundStatement((compoundStatement)null);
        return;
      case PascalPackage.STRUCTURED_STATEMENT__CONDITIONAL_STATEMENT:
        setConditionalStatement((conditionalStatement)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case PascalPackage.STRUCTURED_STATEMENT__COMPOUND_STATEMENT:
        return compoundStatement != null;
      case PascalPackage.STRUCTURED_STATEMENT__CONDITIONAL_STATEMENT:
        return conditionalStatement != null;
    }
    return super.eIsSet(featureID);
  }

} //structuredStatementImpl
