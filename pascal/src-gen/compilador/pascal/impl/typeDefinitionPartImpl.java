/**
 * generated by Xtext 2.15.0
 */
package compilador.pascal.impl;

import compilador.pascal.PascalPackage;
import compilador.pascal.typeDefinition;
import compilador.pascal.typeDefinitionPart;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>type Definition Part</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@link compilador.pascal.impl.typeDefinitionPartImpl#getTypeDefinition <em>Type Definition</em>}</li>
 *   <li>{@link compilador.pascal.impl.typeDefinitionPartImpl#getTypeDefinition1 <em>Type Definition1</em>}</li>
 * </ul>
 * </p>
 *
 * @generated
 */
public class typeDefinitionPartImpl extends MinimalEObjectImpl.Container implements typeDefinitionPart
{
  /**
   * The cached value of the '{@link #getTypeDefinition() <em>Type Definition</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTypeDefinition()
   * @generated
   * @ordered
   */
  protected typeDefinition typeDefinition;

  /**
   * The cached value of the '{@link #getTypeDefinition1() <em>Type Definition1</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTypeDefinition1()
   * @generated
   * @ordered
   */
  protected EList<typeDefinition> typeDefinition1;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected typeDefinitionPartImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return PascalPackage.Literals.TYPE_DEFINITION_PART;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public typeDefinition getTypeDefinition()
  {
    return typeDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTypeDefinition(typeDefinition newTypeDefinition, NotificationChain msgs)
  {
    typeDefinition oldTypeDefinition = typeDefinition;
    typeDefinition = newTypeDefinition;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PascalPackage.TYPE_DEFINITION_PART__TYPE_DEFINITION, oldTypeDefinition, newTypeDefinition);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTypeDefinition(typeDefinition newTypeDefinition)
  {
    if (newTypeDefinition != typeDefinition)
    {
      NotificationChain msgs = null;
      if (typeDefinition != null)
        msgs = ((InternalEObject)typeDefinition).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PascalPackage.TYPE_DEFINITION_PART__TYPE_DEFINITION, null, msgs);
      if (newTypeDefinition != null)
        msgs = ((InternalEObject)newTypeDefinition).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PascalPackage.TYPE_DEFINITION_PART__TYPE_DEFINITION, null, msgs);
      msgs = basicSetTypeDefinition(newTypeDefinition, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PascalPackage.TYPE_DEFINITION_PART__TYPE_DEFINITION, newTypeDefinition, newTypeDefinition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<typeDefinition> getTypeDefinition1()
  {
    if (typeDefinition1 == null)
    {
      typeDefinition1 = new EObjectContainmentEList<typeDefinition>(typeDefinition.class, this, PascalPackage.TYPE_DEFINITION_PART__TYPE_DEFINITION1);
    }
    return typeDefinition1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case PascalPackage.TYPE_DEFINITION_PART__TYPE_DEFINITION:
        return basicSetTypeDefinition(null, msgs);
      case PascalPackage.TYPE_DEFINITION_PART__TYPE_DEFINITION1:
        return ((InternalEList<?>)getTypeDefinition1()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case PascalPackage.TYPE_DEFINITION_PART__TYPE_DEFINITION:
        return getTypeDefinition();
      case PascalPackage.TYPE_DEFINITION_PART__TYPE_DEFINITION1:
        return getTypeDefinition1();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case PascalPackage.TYPE_DEFINITION_PART__TYPE_DEFINITION:
        setTypeDefinition((typeDefinition)newValue);
        return;
      case PascalPackage.TYPE_DEFINITION_PART__TYPE_DEFINITION1:
        getTypeDefinition1().clear();
        getTypeDefinition1().addAll((Collection<? extends typeDefinition>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case PascalPackage.TYPE_DEFINITION_PART__TYPE_DEFINITION:
        setTypeDefinition((typeDefinition)null);
        return;
      case PascalPackage.TYPE_DEFINITION_PART__TYPE_DEFINITION1:
        getTypeDefinition1().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case PascalPackage.TYPE_DEFINITION_PART__TYPE_DEFINITION:
        return typeDefinition != null;
      case PascalPackage.TYPE_DEFINITION_PART__TYPE_DEFINITION1:
        return typeDefinition1 != null && !typeDefinition1.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //typeDefinitionPartImpl
