/**
 * generated by Xtext 2.16.0
 */
package compilador.pascal.impl;

import compilador.pascal.PascalPackage;
import compilador.pascal.functionType;
import compilador.pascal.identifier;
import compilador.pascal.procedureType;
import compilador.pascal.type;
import compilador.pascal.typeDefinition;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>type Definition</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link compilador.pascal.impl.typeDefinitionImpl#getIdentifier <em>Identifier</em>}</li>
 *   <li>{@link compilador.pascal.impl.typeDefinitionImpl#getType <em>Type</em>}</li>
 *   <li>{@link compilador.pascal.impl.typeDefinitionImpl#getFunctionType <em>Function Type</em>}</li>
 *   <li>{@link compilador.pascal.impl.typeDefinitionImpl#getProcedureType <em>Procedure Type</em>}</li>
 * </ul>
 *
 * @generated
 */
public class typeDefinitionImpl extends MinimalEObjectImpl.Container implements typeDefinition
{
  /**
   * The cached value of the '{@link #getIdentifier() <em>Identifier</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIdentifier()
   * @generated
   * @ordered
   */
  protected identifier identifier;

  /**
   * The cached value of the '{@link #getType() <em>Type</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected type type;

  /**
   * The cached value of the '{@link #getFunctionType() <em>Function Type</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFunctionType()
   * @generated
   * @ordered
   */
  protected functionType functionType;

  /**
   * The cached value of the '{@link #getProcedureType() <em>Procedure Type</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProcedureType()
   * @generated
   * @ordered
   */
  protected procedureType procedureType;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected typeDefinitionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return PascalPackage.Literals.TYPE_DEFINITION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public identifier getIdentifier()
  {
    return identifier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetIdentifier(identifier newIdentifier, NotificationChain msgs)
  {
    identifier oldIdentifier = identifier;
    identifier = newIdentifier;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PascalPackage.TYPE_DEFINITION__IDENTIFIER, oldIdentifier, newIdentifier);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setIdentifier(identifier newIdentifier)
  {
    if (newIdentifier != identifier)
    {
      NotificationChain msgs = null;
      if (identifier != null)
        msgs = ((InternalEObject)identifier).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PascalPackage.TYPE_DEFINITION__IDENTIFIER, null, msgs);
      if (newIdentifier != null)
        msgs = ((InternalEObject)newIdentifier).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PascalPackage.TYPE_DEFINITION__IDENTIFIER, null, msgs);
      msgs = basicSetIdentifier(newIdentifier, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PascalPackage.TYPE_DEFINITION__IDENTIFIER, newIdentifier, newIdentifier));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public type getType()
  {
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetType(type newType, NotificationChain msgs)
  {
    type oldType = type;
    type = newType;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PascalPackage.TYPE_DEFINITION__TYPE, oldType, newType);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setType(type newType)
  {
    if (newType != type)
    {
      NotificationChain msgs = null;
      if (type != null)
        msgs = ((InternalEObject)type).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PascalPackage.TYPE_DEFINITION__TYPE, null, msgs);
      if (newType != null)
        msgs = ((InternalEObject)newType).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PascalPackage.TYPE_DEFINITION__TYPE, null, msgs);
      msgs = basicSetType(newType, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PascalPackage.TYPE_DEFINITION__TYPE, newType, newType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public functionType getFunctionType()
  {
    return functionType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetFunctionType(functionType newFunctionType, NotificationChain msgs)
  {
    functionType oldFunctionType = functionType;
    functionType = newFunctionType;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PascalPackage.TYPE_DEFINITION__FUNCTION_TYPE, oldFunctionType, newFunctionType);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setFunctionType(functionType newFunctionType)
  {
    if (newFunctionType != functionType)
    {
      NotificationChain msgs = null;
      if (functionType != null)
        msgs = ((InternalEObject)functionType).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PascalPackage.TYPE_DEFINITION__FUNCTION_TYPE, null, msgs);
      if (newFunctionType != null)
        msgs = ((InternalEObject)newFunctionType).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PascalPackage.TYPE_DEFINITION__FUNCTION_TYPE, null, msgs);
      msgs = basicSetFunctionType(newFunctionType, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PascalPackage.TYPE_DEFINITION__FUNCTION_TYPE, newFunctionType, newFunctionType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public procedureType getProcedureType()
  {
    return procedureType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetProcedureType(procedureType newProcedureType, NotificationChain msgs)
  {
    procedureType oldProcedureType = procedureType;
    procedureType = newProcedureType;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PascalPackage.TYPE_DEFINITION__PROCEDURE_TYPE, oldProcedureType, newProcedureType);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setProcedureType(procedureType newProcedureType)
  {
    if (newProcedureType != procedureType)
    {
      NotificationChain msgs = null;
      if (procedureType != null)
        msgs = ((InternalEObject)procedureType).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PascalPackage.TYPE_DEFINITION__PROCEDURE_TYPE, null, msgs);
      if (newProcedureType != null)
        msgs = ((InternalEObject)newProcedureType).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PascalPackage.TYPE_DEFINITION__PROCEDURE_TYPE, null, msgs);
      msgs = basicSetProcedureType(newProcedureType, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PascalPackage.TYPE_DEFINITION__PROCEDURE_TYPE, newProcedureType, newProcedureType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case PascalPackage.TYPE_DEFINITION__IDENTIFIER:
        return basicSetIdentifier(null, msgs);
      case PascalPackage.TYPE_DEFINITION__TYPE:
        return basicSetType(null, msgs);
      case PascalPackage.TYPE_DEFINITION__FUNCTION_TYPE:
        return basicSetFunctionType(null, msgs);
      case PascalPackage.TYPE_DEFINITION__PROCEDURE_TYPE:
        return basicSetProcedureType(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case PascalPackage.TYPE_DEFINITION__IDENTIFIER:
        return getIdentifier();
      case PascalPackage.TYPE_DEFINITION__TYPE:
        return getType();
      case PascalPackage.TYPE_DEFINITION__FUNCTION_TYPE:
        return getFunctionType();
      case PascalPackage.TYPE_DEFINITION__PROCEDURE_TYPE:
        return getProcedureType();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case PascalPackage.TYPE_DEFINITION__IDENTIFIER:
        setIdentifier((identifier)newValue);
        return;
      case PascalPackage.TYPE_DEFINITION__TYPE:
        setType((type)newValue);
        return;
      case PascalPackage.TYPE_DEFINITION__FUNCTION_TYPE:
        setFunctionType((functionType)newValue);
        return;
      case PascalPackage.TYPE_DEFINITION__PROCEDURE_TYPE:
        setProcedureType((procedureType)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case PascalPackage.TYPE_DEFINITION__IDENTIFIER:
        setIdentifier((identifier)null);
        return;
      case PascalPackage.TYPE_DEFINITION__TYPE:
        setType((type)null);
        return;
      case PascalPackage.TYPE_DEFINITION__FUNCTION_TYPE:
        setFunctionType((functionType)null);
        return;
      case PascalPackage.TYPE_DEFINITION__PROCEDURE_TYPE:
        setProcedureType((procedureType)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case PascalPackage.TYPE_DEFINITION__IDENTIFIER:
        return identifier != null;
      case PascalPackage.TYPE_DEFINITION__TYPE:
        return type != null;
      case PascalPackage.TYPE_DEFINITION__FUNCTION_TYPE:
        return functionType != null;
      case PascalPackage.TYPE_DEFINITION__PROCEDURE_TYPE:
        return procedureType != null;
    }
    return super.eIsSet(featureID);
  }

} //typeDefinitionImpl
