/*
 * generated by Xtext 2.15.0
 */
package compilador.serializer;

import com.google.inject.Inject;
import compilador.services.PascalGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class PascalSyntacticSequencer extends AbstractSyntacticSequencer {

	protected PascalGrammarAccess grammarAccess;
	protected AbstractElementAlias match_block_ImplemetationKeyword_1_6_a;
	protected AbstractElementAlias match_program_InterfaceKeyword_1_q;
	protected AbstractElementAlias match_signedFactor___HyphenMinusKeyword_0_1_or_PlusSignKeyword_0_0__q;
	protected AbstractElementAlias match_variable_CircumflexAccentKeyword_1_3_a;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (PascalGrammarAccess) access;
		match_block_ImplemetationKeyword_1_6_a = new TokenAlias(true, true, grammarAccess.getBlockAccess().getImplemetationKeyword_1_6());
		match_program_InterfaceKeyword_1_q = new TokenAlias(false, true, grammarAccess.getProgramAccess().getInterfaceKeyword_1());
		match_signedFactor___HyphenMinusKeyword_0_1_or_PlusSignKeyword_0_0__q = new AlternativeAlias(false, true, new TokenAlias(false, false, grammarAccess.getSignedFactorAccess().getHyphenMinusKeyword_0_1()), new TokenAlias(false, false, grammarAccess.getSignedFactorAccess().getPlusSignKeyword_0_0()));
		match_variable_CircumflexAccentKeyword_1_3_a = new TokenAlias(true, true, grammarAccess.getVariableAccess().getCircumflexAccentKeyword_1_3());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_block_ImplemetationKeyword_1_6_a.equals(syntax))
				emit_block_ImplemetationKeyword_1_6_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_program_InterfaceKeyword_1_q.equals(syntax))
				emit_program_InterfaceKeyword_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_signedFactor___HyphenMinusKeyword_0_1_or_PlusSignKeyword_0_0__q.equals(syntax))
				emit_signedFactor___HyphenMinusKeyword_0_1_or_PlusSignKeyword_0_0__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_variable_CircumflexAccentKeyword_1_3_a.equals(syntax))
				emit_variable_CircumflexAccentKeyword_1_3_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     'implemetation'*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) compoundStatement=compoundStatement
	 *     (rule start) (ambiguity) constantDefinitionPart+=constantDefinitionPart
	 *     (rule start) (ambiguity) label+=label_declaration_part
	 *     (rule start) (ambiguity) procedureAndFunctionDeclarationPart+=procedureAndFunctionDeclarationPart
	 *     (rule start) (ambiguity) typeDefinitionPart+=typeDefinitionPart
	 *     (rule start) (ambiguity) usesUnitsPart+=usesUnitsPart
	 *     (rule start) (ambiguity) variableDeclarationParts+=variableDeclarationPart
	 *     constantDefinitionPart+=constantDefinitionPart (ambiguity) compoundStatement=compoundStatement
	 *     constantDefinitionPart+=constantDefinitionPart (ambiguity) constantDefinitionPart+=constantDefinitionPart
	 *     constantDefinitionPart+=constantDefinitionPart (ambiguity) label+=label_declaration_part
	 *     constantDefinitionPart+=constantDefinitionPart (ambiguity) procedureAndFunctionDeclarationPart+=procedureAndFunctionDeclarationPart
	 *     constantDefinitionPart+=constantDefinitionPart (ambiguity) typeDefinitionPart+=typeDefinitionPart
	 *     constantDefinitionPart+=constantDefinitionPart (ambiguity) usesUnitsPart+=usesUnitsPart
	 *     constantDefinitionPart+=constantDefinitionPart (ambiguity) variableDeclarationParts+=variableDeclarationPart
	 *     label+=label_declaration_part (ambiguity) compoundStatement=compoundStatement
	 *     label+=label_declaration_part (ambiguity) constantDefinitionPart+=constantDefinitionPart
	 *     label+=label_declaration_part (ambiguity) label+=label_declaration_part
	 *     label+=label_declaration_part (ambiguity) procedureAndFunctionDeclarationPart+=procedureAndFunctionDeclarationPart
	 *     label+=label_declaration_part (ambiguity) typeDefinitionPart+=typeDefinitionPart
	 *     label+=label_declaration_part (ambiguity) usesUnitsPart+=usesUnitsPart
	 *     label+=label_declaration_part (ambiguity) variableDeclarationParts+=variableDeclarationPart
	 *     procedureAndFunctionDeclarationPart+=procedureAndFunctionDeclarationPart (ambiguity) compoundStatement=compoundStatement
	 *     procedureAndFunctionDeclarationPart+=procedureAndFunctionDeclarationPart (ambiguity) constantDefinitionPart+=constantDefinitionPart
	 *     procedureAndFunctionDeclarationPart+=procedureAndFunctionDeclarationPart (ambiguity) label+=label_declaration_part
	 *     procedureAndFunctionDeclarationPart+=procedureAndFunctionDeclarationPart (ambiguity) procedureAndFunctionDeclarationPart+=procedureAndFunctionDeclarationPart
	 *     procedureAndFunctionDeclarationPart+=procedureAndFunctionDeclarationPart (ambiguity) typeDefinitionPart+=typeDefinitionPart
	 *     procedureAndFunctionDeclarationPart+=procedureAndFunctionDeclarationPart (ambiguity) usesUnitsPart+=usesUnitsPart
	 *     procedureAndFunctionDeclarationPart+=procedureAndFunctionDeclarationPart (ambiguity) variableDeclarationParts+=variableDeclarationPart
	 *     typeDefinitionPart+=typeDefinitionPart (ambiguity) compoundStatement=compoundStatement
	 *     typeDefinitionPart+=typeDefinitionPart (ambiguity) constantDefinitionPart+=constantDefinitionPart
	 *     typeDefinitionPart+=typeDefinitionPart (ambiguity) label+=label_declaration_part
	 *     typeDefinitionPart+=typeDefinitionPart (ambiguity) procedureAndFunctionDeclarationPart+=procedureAndFunctionDeclarationPart
	 *     typeDefinitionPart+=typeDefinitionPart (ambiguity) typeDefinitionPart+=typeDefinitionPart
	 *     typeDefinitionPart+=typeDefinitionPart (ambiguity) usesUnitsPart+=usesUnitsPart
	 *     typeDefinitionPart+=typeDefinitionPart (ambiguity) variableDeclarationParts+=variableDeclarationPart
	 *     usesUnitsPart+=usesUnitsPart (ambiguity) compoundStatement=compoundStatement
	 *     usesUnitsPart+=usesUnitsPart (ambiguity) constantDefinitionPart+=constantDefinitionPart
	 *     usesUnitsPart+=usesUnitsPart (ambiguity) label+=label_declaration_part
	 *     usesUnitsPart+=usesUnitsPart (ambiguity) procedureAndFunctionDeclarationPart+=procedureAndFunctionDeclarationPart
	 *     usesUnitsPart+=usesUnitsPart (ambiguity) typeDefinitionPart+=typeDefinitionPart
	 *     usesUnitsPart+=usesUnitsPart (ambiguity) usesUnitsPart+=usesUnitsPart
	 *     usesUnitsPart+=usesUnitsPart (ambiguity) variableDeclarationParts+=variableDeclarationPart
	 *     variableDeclarationParts+=variableDeclarationPart (ambiguity) compoundStatement=compoundStatement
	 *     variableDeclarationParts+=variableDeclarationPart (ambiguity) constantDefinitionPart+=constantDefinitionPart
	 *     variableDeclarationParts+=variableDeclarationPart (ambiguity) label+=label_declaration_part
	 *     variableDeclarationParts+=variableDeclarationPart (ambiguity) procedureAndFunctionDeclarationPart+=procedureAndFunctionDeclarationPart
	 *     variableDeclarationParts+=variableDeclarationPart (ambiguity) typeDefinitionPart+=typeDefinitionPart
	 *     variableDeclarationParts+=variableDeclarationPart (ambiguity) usesUnitsPart+=usesUnitsPart
	 *     variableDeclarationParts+=variableDeclarationPart (ambiguity) variableDeclarationParts+=variableDeclarationPart
	 */
	protected void emit_block_ImplemetationKeyword_1_6_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'interface'?
	 *
	 * This ambiguous syntax occurs at:
	 *     head=programHeading (ambiguity) block=block
	 */
	protected void emit_program_InterfaceKeyword_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('+' | '-')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) factor=factor
	 */
	protected void emit_signedFactor___HyphenMinusKeyword_0_1_or_PlusSignKeyword_0_0__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '^'*
	 *
	 * This ambiguous syntax occurs at:
	 *     expression+=expression ']' (ambiguity) '(.' expression2+=expression
	 *     expression+=expression ']' (ambiguity) '.' identifier2+=identifier
	 *     expression+=expression ']' (ambiguity) '[' expression+=expression
	 *     expression+=expression ']' (ambiguity) (rule end)
	 *     expression1+=expression ']' (ambiguity) '(.' expression2+=expression
	 *     expression1+=expression ']' (ambiguity) '.' identifier2+=identifier
	 *     expression1+=expression ']' (ambiguity) '[' expression+=expression
	 *     expression1+=expression ']' (ambiguity) (rule end)
	 *     expression2+=expression '.)' (ambiguity) '(.' expression2+=expression
	 *     expression2+=expression '.)' (ambiguity) '.' identifier2+=identifier
	 *     expression2+=expression '.)' (ambiguity) '[' expression+=expression
	 *     expression2+=expression '.)' (ambiguity) (rule end)
	 *     expression3+=expression '.)' (ambiguity) '(.' expression2+=expression
	 *     expression3+=expression '.)' (ambiguity) '.' identifier2+=identifier
	 *     expression3+=expression '.)' (ambiguity) '[' expression+=expression
	 *     expression3+=expression '.)' (ambiguity) (rule end)
	 *     identifier2+=identifier (ambiguity) '(.' expression2+=expression
	 *     identifier2+=identifier (ambiguity) '.' identifier2+=identifier
	 *     identifier2+=identifier (ambiguity) '[' expression+=expression
	 *     identifier2+=identifier (ambiguity) (rule end)
	 *     identifier=identifier (ambiguity) '(.' expression2+=expression
	 *     identifier=identifier (ambiguity) '.' identifier2+=identifier
	 *     identifier=identifier (ambiguity) '[' expression+=expression
	 *     identifier=identifier (ambiguity) (rule end)
	 */
	protected void emit_variable_CircumflexAccentKeyword_1_3_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
