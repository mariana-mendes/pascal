/*
 * generated by Xtext 2.15.0
 */
package compilador.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class PascalGrammarAccess extends AbstractGrammarElementFinder {
	
	public class PascalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "compilador.Pascal.pascal");
		private final Assignment cProgramAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cProgramProgramParserRuleCall_0 = (RuleCall)cProgramAssignment.eContents().get(0);
		
		//pascal:
		//	program+=program;
		@Override public ParserRule getRule() { return rule; }
		
		//program+=program
		public Assignment getProgramAssignment() { return cProgramAssignment; }
		
		//program
		public RuleCall getProgramProgramParserRuleCall_0() { return cProgramProgramParserRuleCall_0; }
	}
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "compilador.Pascal.program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cHeadAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cHeadProgramHeadingParserRuleCall_0_0 = (RuleCall)cHeadAssignment_0.eContents().get(0);
		private final Keyword cInterfaceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBlockAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBlockBlockParserRuleCall_2_0 = (RuleCall)cBlockAssignment_2.eContents().get(0);
		private final Keyword cFullStopKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//program:
		//	head=programHeading "interface"? block=block ".";
		@Override public ParserRule getRule() { return rule; }
		
		//head=programHeading "interface"? block=block "."
		public Group getGroup() { return cGroup; }
		
		//head=programHeading
		public Assignment getHeadAssignment_0() { return cHeadAssignment_0; }
		
		//programHeading
		public RuleCall getHeadProgramHeadingParserRuleCall_0_0() { return cHeadProgramHeadingParserRuleCall_0_0; }
		
		//"interface"?
		public Keyword getInterfaceKeyword_1() { return cInterfaceKeyword_1; }
		
		//block=block
		public Assignment getBlockAssignment_2() { return cBlockAssignment_2; }
		
		//block
		public RuleCall getBlockBlockParserRuleCall_2_0() { return cBlockBlockParserRuleCall_2_0; }
		
		//"."
		public Keyword getFullStopKeyword_3() { return cFullStopKeyword_3; }
	}
	public class ProgramHeadingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "compilador.Pascal.programHeading");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProgramKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdentiferAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdentiferIdentifierParserRuleCall_1_0 = (RuleCall)cIdentiferAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cIdentifierListAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cIdentifierListIdentifierListParserRuleCall_2_1_0 = (RuleCall)cIdentifierListAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//programHeading:
		//	"program" identifer=identifier ("(" identifierList=identifierList ")")? ";";
		@Override public ParserRule getRule() { return rule; }
		
		//"program" identifer=identifier ("(" identifierList=identifierList ")")? ";"
		public Group getGroup() { return cGroup; }
		
		//"program"
		public Keyword getProgramKeyword_0() { return cProgramKeyword_0; }
		
		//identifer=identifier
		public Assignment getIdentiferAssignment_1() { return cIdentiferAssignment_1; }
		
		//identifier
		public RuleCall getIdentiferIdentifierParserRuleCall_1_0() { return cIdentiferIdentifierParserRuleCall_1_0; }
		
		//("(" identifierList=identifierList ")")?
		public Group getGroup_2() { return cGroup_2; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//identifierList=identifierList
		public Assignment getIdentifierListAssignment_2_1() { return cIdentifierListAssignment_2_1; }
		
		//identifierList
		public RuleCall getIdentifierListIdentifierListParserRuleCall_2_1_0() { return cIdentifierListIdentifierListParserRuleCall_2_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
		
		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class IdentifierListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "compilador.Pascal.identifierList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIdentifierListAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cIdentifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdentifierIdentifierParserRuleCall_1_0 = (RuleCall)cIdentifierAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cIdentifierList1Assignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cIdentifierList1IdentifierParserRuleCall_2_1_0 = (RuleCall)cIdentifierList1Assignment_2_1.eContents().get(0);
		
		//identifierList:
		//	{identifierList} identifier=identifier ("," identifierList1+=identifier)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{identifierList} identifier=identifier ("," identifierList1+=identifier)*
		public Group getGroup() { return cGroup; }
		
		//{identifierList}
		public Action getIdentifierListAction_0() { return cIdentifierListAction_0; }
		
		//identifier=identifier
		public Assignment getIdentifierAssignment_1() { return cIdentifierAssignment_1; }
		
		//identifier
		public RuleCall getIdentifierIdentifierParserRuleCall_1_0() { return cIdentifierIdentifierParserRuleCall_1_0; }
		
		//("," identifierList1+=identifier)*
		public Group getGroup_2() { return cGroup_2; }
		
		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//identifierList1+=identifier
		public Assignment getIdentifierList1Assignment_2_1() { return cIdentifierList1Assignment_2_1; }
		
		//identifier
		public RuleCall getIdentifierList1IdentifierParserRuleCall_2_1_0() { return cIdentifierList1IdentifierParserRuleCall_2_1_0; }
	}
	public class IdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "compilador.Pascal.identifier");
		private final Assignment cIdentifierAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIdentifierIDENTTerminalRuleCall_0 = (RuleCall)cIdentifierAssignment.eContents().get(0);
		
		//identifier:
		//	identifier=IDENT;
		@Override public ParserRule getRule() { return rule; }
		
		//identifier=IDENT
		public Assignment getIdentifierAssignment() { return cIdentifierAssignment; }
		
		//IDENT
		public RuleCall getIdentifierIDENTTerminalRuleCall_0() { return cIdentifierIDENTTerminalRuleCall_0; }
	}
	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "compilador.Pascal.block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cLabelAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cLabelLabel_declaration_partParserRuleCall_1_0_0 = (RuleCall)cLabelAssignment_1_0.eContents().get(0);
		private final Assignment cConstantDefinitionPartAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cConstantDefinitionPartConstantDefinitionPartParserRuleCall_1_1_0 = (RuleCall)cConstantDefinitionPartAssignment_1_1.eContents().get(0);
		private final Assignment cTypeDefinitionPartAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cTypeDefinitionPartTypeDefinitionPartParserRuleCall_1_2_0 = (RuleCall)cTypeDefinitionPartAssignment_1_2.eContents().get(0);
		private final Assignment cVariableDeclarationPartAssignment_1_3 = (Assignment)cAlternatives_1.eContents().get(3);
		private final RuleCall cVariableDeclarationPartVariableDeclarationPartParserRuleCall_1_3_0 = (RuleCall)cVariableDeclarationPartAssignment_1_3.eContents().get(0);
		private final Assignment cProcedureAndFunctionDeclarationPartAssignment_1_4 = (Assignment)cAlternatives_1.eContents().get(4);
		private final RuleCall cProcedureAndFunctionDeclarationPartProcedureAndFunctionDeclarationPartParserRuleCall_1_4_0 = (RuleCall)cProcedureAndFunctionDeclarationPartAssignment_1_4.eContents().get(0);
		private final Assignment cUsesUnitsPartAssignment_1_5 = (Assignment)cAlternatives_1.eContents().get(5);
		private final RuleCall cUsesUnitsPartUsesUnitsPartParserRuleCall_1_5_0 = (RuleCall)cUsesUnitsPartAssignment_1_5.eContents().get(0);
		private final Keyword cImplemetationKeyword_1_6 = (Keyword)cAlternatives_1.eContents().get(6);
		private final Assignment cCompoundStatementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCompoundStatementCompoundStatementParserRuleCall_2_0 = (RuleCall)cCompoundStatementAssignment_2.eContents().get(0);
		
		////
		//// )*	compoundStatement;
		//block:
		//	{block} (label+=label_declaration_part | constantDefinitionPart+=constantDefinitionPart |
		//	typeDefinitionPart+=typeDefinitionPart | variableDeclarationPart+=variableDeclarationPart |
		//	procedureAndFunctionDeclarationPart+=procedureAndFunctionDeclarationPart | usesUnitsPart+=usesUnitsPart |
		//	"implemetation")* compoundStatement=compoundStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//{block} (label+=label_declaration_part | constantDefinitionPart+=constantDefinitionPart |
		//typeDefinitionPart+=typeDefinitionPart | variableDeclarationPart+=variableDeclarationPart |
		//procedureAndFunctionDeclarationPart+=procedureAndFunctionDeclarationPart | usesUnitsPart+=usesUnitsPart |
		//"implemetation")* compoundStatement=compoundStatement
		public Group getGroup() { return cGroup; }
		
		//{block}
		public Action getBlockAction_0() { return cBlockAction_0; }
		
		//(label+=label_declaration_part | constantDefinitionPart+=constantDefinitionPart | typeDefinitionPart+=typeDefinitionPart
		//| variableDeclarationPart+=variableDeclarationPart |
		//procedureAndFunctionDeclarationPart+=procedureAndFunctionDeclarationPart | usesUnitsPart+=usesUnitsPart |
		//"implemetation")*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//label+=label_declaration_part
		public Assignment getLabelAssignment_1_0() { return cLabelAssignment_1_0; }
		
		//label_declaration_part
		public RuleCall getLabelLabel_declaration_partParserRuleCall_1_0_0() { return cLabelLabel_declaration_partParserRuleCall_1_0_0; }
		
		//constantDefinitionPart+=constantDefinitionPart
		public Assignment getConstantDefinitionPartAssignment_1_1() { return cConstantDefinitionPartAssignment_1_1; }
		
		//constantDefinitionPart
		public RuleCall getConstantDefinitionPartConstantDefinitionPartParserRuleCall_1_1_0() { return cConstantDefinitionPartConstantDefinitionPartParserRuleCall_1_1_0; }
		
		//typeDefinitionPart+=typeDefinitionPart
		public Assignment getTypeDefinitionPartAssignment_1_2() { return cTypeDefinitionPartAssignment_1_2; }
		
		//typeDefinitionPart
		public RuleCall getTypeDefinitionPartTypeDefinitionPartParserRuleCall_1_2_0() { return cTypeDefinitionPartTypeDefinitionPartParserRuleCall_1_2_0; }
		
		//variableDeclarationPart+=variableDeclarationPart
		public Assignment getVariableDeclarationPartAssignment_1_3() { return cVariableDeclarationPartAssignment_1_3; }
		
		//variableDeclarationPart
		public RuleCall getVariableDeclarationPartVariableDeclarationPartParserRuleCall_1_3_0() { return cVariableDeclarationPartVariableDeclarationPartParserRuleCall_1_3_0; }
		
		//procedureAndFunctionDeclarationPart+=procedureAndFunctionDeclarationPart
		public Assignment getProcedureAndFunctionDeclarationPartAssignment_1_4() { return cProcedureAndFunctionDeclarationPartAssignment_1_4; }
		
		//procedureAndFunctionDeclarationPart
		public RuleCall getProcedureAndFunctionDeclarationPartProcedureAndFunctionDeclarationPartParserRuleCall_1_4_0() { return cProcedureAndFunctionDeclarationPartProcedureAndFunctionDeclarationPartParserRuleCall_1_4_0; }
		
		//usesUnitsPart+=usesUnitsPart
		public Assignment getUsesUnitsPartAssignment_1_5() { return cUsesUnitsPartAssignment_1_5; }
		
		//usesUnitsPart
		public RuleCall getUsesUnitsPartUsesUnitsPartParserRuleCall_1_5_0() { return cUsesUnitsPartUsesUnitsPartParserRuleCall_1_5_0; }
		
		//"implemetation"
		public Keyword getImplemetationKeyword_1_6() { return cImplemetationKeyword_1_6; }
		
		//compoundStatement=compoundStatement
		public Assignment getCompoundStatementAssignment_2() { return cCompoundStatementAssignment_2; }
		
		//compoundStatement
		public RuleCall getCompoundStatementCompoundStatementParserRuleCall_2_0() { return cCompoundStatementCompoundStatementParserRuleCall_2_0; }
	}
	public class Label_declaration_partElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "compilador.Pascal.label_declaration_part");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLabelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLabelParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cLabelAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cLabelLabelParserRuleCall_2_1_0 = (RuleCall)cLabelAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//label_declaration_part:
		//	"label" label ("," label+=label)* ";";
		@Override public ParserRule getRule() { return rule; }
		
		//"label" label ("," label+=label)* ";"
		public Group getGroup() { return cGroup; }
		
		//"label"
		public Keyword getLabelKeyword_0() { return cLabelKeyword_0; }
		
		//label
		public RuleCall getLabelParserRuleCall_1() { return cLabelParserRuleCall_1; }
		
		//("," label+=label)*
		public Group getGroup_2() { return cGroup_2; }
		
		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//label+=label
		public Assignment getLabelAssignment_2_1() { return cLabelAssignment_2_1; }
		
		//label
		public RuleCall getLabelLabelParserRuleCall_2_1_0() { return cLabelLabelParserRuleCall_2_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class LabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "compilador.Pascal.label");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cUnsignedIntegerAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cUnsignedIntegerUnsignedIntegerParserRuleCall_0_0 = (RuleCall)cUnsignedIntegerAssignment_0.eContents().get(0);
		private final Assignment cIdentifierAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cIdentifierIdentifierParserRuleCall_1_0 = (RuleCall)cIdentifierAssignment_1.eContents().get(0);
		
		//label:
		//	unsignedInteger=unsignedInteger | identifier=identifier;
		@Override public ParserRule getRule() { return rule; }
		
		//unsignedInteger=unsignedInteger | identifier=identifier
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//unsignedInteger=unsignedInteger
		public Assignment getUnsignedIntegerAssignment_0() { return cUnsignedIntegerAssignment_0; }
		
		//unsignedInteger
		public RuleCall getUnsignedIntegerUnsignedIntegerParserRuleCall_0_0() { return cUnsignedIntegerUnsignedIntegerParserRuleCall_0_0; }
		
		//identifier=identifier
		public Assignment getIdentifierAssignment_1() { return cIdentifierAssignment_1; }
		
		//identifier
		public RuleCall getIdentifierIdentifierParserRuleCall_1_0() { return cIdentifierIdentifierParserRuleCall_1_0; }
	}
	public class UnsignedIntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "compilador.Pascal.unsignedInteger");
		private final Assignment cNumberAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNumberNUMTerminalRuleCall_0 = (RuleCall)cNumberAssignment.eContents().get(0);
		
		//unsignedInteger:
		//	number=NUM;
		@Override public ParserRule getRule() { return rule; }
		
		//number=NUM
		public Assignment getNumberAssignment() { return cNumberAssignment; }
		
		//NUM
		public RuleCall getNumberNUMTerminalRuleCall_0() { return cNumberNUMTerminalRuleCall_0; }
	}
	public class ConstantDefinitionPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "compilador.Pascal.constantDefinitionPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cConstantDefinitionAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cConstantDefinitionConstantDefinitionParserRuleCall_1_0_0 = (RuleCall)cConstantDefinitionAssignment_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//constantDefinitionPart:
		//	"const" (constantDefinition+=constantDefinition ";")+;
		@Override public ParserRule getRule() { return rule; }
		
		//"const" (constantDefinition+=constantDefinition ";")+
		public Group getGroup() { return cGroup; }
		
		//"const"
		public Keyword getConstKeyword_0() { return cConstKeyword_0; }
		
		//(constantDefinition+=constantDefinition ";")+
		public Group getGroup_1() { return cGroup_1; }
		
		//constantDefinition+=constantDefinition
		public Assignment getConstantDefinitionAssignment_1_0() { return cConstantDefinitionAssignment_1_0; }
		
		//constantDefinition
		public RuleCall getConstantDefinitionConstantDefinitionParserRuleCall_1_0_0() { return cConstantDefinitionConstantDefinitionParserRuleCall_1_0_0; }
		
		//";"
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
	}
	public class ConstantDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "compilador.Pascal.constantDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentifierIdentifierParserRuleCall_0_0 = (RuleCall)cIdentifierAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConstantAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConstantConstantParserRuleCall_2_0 = (RuleCall)cConstantAssignment_2.eContents().get(0);
		
		////
		//constantDefinition:
		//	identifier=identifier "=" constant=constant;
		@Override public ParserRule getRule() { return rule; }
		
		//identifier=identifier "=" constant=constant
		public Group getGroup() { return cGroup; }
		
		//identifier=identifier
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }
		
		//identifier
		public RuleCall getIdentifierIdentifierParserRuleCall_0_0() { return cIdentifierIdentifierParserRuleCall_0_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//constant=constant
		public Assignment getConstantAssignment_2() { return cConstantAssignment_2; }
		
		//constant
		public RuleCall getConstantConstantParserRuleCall_2_0() { return cConstantConstantParserRuleCall_2_0; }
	}
	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "compilador.Pascal.constant");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNumberAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNumberUnsignedNumberParserRuleCall_0_0 = (RuleCall)cNumberAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cSignAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cSignSignParserRuleCall_1_0_0 = (RuleCall)cSignAssignment_1_0.eContents().get(0);
		private final Assignment cNumber1Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNumber1UnsignedNumberParserRuleCall_1_1_0 = (RuleCall)cNumber1Assignment_1_1.eContents().get(0);
		private final Assignment cIdentifierAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cIdentifierIdentifierParserRuleCall_2_0 = (RuleCall)cIdentifierAssignment_2.eContents().get(0);
		private final Assignment cSTRING_LITERALAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cSTRING_LITERALSTRING_LITERALTerminalRuleCall_3_0 = (RuleCall)cSTRING_LITERALAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cSign2Assignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cSign2SignParserRuleCall_4_0_0 = (RuleCall)cSign2Assignment_4_0.eContents().get(0);
		private final Assignment cIdentifier1Assignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cIdentifier1IdentifierParserRuleCall_4_1_0 = (RuleCall)cIdentifier1Assignment_4_1.eContents().get(0);
		private final Assignment cConstantChrAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cConstantChrConstantChrParserRuleCall_5_0 = (RuleCall)cConstantChrAssignment_5.eContents().get(0);
		
		////
		//////STRING_LITERAL
		//constant:
		//	number=unsignedNumber | sign=sign number1=unsignedNumber | identifier=identifier | STRING_LITERAL=STRING_LITERAL |
		//	sign2+=sign identifier1+=identifier | constantChr=constantChr;
		@Override public ParserRule getRule() { return rule; }
		
		//number=unsignedNumber | sign=sign number1=unsignedNumber | identifier=identifier | STRING_LITERAL=STRING_LITERAL |
		//sign2+=sign identifier1+=identifier | constantChr=constantChr
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//number=unsignedNumber
		public Assignment getNumberAssignment_0() { return cNumberAssignment_0; }
		
		//unsignedNumber
		public RuleCall getNumberUnsignedNumberParserRuleCall_0_0() { return cNumberUnsignedNumberParserRuleCall_0_0; }
		
		//sign=sign number1=unsignedNumber
		public Group getGroup_1() { return cGroup_1; }
		
		//sign=sign
		public Assignment getSignAssignment_1_0() { return cSignAssignment_1_0; }
		
		//sign
		public RuleCall getSignSignParserRuleCall_1_0_0() { return cSignSignParserRuleCall_1_0_0; }
		
		//number1=unsignedNumber
		public Assignment getNumber1Assignment_1_1() { return cNumber1Assignment_1_1; }
		
		//unsignedNumber
		public RuleCall getNumber1UnsignedNumberParserRuleCall_1_1_0() { return cNumber1UnsignedNumberParserRuleCall_1_1_0; }
		
		//identifier=identifier
		public Assignment getIdentifierAssignment_2() { return cIdentifierAssignment_2; }
		
		//identifier
		public RuleCall getIdentifierIdentifierParserRuleCall_2_0() { return cIdentifierIdentifierParserRuleCall_2_0; }
		
		//STRING_LITERAL=STRING_LITERAL
		public Assignment getSTRING_LITERALAssignment_3() { return cSTRING_LITERALAssignment_3; }
		
		//STRING_LITERAL
		public RuleCall getSTRING_LITERALSTRING_LITERALTerminalRuleCall_3_0() { return cSTRING_LITERALSTRING_LITERALTerminalRuleCall_3_0; }
		
		//sign2+=sign identifier1+=identifier
		public Group getGroup_4() { return cGroup_4; }
		
		//sign2+=sign
		public Assignment getSign2Assignment_4_0() { return cSign2Assignment_4_0; }
		
		//sign
		public RuleCall getSign2SignParserRuleCall_4_0_0() { return cSign2SignParserRuleCall_4_0_0; }
		
		//identifier1+=identifier
		public Assignment getIdentifier1Assignment_4_1() { return cIdentifier1Assignment_4_1; }
		
		//identifier
		public RuleCall getIdentifier1IdentifierParserRuleCall_4_1_0() { return cIdentifier1IdentifierParserRuleCall_4_1_0; }
		
		//constantChr=constantChr
		public Assignment getConstantChrAssignment_5() { return cConstantChrAssignment_5; }
		
		//constantChr
		public RuleCall getConstantChrConstantChrParserRuleCall_5_0() { return cConstantChrConstantChrParserRuleCall_5_0; }
	}
	public class ConstantChrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "compilador.Pascal.constantChr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cChrKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cUnsignedIntegerAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUnsignedIntegerUnsignedIntegerParserRuleCall_2_0 = (RuleCall)cUnsignedIntegerAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//constantChr:
		//	"chr" "(" unsignedInteger=unsignedInteger ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"chr" "(" unsignedInteger=unsignedInteger ")"
		public Group getGroup() { return cGroup; }
		
		//"chr"
		public Keyword getChrKeyword_0() { return cChrKeyword_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//unsignedInteger=unsignedInteger
		public Assignment getUnsignedIntegerAssignment_2() { return cUnsignedIntegerAssignment_2; }
		
		//unsignedInteger
		public RuleCall getUnsignedIntegerUnsignedIntegerParserRuleCall_2_0() { return cUnsignedIntegerUnsignedIntegerParserRuleCall_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class UnsignedNumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "compilador.Pascal.unsignedNumber");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cUnsignedIntegerAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cUnsignedIntegerUnsignedIntegerParserRuleCall_0_0 = (RuleCall)cUnsignedIntegerAssignment_0.eContents().get(0);
		private final Assignment cUnsignedRealAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cUnsignedRealUnsignedRealParserRuleCall_1_0 = (RuleCall)cUnsignedRealAssignment_1.eContents().get(0);
		
		//unsignedNumber:
		//	unsignedInteger=unsignedInteger | unsignedReal=unsignedReal;
		@Override public ParserRule getRule() { return rule; }
		
		//unsignedInteger=unsignedInteger | unsignedReal=unsignedReal
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//unsignedInteger=unsignedInteger
		public Assignment getUnsignedIntegerAssignment_0() { return cUnsignedIntegerAssignment_0; }
		
		//unsignedInteger
		public RuleCall getUnsignedIntegerUnsignedIntegerParserRuleCall_0_0() { return cUnsignedIntegerUnsignedIntegerParserRuleCall_0_0; }
		
		//unsignedReal=unsignedReal
		public Assignment getUnsignedRealAssignment_1() { return cUnsignedRealAssignment_1; }
		
		//unsignedReal
		public RuleCall getUnsignedRealUnsignedRealParserRuleCall_1_0() { return cUnsignedRealUnsignedRealParserRuleCall_1_0; }
	}
	public class UnsignedRealElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "compilador.Pascal.unsignedReal");
		private final RuleCall cNUM_REALTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//unsignedReal:
		//	NUM_REAL;
		@Override public ParserRule getRule() { return rule; }
		
		//NUM_REAL
		public RuleCall getNUM_REALTerminalRuleCall() { return cNUM_REALTerminalRuleCall; }
	}
	public class SignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "compilador.Pascal.sign");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//sign:
		//	"+" | "-";
		@Override public ParserRule getRule() { return rule; }
		
		//"+" | "-"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"+"
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }
		
		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
	}
	public class UsesUnitsPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "compilador.Pascal.usesUnitsPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUsesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdentifierListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdentifierListIdentifierListParserRuleCall_1_0 = (RuleCall)cIdentifierListAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//usesUnitsPart:
		//	"uses" identifierList=identifierList ";";
		@Override public ParserRule getRule() { return rule; }
		
		//"uses" identifierList=identifierList ";"
		public Group getGroup() { return cGroup; }
		
		//"uses"
		public Keyword getUsesKeyword_0() { return cUsesKeyword_0; }
		
		//identifierList=identifierList
		public Assignment getIdentifierListAssignment_1() { return cIdentifierListAssignment_1; }
		
		//identifierList
		public RuleCall getIdentifierListIdentifierListParserRuleCall_1_0() { return cIdentifierListIdentifierListParserRuleCall_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class TypeDefinitionPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "compilador.Pascal.typeDefinitionPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeDefinitionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeDefinitionTypeDefinitionParserRuleCall_1_0 = (RuleCall)cTypeDefinitionAssignment_1.eContents().get(0);
		private final Assignment cTypeDefinition1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeDefinition1TypeDefinitionParserRuleCall_2_0 = (RuleCall)cTypeDefinition1Assignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//typeDefinitionPart:
		//	"type" typeDefinition=typeDefinition typeDefinition1+=typeDefinition* ";";
		@Override public ParserRule getRule() { return rule; }
		
		//"type" typeDefinition=typeDefinition typeDefinition1+=typeDefinition* ";"
		public Group getGroup() { return cGroup; }
		
		//"type"
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }
		
		//typeDefinition=typeDefinition
		public Assignment getTypeDefinitionAssignment_1() { return cTypeDefinitionAssignment_1; }
		
		//typeDefinition
		public RuleCall getTypeDefinitionTypeDefinitionParserRuleCall_1_0() { return cTypeDefinitionTypeDefinitionParserRuleCall_1_0; }
		
		//typeDefinition1+=typeDefinition*
		public Assignment getTypeDefinition1Assignment_2() { return cTypeDefinition1Assignment_2; }
		
		//typeDefinition
		public RuleCall getTypeDefinition1TypeDefinitionParserRuleCall_2_0() { return cTypeDefinition1TypeDefinitionParserRuleCall_2_0; }
		
		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class TypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "compilador.Pascal.typeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIndentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIndentifierIdentifierParserRuleCall_0_0 = (RuleCall)cIndentifierAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_2_0_0 = (RuleCall)cTypeAssignment_2_0.eContents().get(0);
		private final Assignment cFunctionTypeAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cFunctionTypeFunctionTypeParserRuleCall_2_1_0 = (RuleCall)cFunctionTypeAssignment_2_1.eContents().get(0);
		private final Assignment cProcedureTypeAssignment_2_2 = (Assignment)cAlternatives_2.eContents().get(2);
		private final RuleCall cProcedureTypeProcedureTypeParserRuleCall_2_2_0 = (RuleCall)cProcedureTypeAssignment_2_2.eContents().get(0);
		
		//typeDefinition:
		//	indentifier+=identifier "=" (type=type | functionType=functionType | procedureType=procedureType);
		@Override public ParserRule getRule() { return rule; }
		
		//indentifier+=identifier "=" (type=type | functionType=functionType | procedureType=procedureType)
		public Group getGroup() { return cGroup; }
		
		//indentifier+=identifier
		public Assignment getIndentifierAssignment_0() { return cIndentifierAssignment_0; }
		
		//identifier
		public RuleCall getIndentifierIdentifierParserRuleCall_0_0() { return cIndentifierIdentifierParserRuleCall_0_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//type=type | functionType=functionType | procedureType=procedureType
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//type=type
		public Assignment getTypeAssignment_2_0() { return cTypeAssignment_2_0; }
		
		//type
		public RuleCall getTypeTypeParserRuleCall_2_0_0() { return cTypeTypeParserRuleCall_2_0_0; }
		
		//functionType=functionType
		public Assignment getFunctionTypeAssignment_2_1() { return cFunctionTypeAssignment_2_1; }
		
		//functionType
		public RuleCall getFunctionTypeFunctionTypeParserRuleCall_2_1_0() { return cFunctionTypeFunctionTypeParserRuleCall_2_1_0; }
		
		//procedureType=procedureType
		public Assignment getProcedureTypeAssignment_2_2() { return cProcedureTypeAssignment_2_2; }
		
		//procedureType
		public RuleCall getProcedureTypeProcedureTypeParserRuleCall_2_2_0() { return cProcedureTypeProcedureTypeParserRuleCall_2_2_0; }
	}
	public class FunctionTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "compilador.Pascal.functionType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFormalParameterListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFormalParameterListFormalParameterListParserRuleCall_1_0 = (RuleCall)cFormalParameterListAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cResultTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cResultTypeResultTypeParserRuleCall_3_0 = (RuleCall)cResultTypeAssignment_3.eContents().get(0);
		
		//functionType:
		//	"function" formalParameterList=formalParameterList? ":" resultType=resultType;
		@Override public ParserRule getRule() { return rule; }
		
		//"function" formalParameterList=formalParameterList? ":" resultType=resultType
		public Group getGroup() { return cGroup; }
		
		//"function"
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }
		
		//formalParameterList=formalParameterList?
		public Assignment getFormalParameterListAssignment_1() { return cFormalParameterListAssignment_1; }
		
		//formalParameterList
		public RuleCall getFormalParameterListFormalParameterListParserRuleCall_1_0() { return cFormalParameterListFormalParameterListParserRuleCall_1_0; }
		
		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//resultType=resultType
		public Assignment getResultTypeAssignment_3() { return cResultTypeAssignment_3; }
		
		//resultType
		public RuleCall getResultTypeResultTypeParserRuleCall_3_0() { return cResultTypeResultTypeParserRuleCall_3_0; }
	}
	public class ResultTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "compilador.Pascal.resultType");
		private final RuleCall cTypeIdentifierParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//resultType:
		//	typeIdentifier;
		@Override public ParserRule getRule() { return rule; }
		
		//typeIdentifier
		public RuleCall getTypeIdentifierParserRuleCall() { return cTypeIdentifierParserRuleCall; }
	}
	public class FormalParameterListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "compilador.Pascal.formalParameterList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFormalParameterSectionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFormalParameterSectionFormalParameterSectionParserRuleCall_1_0 = (RuleCall)cFormalParameterSectionAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cFormalParameterSection2Assignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cFormalParameterSection2FormalParameterSectionParserRuleCall_2_1_0 = (RuleCall)cFormalParameterSection2Assignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//formalParameterList:
		//	"(" formalParameterSection=formalParameterSection (";" formalParameterSection2+=formalParameterSection)* ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"(" formalParameterSection=formalParameterSection (";" formalParameterSection2+=formalParameterSection)* ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//formalParameterSection=formalParameterSection
		public Assignment getFormalParameterSectionAssignment_1() { return cFormalParameterSectionAssignment_1; }
		
		//formalParameterSection
		public RuleCall getFormalParameterSectionFormalParameterSectionParserRuleCall_1_0() { return cFormalParameterSectionFormalParameterSectionParserRuleCall_1_0; }
		
		//(";" formalParameterSection2+=formalParameterSection)*
		public Group getGroup_2() { return cGroup_2; }
		
		//";"
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//formalParameterSection2+=formalParameterSection
		public Assignment getFormalParameterSection2Assignment_2_1() { return cFormalParameterSection2Assignment_2_1; }
		
		//formalParameterSection
		public RuleCall getFormalParameterSection2FormalParameterSectionParserRuleCall_2_1_0() { return cFormalParameterSection2FormalParameterSectionParserRuleCall_2_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class FormalParameterSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "compilador.Pascal.formalParameterSection");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cParameterGroupAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cParameterGroupParameterGroupParserRuleCall_0_0 = (RuleCall)cParameterGroupAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cVarKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParameterGroup2Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParameterGroup2ParameterGroupParserRuleCall_1_1_0 = (RuleCall)cParameterGroup2Assignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cFunctionKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParameterGroup3Assignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParameterGroup3ParameterGroupParserRuleCall_2_1_0 = (RuleCall)cParameterGroup3Assignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cProcedureKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cParameterGroup4Assignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cParameterGroup4ParameterGroupParserRuleCall_3_1_0 = (RuleCall)cParameterGroup4Assignment_3_1.eContents().get(0);
		
		//formalParameterSection:
		//	parameterGroup=parameterGroup | "var" parameterGroup2+=parameterGroup | "function" parameterGroup3+=parameterGroup
		//	| "procedure" parameterGroup4+=parameterGroup;
		@Override public ParserRule getRule() { return rule; }
		
		//parameterGroup=parameterGroup | "var" parameterGroup2+=parameterGroup | "function" parameterGroup3+=parameterGroup |
		//"procedure" parameterGroup4+=parameterGroup
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//parameterGroup=parameterGroup
		public Assignment getParameterGroupAssignment_0() { return cParameterGroupAssignment_0; }
		
		//parameterGroup
		public RuleCall getParameterGroupParameterGroupParserRuleCall_0_0() { return cParameterGroupParameterGroupParserRuleCall_0_0; }
		
		//"var" parameterGroup2+=parameterGroup
		public Group getGroup_1() { return cGroup_1; }
		
		//"var"
		public Keyword getVarKeyword_1_0() { return cVarKeyword_1_0; }
		
		//parameterGroup2+=parameterGroup
		public Assignment getParameterGroup2Assignment_1_1() { return cParameterGroup2Assignment_1_1; }
		
		//parameterGroup
		public RuleCall getParameterGroup2ParameterGroupParserRuleCall_1_1_0() { return cParameterGroup2ParameterGroupParserRuleCall_1_1_0; }
		
		//"function" parameterGroup3+=parameterGroup
		public Group getGroup_2() { return cGroup_2; }
		
		//"function"
		public Keyword getFunctionKeyword_2_0() { return cFunctionKeyword_2_0; }
		
		//parameterGroup3+=parameterGroup
		public Assignment getParameterGroup3Assignment_2_1() { return cParameterGroup3Assignment_2_1; }
		
		//parameterGroup
		public RuleCall getParameterGroup3ParameterGroupParserRuleCall_2_1_0() { return cParameterGroup3ParameterGroupParserRuleCall_2_1_0; }
		
		//"procedure" parameterGroup4+=parameterGroup
		public Group getGroup_3() { return cGroup_3; }
		
		//"procedure"
		public Keyword getProcedureKeyword_3_0() { return cProcedureKeyword_3_0; }
		
		//parameterGroup4+=parameterGroup
		public Assignment getParameterGroup4Assignment_3_1() { return cParameterGroup4Assignment_3_1; }
		
		//parameterGroup
		public RuleCall getParameterGroup4ParameterGroupParserRuleCall_3_1_0() { return cParameterGroup4ParameterGroupParserRuleCall_3_1_0; }
	}
	public class ParameterGroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "compilador.Pascal.parameterGroup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentifierListIdentifierListParserRuleCall_0_0 = (RuleCall)cIdentifierListAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeIdentifierAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeIdentifierTypeIdentifierParserRuleCall_2_0 = (RuleCall)cTypeIdentifierAssignment_2.eContents().get(0);
		
		//parameterGroup:
		//	identifierList=identifierList ":" typeIdentifier=typeIdentifier;
		@Override public ParserRule getRule() { return rule; }
		
		//identifierList=identifierList ":" typeIdentifier=typeIdentifier
		public Group getGroup() { return cGroup; }
		
		//identifierList=identifierList
		public Assignment getIdentifierListAssignment_0() { return cIdentifierListAssignment_0; }
		
		//identifierList
		public RuleCall getIdentifierListIdentifierListParserRuleCall_0_0() { return cIdentifierListIdentifierListParserRuleCall_0_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//typeIdentifier=typeIdentifier
		public Assignment getTypeIdentifierAssignment_2() { return cTypeIdentifierAssignment_2; }
		
		//typeIdentifier
		public RuleCall getTypeIdentifierTypeIdentifierParserRuleCall_2_0() { return cTypeIdentifierTypeIdentifierParserRuleCall_2_0; }
	}
	public class TypeIdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "compilador.Pascal.typeIdentifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cIdentifierIdentifierParserRuleCall_0_0 = (RuleCall)cIdentifierAssignment_0.eContents().get(0);
		private final Assignment cCharAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cCharCharKeyword_1_0 = (Keyword)cCharAssignment_1.eContents().get(0);
		private final Assignment cBooleanAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cBooleanBooleanKeyword_2_0 = (Keyword)cBooleanAssignment_2.eContents().get(0);
		private final Assignment cIntegerAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cIntegerIntegerKeyword_3_0 = (Keyword)cIntegerAssignment_3.eContents().get(0);
		private final Assignment cRealAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final Keyword cRealRealKeyword_4_0 = (Keyword)cRealAssignment_4.eContents().get(0);
		private final Assignment cStringAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final Keyword cStringStringKeyword_5_0 = (Keyword)cStringAssignment_5.eContents().get(0);
		
		//typeIdentifier:
		//	identifier=identifier | char="char" | boolean="boolean" | integer="integer" | real="real" | string="string";
		@Override public ParserRule getRule() { return rule; }
		
		//identifier=identifier | char="char" | boolean="boolean" | integer="integer" | real="real" | string="string"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//identifier=identifier
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }
		
		//identifier
		public RuleCall getIdentifierIdentifierParserRuleCall_0_0() { return cIdentifierIdentifierParserRuleCall_0_0; }
		
		//char="char"
		public Assignment getCharAssignment_1() { return cCharAssignment_1; }
		
		//"char"
		public Keyword getCharCharKeyword_1_0() { return cCharCharKeyword_1_0; }
		
		//boolean="boolean"
		public Assignment getBooleanAssignment_2() { return cBooleanAssignment_2; }
		
		//"boolean"
		public Keyword getBooleanBooleanKeyword_2_0() { return cBooleanBooleanKeyword_2_0; }
		
		//integer="integer"
		public Assignment getIntegerAssignment_3() { return cIntegerAssignment_3; }
		
		//"integer"
		public Keyword getIntegerIntegerKeyword_3_0() { return cIntegerIntegerKeyword_3_0; }
		
		//real="real"
		public Assignment getRealAssignment_4() { return cRealAssignment_4; }
		
		//"real"
		public Keyword getRealRealKeyword_4_0() { return cRealRealKeyword_4_0; }
		
		//string="string"
		public Assignment getStringAssignment_5() { return cStringAssignment_5; }
		
		//"string"
		public Keyword getStringStringKeyword_5_0() { return cStringStringKeyword_5_0; }
	}
	public class ProcedureTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "compilador.Pascal.procedureType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProcedureTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cProcedureKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFormalParameterListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFormalParameterListFormalParameterListParserRuleCall_2_0 = (RuleCall)cFormalParameterListAssignment_2.eContents().get(0);
		
		//procedureType:
		//	{procedureType} "procedure" formalParameterList=formalParameterList?;
		@Override public ParserRule getRule() { return rule; }
		
		//{procedureType} "procedure" formalParameterList=formalParameterList?
		public Group getGroup() { return cGroup; }
		
		//{procedureType}
		public Action getProcedureTypeAction_0() { return cProcedureTypeAction_0; }
		
		//"procedure"
		public Keyword getProcedureKeyword_1() { return cProcedureKeyword_1; }
		
		//formalParameterList=formalParameterList?
		public Assignment getFormalParameterListAssignment_2() { return cFormalParameterListAssignment_2; }
		
		//formalParameterList
		public RuleCall getFormalParameterListFormalParameterListParserRuleCall_2_0() { return cFormalParameterListFormalParameterListParserRuleCall_2_0; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "compilador.Pascal.type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cSimpleTypeAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cSimpleTypeSimpleTypeParserRuleCall_0_0 = (RuleCall)cSimpleTypeAssignment_0.eContents().get(0);
		private final Assignment cStructuredTypeAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cStructuredTypeStructuredTypeParserRuleCall_1_0 = (RuleCall)cStructuredTypeAssignment_1.eContents().get(0);
		private final Assignment cPointerTypeAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cPointerTypePointerTypeParserRuleCall_2_0 = (RuleCall)cPointerTypeAssignment_2.eContents().get(0);
		
		//type:
		//	simpleType=simpleType | structuredType=structuredType | pointerType=pointerType;
		@Override public ParserRule getRule() { return rule; }
		
		//simpleType=simpleType | structuredType=structuredType | pointerType=pointerType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//simpleType=simpleType
		public Assignment getSimpleTypeAssignment_0() { return cSimpleTypeAssignment_0; }
		
		//simpleType
		public RuleCall getSimpleTypeSimpleTypeParserRuleCall_0_0() { return cSimpleTypeSimpleTypeParserRuleCall_0_0; }
		
		//structuredType=structuredType
		public Assignment getStructuredTypeAssignment_1() { return cStructuredTypeAssignment_1; }
		
		//structuredType
		public RuleCall getStructuredTypeStructuredTypeParserRuleCall_1_0() { return cStructuredTypeStructuredTypeParserRuleCall_1_0; }
		
		//pointerType=pointerType
		public Assignment getPointerTypeAssignment_2() { return cPointerTypeAssignment_2; }
		
		//pointerType
		public RuleCall getPointerTypePointerTypeParserRuleCall_2_0() { return cPointerTypePointerTypeParserRuleCall_2_0; }
	}
	public class PointerTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "compilador.Pascal.pointerType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCircumflexAccentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeIdentifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeIdentifierTypeIdentifierParserRuleCall_1_0 = (RuleCall)cTypeIdentifierAssignment_1.eContents().get(0);
		
		//pointerType:
		//	"^" typeIdentifier=typeIdentifier;
		@Override public ParserRule getRule() { return rule; }
		
		//"^" typeIdentifier=typeIdentifier
		public Group getGroup() { return cGroup; }
		
		//"^"
		public Keyword getCircumflexAccentKeyword_0() { return cCircumflexAccentKeyword_0; }
		
		//typeIdentifier=typeIdentifier
		public Assignment getTypeIdentifierAssignment_1() { return cTypeIdentifierAssignment_1; }
		
		//typeIdentifier
		public RuleCall getTypeIdentifierTypeIdentifierParserRuleCall_1_0() { return cTypeIdentifierTypeIdentifierParserRuleCall_1_0; }
	}
	public class SimpleTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "compilador.Pascal.simpleType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cScalarTypeAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cScalarTypeScalarTypeParserRuleCall_0_0 = (RuleCall)cScalarTypeAssignment_0.eContents().get(0);
		private final Assignment cSubrangeTypeAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cSubrangeTypeSubrangeTypeParserRuleCall_1_0 = (RuleCall)cSubrangeTypeAssignment_1.eContents().get(0);
		private final Assignment cTypeIdentifierAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cTypeIdentifierTypeIdentifierParserRuleCall_2_0 = (RuleCall)cTypeIdentifierAssignment_2.eContents().get(0);
		private final Assignment cStringtypeAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cStringtypeStringtypeParserRuleCall_3_0 = (RuleCall)cStringtypeAssignment_3.eContents().get(0);
		
		//simpleType:
		//	scalarType=scalarType | subrangeType=subrangeType | typeIdentifier=typeIdentifier | stringtype=stringtype;
		@Override public ParserRule getRule() { return rule; }
		
		//scalarType=scalarType | subrangeType=subrangeType | typeIdentifier=typeIdentifier | stringtype=stringtype
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//scalarType=scalarType
		public Assignment getScalarTypeAssignment_0() { return cScalarTypeAssignment_0; }
		
		//scalarType
		public RuleCall getScalarTypeScalarTypeParserRuleCall_0_0() { return cScalarTypeScalarTypeParserRuleCall_0_0; }
		
		//subrangeType=subrangeType
		public Assignment getSubrangeTypeAssignment_1() { return cSubrangeTypeAssignment_1; }
		
		//subrangeType
		public RuleCall getSubrangeTypeSubrangeTypeParserRuleCall_1_0() { return cSubrangeTypeSubrangeTypeParserRuleCall_1_0; }
		
		//typeIdentifier=typeIdentifier
		public Assignment getTypeIdentifierAssignment_2() { return cTypeIdentifierAssignment_2; }
		
		//typeIdentifier
		public RuleCall getTypeIdentifierTypeIdentifierParserRuleCall_2_0() { return cTypeIdentifierTypeIdentifierParserRuleCall_2_0; }
		
		//stringtype=stringtype
		public Assignment getStringtypeAssignment_3() { return cStringtypeAssignment_3; }
		
		//stringtype
		public RuleCall getStringtypeStringtypeParserRuleCall_3_0() { return cStringtypeStringtypeParserRuleCall_3_0; }
	}
	public class ScalarTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "compilador.Pascal.scalarType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdentifierListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdentifierListIdentifierListParserRuleCall_1_0 = (RuleCall)cIdentifierListAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//scalarType:
		//	"(" identifierList=identifierList ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"(" identifierList=identifierList ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//identifierList=identifierList
		public Assignment getIdentifierListAssignment_1() { return cIdentifierListAssignment_1; }
		
		//identifierList
		public RuleCall getIdentifierListIdentifierListParserRuleCall_1_0() { return cIdentifierListIdentifierListParserRuleCall_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class SubrangeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "compilador.Pascal.subrangeType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConstantAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConstantConstantParserRuleCall_0_0 = (RuleCall)cConstantAssignment_0.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConstant2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConstant2ConstantParserRuleCall_2_0 = (RuleCall)cConstant2Assignment_2.eContents().get(0);
		
		//subrangeType:
		//	constant=constant ".." constant2=constant;
		@Override public ParserRule getRule() { return rule; }
		
		//constant=constant ".." constant2=constant
		public Group getGroup() { return cGroup; }
		
		//constant=constant
		public Assignment getConstantAssignment_0() { return cConstantAssignment_0; }
		
		//constant
		public RuleCall getConstantConstantParserRuleCall_0_0() { return cConstantConstantParserRuleCall_0_0; }
		
		//".."
		public Keyword getFullStopFullStopKeyword_1() { return cFullStopFullStopKeyword_1; }
		
		//constant2=constant
		public Assignment getConstant2Assignment_2() { return cConstant2Assignment_2; }
		
		//constant
		public RuleCall getConstant2ConstantParserRuleCall_2_0() { return cConstant2ConstantParserRuleCall_2_0; }
	}
	public class StructuredTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "compilador.Pascal.structuredType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cPackedKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cUnpackedStructuredTypeAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cUnpackedStructuredTypeUnpackedStructuredTypeParserRuleCall_0_1_0 = (RuleCall)cUnpackedStructuredTypeAssignment_0_1.eContents().get(0);
		private final Assignment cUnpackedStructuredType1Assignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cUnpackedStructuredType1UnpackedStructuredTypeParserRuleCall_1_0 = (RuleCall)cUnpackedStructuredType1Assignment_1.eContents().get(0);
		
		//structuredType:
		//	"packed" unpackedStructuredType=unpackedStructuredType
		//	| unpackedStructuredType1+=unpackedStructuredType;
		@Override public ParserRule getRule() { return rule; }
		
		//"packed" unpackedStructuredType=unpackedStructuredType | unpackedStructuredType1+=unpackedStructuredType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"packed" unpackedStructuredType=unpackedStructuredType
		public Group getGroup_0() { return cGroup_0; }
		
		//"packed"
		public Keyword getPackedKeyword_0_0() { return cPackedKeyword_0_0; }
		
		//unpackedStructuredType=unpackedStructuredType
		public Assignment getUnpackedStructuredTypeAssignment_0_1() { return cUnpackedStructuredTypeAssignment_0_1; }
		
		//unpackedStructuredType
		public RuleCall getUnpackedStructuredTypeUnpackedStructuredTypeParserRuleCall_0_1_0() { return cUnpackedStructuredTypeUnpackedStructuredTypeParserRuleCall_0_1_0; }
		
		//unpackedStructuredType1+=unpackedStructuredType
		public Assignment getUnpackedStructuredType1Assignment_1() { return cUnpackedStructuredType1Assignment_1; }
		
		//unpackedStructuredType
		public RuleCall getUnpackedStructuredType1UnpackedStructuredTypeParserRuleCall_1_0() { return cUnpackedStructuredType1UnpackedStructuredTypeParserRuleCall_1_0; }
	}
	public class UnpackedStructuredTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "compilador.Pascal.unpackedStructuredType");
		private final Assignment cRecordTypeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cRecordTypeRecordTypeParserRuleCall_0 = (RuleCall)cRecordTypeAssignment.eContents().get(0);
		
		//unpackedStructuredType:
		//	recordType=recordType;
		@Override public ParserRule getRule() { return rule; }
		
		//recordType=recordType
		public Assignment getRecordTypeAssignment() { return cRecordTypeAssignment; }
		
		//recordType
		public RuleCall getRecordTypeRecordTypeParserRuleCall_0() { return cRecordTypeRecordTypeParserRuleCall_0; }
	}
	public class StringtypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "compilador.Pascal.stringtype");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStringKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cIdentifierAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cIdentifierIdentifierParserRuleCall_2_0_0 = (RuleCall)cIdentifierAssignment_2_0.eContents().get(0);
		private final Assignment cUnsignedNumberAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cUnsignedNumberUnsignedNumberParserRuleCall_2_1_0 = (RuleCall)cUnsignedNumberAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//stringtype:
		//	"string" "[" (identifier=identifier | unsignedNumber=unsignedNumber) "]";
		@Override public ParserRule getRule() { return rule; }
		
		//"string" "[" (identifier=identifier | unsignedNumber=unsignedNumber) "]"
		public Group getGroup() { return cGroup; }
		
		//"string"
		public Keyword getStringKeyword_0() { return cStringKeyword_0; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//identifier=identifier | unsignedNumber=unsignedNumber
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//identifier=identifier
		public Assignment getIdentifierAssignment_2_0() { return cIdentifierAssignment_2_0; }
		
		//identifier
		public RuleCall getIdentifierIdentifierParserRuleCall_2_0_0() { return cIdentifierIdentifierParserRuleCall_2_0_0; }
		
		//unsignedNumber=unsignedNumber
		public Assignment getUnsignedNumberAssignment_2_1() { return cUnsignedNumberAssignment_2_1; }
		
		//unsignedNumber
		public RuleCall getUnsignedNumberUnsignedNumberParserRuleCall_2_1_0() { return cUnsignedNumberUnsignedNumberParserRuleCall_2_1_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class RecordTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "compilador.Pascal.recordType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRecordTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRecordKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFieldListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFieldListFieldListParserRuleCall_2_0 = (RuleCall)cFieldListAssignment_2.eContents().get(0);
		private final Keyword cEndKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//recordType:
		//	{recordType} "record" fieldList=fieldList? "end";
		@Override public ParserRule getRule() { return rule; }
		
		//{recordType} "record" fieldList=fieldList? "end"
		public Group getGroup() { return cGroup; }
		
		//{recordType}
		public Action getRecordTypeAction_0() { return cRecordTypeAction_0; }
		
		//"record"
		public Keyword getRecordKeyword_1() { return cRecordKeyword_1; }
		
		//fieldList=fieldList?
		public Assignment getFieldListAssignment_2() { return cFieldListAssignment_2; }
		
		//fieldList
		public RuleCall getFieldListFieldListParserRuleCall_2_0() { return cFieldListFieldListParserRuleCall_2_0; }
		
		//"end"
		public Keyword getEndKeyword_3() { return cEndKeyword_3; }
	}
	public class FieldListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "compilador.Pascal.fieldList");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cFixedPartAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cFixedPartFixedPartParserRuleCall_0_0_0 = (RuleCall)cFixedPartAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cVariantPartAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cVariantPartVariantPartParserRuleCall_0_1_1_0 = (RuleCall)cVariantPartAssignment_0_1_1.eContents().get(0);
		private final Assignment cVariantPart1Assignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cVariantPart1VariantPartParserRuleCall_1_0 = (RuleCall)cVariantPart1Assignment_1.eContents().get(0);
		
		//fieldList:
		//	fixedPart=fixedPart (";" variantPart=variantPart)?
		//	| variantPart1+=variantPart;
		@Override public ParserRule getRule() { return rule; }
		
		//fixedPart=fixedPart (";" variantPart=variantPart)? | variantPart1+=variantPart
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//fixedPart=fixedPart (";" variantPart=variantPart)?
		public Group getGroup_0() { return cGroup_0; }
		
		//fixedPart=fixedPart
		public Assignment getFixedPartAssignment_0_0() { return cFixedPartAssignment_0_0; }
		
		//fixedPart
		public RuleCall getFixedPartFixedPartParserRuleCall_0_0_0() { return cFixedPartFixedPartParserRuleCall_0_0_0; }
		
		//(";" variantPart=variantPart)?
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//";"
		public Keyword getSemicolonKeyword_0_1_0() { return cSemicolonKeyword_0_1_0; }
		
		//variantPart=variantPart
		public Assignment getVariantPartAssignment_0_1_1() { return cVariantPartAssignment_0_1_1; }
		
		//variantPart
		public RuleCall getVariantPartVariantPartParserRuleCall_0_1_1_0() { return cVariantPartVariantPartParserRuleCall_0_1_1_0; }
		
		//variantPart1+=variantPart
		public Assignment getVariantPart1Assignment_1() { return cVariantPart1Assignment_1; }
		
		//variantPart
		public RuleCall getVariantPart1VariantPartParserRuleCall_1_0() { return cVariantPart1VariantPartParserRuleCall_1_0; }
	}
	public class FixedPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "compilador.Pascal.fixedPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRecordSectionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRecordSectionRecordSectionParserRuleCall_0_0 = (RuleCall)cRecordSectionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRecordSection1Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRecordSection1RecordSectionParserRuleCall_1_1_0 = (RuleCall)cRecordSection1Assignment_1_1.eContents().get(0);
		
		//fixedPart:
		//	recordSection=recordSection (";" recordSection1+=recordSection)*;
		@Override public ParserRule getRule() { return rule; }
		
		//recordSection=recordSection (";" recordSection1+=recordSection)*
		public Group getGroup() { return cGroup; }
		
		//recordSection=recordSection
		public Assignment getRecordSectionAssignment_0() { return cRecordSectionAssignment_0; }
		
		//recordSection
		public RuleCall getRecordSectionRecordSectionParserRuleCall_0_0() { return cRecordSectionRecordSectionParserRuleCall_0_0; }
		
		//(";" recordSection1+=recordSection)*
		public Group getGroup_1() { return cGroup_1; }
		
		//";"
		public Keyword getSemicolonKeyword_1_0() { return cSemicolonKeyword_1_0; }
		
		//recordSection1+=recordSection
		public Assignment getRecordSection1Assignment_1_1() { return cRecordSection1Assignment_1_1; }
		
		//recordSection
		public RuleCall getRecordSection1RecordSectionParserRuleCall_1_1_0() { return cRecordSection1RecordSectionParserRuleCall_1_1_0; }
	}
	public class RecordSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "compilador.Pascal.recordSection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentifierListIdentifierListParserRuleCall_0_0 = (RuleCall)cIdentifierListAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//recordSection:
		//	identifierList=identifierList ":" type=type;
		@Override public ParserRule getRule() { return rule; }
		
		//identifierList=identifierList ":" type=type
		public Group getGroup() { return cGroup; }
		
		//identifierList=identifierList
		public Assignment getIdentifierListAssignment_0() { return cIdentifierListAssignment_0; }
		
		//identifierList
		public RuleCall getIdentifierListIdentifierListParserRuleCall_0_0() { return cIdentifierListIdentifierListParserRuleCall_0_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }
	}
	public class VariantPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "compilador.Pascal.variantPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTagAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTagTagParserRuleCall_1_0 = (RuleCall)cTagAssignment_1.eContents().get(0);
		private final Keyword cOfKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVariantAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVariantVariantParserRuleCall_3_0 = (RuleCall)cVariantAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cSemicolonKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cVariant1Assignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cVariant1VariantParserRuleCall_4_1_0 = (RuleCall)cVariant1Assignment_4_1.eContents().get(0);
		
		//variantPart:
		//	"case" tag=tag "of" variant=variant (";" variant1+=variant)*;
		@Override public ParserRule getRule() { return rule; }
		
		//"case" tag=tag "of" variant=variant (";" variant1+=variant)*
		public Group getGroup() { return cGroup; }
		
		//"case"
		public Keyword getCaseKeyword_0() { return cCaseKeyword_0; }
		
		//tag=tag
		public Assignment getTagAssignment_1() { return cTagAssignment_1; }
		
		//tag
		public RuleCall getTagTagParserRuleCall_1_0() { return cTagTagParserRuleCall_1_0; }
		
		//"of"
		public Keyword getOfKeyword_2() { return cOfKeyword_2; }
		
		//variant=variant
		public Assignment getVariantAssignment_3() { return cVariantAssignment_3; }
		
		//variant
		public RuleCall getVariantVariantParserRuleCall_3_0() { return cVariantVariantParserRuleCall_3_0; }
		
		//(";" variant1+=variant)*
		public Group getGroup_4() { return cGroup_4; }
		
		//";"
		public Keyword getSemicolonKeyword_4_0() { return cSemicolonKeyword_4_0; }
		
		//variant1+=variant
		public Assignment getVariant1Assignment_4_1() { return cVariant1Assignment_4_1; }
		
		//variant
		public RuleCall getVariant1VariantParserRuleCall_4_1_0() { return cVariant1VariantParserRuleCall_4_1_0; }
	}
	public class TagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "compilador.Pascal.tag");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cIdentifierAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cIdentifierIdentifierParserRuleCall_0_0_0 = (RuleCall)cIdentifierAssignment_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cTypeIdentifierAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cTypeIdentifierTypeIdentifierParserRuleCall_0_2_0 = (RuleCall)cTypeIdentifierAssignment_0_2.eContents().get(0);
		private final Assignment cTypeIdentifier1Assignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cTypeIdentifier1TypeIdentifierParserRuleCall_1_0 = (RuleCall)cTypeIdentifier1Assignment_1.eContents().get(0);
		
		//tag:
		//	identifier=identifier ":" typeIdentifier=typeIdentifier
		//	| typeIdentifier1+=typeIdentifier;
		@Override public ParserRule getRule() { return rule; }
		
		//identifier=identifier ":" typeIdentifier=typeIdentifier | typeIdentifier1+=typeIdentifier
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//identifier=identifier ":" typeIdentifier=typeIdentifier
		public Group getGroup_0() { return cGroup_0; }
		
		//identifier=identifier
		public Assignment getIdentifierAssignment_0_0() { return cIdentifierAssignment_0_0; }
		
		//identifier
		public RuleCall getIdentifierIdentifierParserRuleCall_0_0_0() { return cIdentifierIdentifierParserRuleCall_0_0_0; }
		
		//":"
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }
		
		//typeIdentifier=typeIdentifier
		public Assignment getTypeIdentifierAssignment_0_2() { return cTypeIdentifierAssignment_0_2; }
		
		//typeIdentifier
		public RuleCall getTypeIdentifierTypeIdentifierParserRuleCall_0_2_0() { return cTypeIdentifierTypeIdentifierParserRuleCall_0_2_0; }
		
		//typeIdentifier1+=typeIdentifier
		public Assignment getTypeIdentifier1Assignment_1() { return cTypeIdentifier1Assignment_1; }
		
		//typeIdentifier
		public RuleCall getTypeIdentifier1TypeIdentifierParserRuleCall_1_0() { return cTypeIdentifier1TypeIdentifierParserRuleCall_1_0; }
	}
	public class VariantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "compilador.Pascal.variant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cConstantParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cConstantAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cConstantConstantParserRuleCall_1_1_0 = (RuleCall)cConstantAssignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFieldListAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFieldListFieldListParserRuleCall_4_0 = (RuleCall)cFieldListAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//variant:
		//	constant (":" constant+=constant)* ":" "(" fieldList=fieldList ")";
		@Override public ParserRule getRule() { return rule; }
		
		//constant (":" constant+=constant)* ":" "(" fieldList=fieldList ")"
		public Group getGroup() { return cGroup; }
		
		//constant
		public RuleCall getConstantParserRuleCall_0() { return cConstantParserRuleCall_0; }
		
		//(":" constant+=constant)*
		public Group getGroup_1() { return cGroup_1; }
		
		//":"
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }
		
		//constant+=constant
		public Assignment getConstantAssignment_1_1() { return cConstantAssignment_1_1; }
		
		//constant
		public RuleCall getConstantConstantParserRuleCall_1_1_0() { return cConstantConstantParserRuleCall_1_1_0; }
		
		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//fieldList=fieldList
		public Assignment getFieldListAssignment_4() { return cFieldListAssignment_4; }
		
		//fieldList
		public RuleCall getFieldListFieldListParserRuleCall_4_0() { return cFieldListFieldListParserRuleCall_4_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class ConstListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "compilador.Pascal.constList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConstantAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConstantConstantParserRuleCall_0_0 = (RuleCall)cConstantAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cConstant1Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cConstant1ConstantParserRuleCall_1_1_0 = (RuleCall)cConstant1Assignment_1_1.eContents().get(0);
		
		//constList:
		//	constant=constant (":" constant1+=constant)*;
		@Override public ParserRule getRule() { return rule; }
		
		//constant=constant (":" constant1+=constant)*
		public Group getGroup() { return cGroup; }
		
		//constant=constant
		public Assignment getConstantAssignment_0() { return cConstantAssignment_0; }
		
		//constant
		public RuleCall getConstantConstantParserRuleCall_0_0() { return cConstantConstantParserRuleCall_0_0; }
		
		//(":" constant1+=constant)*
		public Group getGroup_1() { return cGroup_1; }
		
		//":"
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }
		
		//constant1+=constant
		public Assignment getConstant1Assignment_1_1() { return cConstant1Assignment_1_1; }
		
		//constant
		public RuleCall getConstant1ConstantParserRuleCall_1_1_0() { return cConstant1ConstantParserRuleCall_1_1_0; }
	}
	public class VariableDeclarationPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "compilador.Pascal.variableDeclarationPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariableDeclarationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariableDeclarationVariableDeclarationParserRuleCall_1_0 = (RuleCall)cVariableDeclarationAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cVariableDeclaration1Assignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cVariableDeclaration1VariableDeclarationParserRuleCall_2_1_0 = (RuleCall)cVariableDeclaration1Assignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//variableDeclarationPart:
		//	"var" variableDeclaration=variableDeclaration (";" variableDeclaration1+=variableDeclaration)* ";";
		@Override public ParserRule getRule() { return rule; }
		
		//"var" variableDeclaration=variableDeclaration (";" variableDeclaration1+=variableDeclaration)* ";"
		public Group getGroup() { return cGroup; }
		
		//"var"
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }
		
		//variableDeclaration=variableDeclaration
		public Assignment getVariableDeclarationAssignment_1() { return cVariableDeclarationAssignment_1; }
		
		//variableDeclaration
		public RuleCall getVariableDeclarationVariableDeclarationParserRuleCall_1_0() { return cVariableDeclarationVariableDeclarationParserRuleCall_1_0; }
		
		//(";" variableDeclaration1+=variableDeclaration)*
		public Group getGroup_2() { return cGroup_2; }
		
		//";"
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//variableDeclaration1+=variableDeclaration
		public Assignment getVariableDeclaration1Assignment_2_1() { return cVariableDeclaration1Assignment_2_1; }
		
		//variableDeclaration
		public RuleCall getVariableDeclaration1VariableDeclarationParserRuleCall_2_1_0() { return cVariableDeclaration1VariableDeclarationParserRuleCall_2_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "compilador.Pascal.variableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentifierListIdentifierListParserRuleCall_0_0 = (RuleCall)cIdentifierListAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cExpressionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_3_1_0 = (RuleCall)cExpressionAssignment_3_1.eContents().get(0);
		
		//variableDeclaration:
		//	identifierList=identifierList ":" type=type ("=" expression=expression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//identifierList=identifierList ":" type=type ("=" expression=expression)?
		public Group getGroup() { return cGroup; }
		
		//identifierList=identifierList
		public Assignment getIdentifierListAssignment_0() { return cIdentifierListAssignment_0; }
		
		//identifierList
		public RuleCall getIdentifierListIdentifierListParserRuleCall_0_0() { return cIdentifierListIdentifierListParserRuleCall_0_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }
		
		//("=" expression=expression)?
		public Group getGroup_3() { return cGroup_3; }
		
		//"="
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }
		
		//expression=expression
		public Assignment getExpressionAssignment_3_1() { return cExpressionAssignment_3_1; }
		
		//expression
		public RuleCall getExpressionExpressionParserRuleCall_3_1_0() { return cExpressionExpressionParserRuleCall_3_1_0; }
	}
	public class ProcedureAndFunctionDeclarationPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "compilador.Pascal.procedureAndFunctionDeclarationPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cProcedureOrFunctionDeclarationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cProcedureOrFunctionDeclarationProcedureOrFunctionDeclarationParserRuleCall_0_0 = (RuleCall)cProcedureOrFunctionDeclarationAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//procedureAndFunctionDeclarationPart:
		//	procedureOrFunctionDeclaration=procedureOrFunctionDeclaration ";";
		@Override public ParserRule getRule() { return rule; }
		
		//procedureOrFunctionDeclaration=procedureOrFunctionDeclaration ";"
		public Group getGroup() { return cGroup; }
		
		//procedureOrFunctionDeclaration=procedureOrFunctionDeclaration
		public Assignment getProcedureOrFunctionDeclarationAssignment_0() { return cProcedureOrFunctionDeclarationAssignment_0; }
		
		//procedureOrFunctionDeclaration
		public RuleCall getProcedureOrFunctionDeclarationProcedureOrFunctionDeclarationParserRuleCall_0_0() { return cProcedureOrFunctionDeclarationProcedureOrFunctionDeclarationParserRuleCall_0_0; }
		
		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class ProcedureOrFunctionDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "compilador.Pascal.procedureOrFunctionDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cProcedureDeclarationAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cProcedureDeclarationProcedureDeclarationParserRuleCall_0_0 = (RuleCall)cProcedureDeclarationAssignment_0.eContents().get(0);
		private final Assignment cFunctionDeclarationAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cFunctionDeclarationFunctionDeclarationParserRuleCall_1_0 = (RuleCall)cFunctionDeclarationAssignment_1.eContents().get(0);
		
		//procedureOrFunctionDeclaration:
		//	procedureDeclaration=procedureDeclaration | functionDeclaration=functionDeclaration;
		@Override public ParserRule getRule() { return rule; }
		
		//procedureDeclaration=procedureDeclaration | functionDeclaration=functionDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//procedureDeclaration=procedureDeclaration
		public Assignment getProcedureDeclarationAssignment_0() { return cProcedureDeclarationAssignment_0; }
		
		//procedureDeclaration
		public RuleCall getProcedureDeclarationProcedureDeclarationParserRuleCall_0_0() { return cProcedureDeclarationProcedureDeclarationParserRuleCall_0_0; }
		
		//functionDeclaration=functionDeclaration
		public Assignment getFunctionDeclarationAssignment_1() { return cFunctionDeclarationAssignment_1; }
		
		//functionDeclaration
		public RuleCall getFunctionDeclarationFunctionDeclarationParserRuleCall_1_0() { return cFunctionDeclarationFunctionDeclarationParserRuleCall_1_0; }
	}
	public class ProcedureDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "compilador.Pascal.procedureDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProcedureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdentifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdentifierIdentifierParserRuleCall_1_0 = (RuleCall)cIdentifierAssignment_1.eContents().get(0);
		private final Assignment cFormalParameterListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFormalParameterListFormalParameterListParserRuleCall_2_0 = (RuleCall)cFormalParameterListAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBlockAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBlockBlockParserRuleCall_4_0 = (RuleCall)cBlockAssignment_4.eContents().get(0);
		
		//procedureDeclaration:
		//	"procedure" identifier=identifier formalParameterList=formalParameterList? ";" block=block;
		@Override public ParserRule getRule() { return rule; }
		
		//"procedure" identifier=identifier formalParameterList=formalParameterList? ";" block=block
		public Group getGroup() { return cGroup; }
		
		//"procedure"
		public Keyword getProcedureKeyword_0() { return cProcedureKeyword_0; }
		
		//identifier=identifier
		public Assignment getIdentifierAssignment_1() { return cIdentifierAssignment_1; }
		
		//identifier
		public RuleCall getIdentifierIdentifierParserRuleCall_1_0() { return cIdentifierIdentifierParserRuleCall_1_0; }
		
		//formalParameterList=formalParameterList?
		public Assignment getFormalParameterListAssignment_2() { return cFormalParameterListAssignment_2; }
		
		//formalParameterList
		public RuleCall getFormalParameterListFormalParameterListParserRuleCall_2_0() { return cFormalParameterListFormalParameterListParserRuleCall_2_0; }
		
		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
		
		//block=block
		public Assignment getBlockAssignment_4() { return cBlockAssignment_4; }
		
		//block
		public RuleCall getBlockBlockParserRuleCall_4_0() { return cBlockBlockParserRuleCall_4_0; }
	}
	public class FunctionDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "compilador.Pascal.functionDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdentifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdentifierIdentifierParserRuleCall_1_0 = (RuleCall)cIdentifierAssignment_1.eContents().get(0);
		private final Assignment cFormalParameterListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFormalParameterListFormalParameterListParserRuleCall_2_0 = (RuleCall)cFormalParameterListAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cResultTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cResultTypeResultTypeParserRuleCall_4_0 = (RuleCall)cResultTypeAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cBlockAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBlockBlockParserRuleCall_6_0 = (RuleCall)cBlockAssignment_6.eContents().get(0);
		
		//functionDeclaration:
		//	"function" identifier=identifier formalParameterList=formalParameterList? ":" resultType=resultType ";" block=block;
		@Override public ParserRule getRule() { return rule; }
		
		//"function" identifier=identifier formalParameterList=formalParameterList? ":" resultType=resultType ";" block=block
		public Group getGroup() { return cGroup; }
		
		//"function"
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }
		
		//identifier=identifier
		public Assignment getIdentifierAssignment_1() { return cIdentifierAssignment_1; }
		
		//identifier
		public RuleCall getIdentifierIdentifierParserRuleCall_1_0() { return cIdentifierIdentifierParserRuleCall_1_0; }
		
		//formalParameterList=formalParameterList?
		public Assignment getFormalParameterListAssignment_2() { return cFormalParameterListAssignment_2; }
		
		//formalParameterList
		public RuleCall getFormalParameterListFormalParameterListParserRuleCall_2_0() { return cFormalParameterListFormalParameterListParserRuleCall_2_0; }
		
		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//resultType=resultType
		public Assignment getResultTypeAssignment_4() { return cResultTypeAssignment_4; }
		
		//resultType
		public RuleCall getResultTypeResultTypeParserRuleCall_4_0() { return cResultTypeResultTypeParserRuleCall_4_0; }
		
		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
		
		//block=block
		public Assignment getBlockAssignment_6() { return cBlockAssignment_6; }
		
		//block
		public RuleCall getBlockBlockParserRuleCall_6_0() { return cBlockBlockParserRuleCall_6_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "compilador.Pascal.statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cLabelParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cUnlabelledStatementAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cUnlabelledStatementUnlabelledStatementParserRuleCall_0_2_0 = (RuleCall)cUnlabelledStatementAssignment_0_2.eContents().get(0);
		private final Assignment cUnlabelledStatementAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cUnlabelledStatementUnlabelledStatementParserRuleCall_1_0 = (RuleCall)cUnlabelledStatementAssignment_1.eContents().get(0);
		
		//statement:
		//	label ":" unlabelledStatement=unlabelledStatement | unlabelledStatement=unlabelledStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//label ":" unlabelledStatement=unlabelledStatement | unlabelledStatement=unlabelledStatement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//label ":" unlabelledStatement=unlabelledStatement
		public Group getGroup_0() { return cGroup_0; }
		
		//label
		public RuleCall getLabelParserRuleCall_0_0() { return cLabelParserRuleCall_0_0; }
		
		//":"
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }
		
		//unlabelledStatement=unlabelledStatement
		public Assignment getUnlabelledStatementAssignment_0_2() { return cUnlabelledStatementAssignment_0_2; }
		
		//unlabelledStatement
		public RuleCall getUnlabelledStatementUnlabelledStatementParserRuleCall_0_2_0() { return cUnlabelledStatementUnlabelledStatementParserRuleCall_0_2_0; }
		
		//unlabelledStatement=unlabelledStatement
		public Assignment getUnlabelledStatementAssignment_1() { return cUnlabelledStatementAssignment_1; }
		
		//unlabelledStatement
		public RuleCall getUnlabelledStatementUnlabelledStatementParserRuleCall_1_0() { return cUnlabelledStatementUnlabelledStatementParserRuleCall_1_0; }
	}
	public class UnlabelledStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "compilador.Pascal.unlabelledStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cSimpleStatementAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cSimpleStatementSimpleStatementParserRuleCall_0_0 = (RuleCall)cSimpleStatementAssignment_0.eContents().get(0);
		private final Assignment cStructuredStatementAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cStructuredStatementStructuredStatementParserRuleCall_1_0 = (RuleCall)cStructuredStatementAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cIdentifierAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cIdentifierIdentifierParserRuleCall_2_0_0 = (RuleCall)cIdentifierAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cParameterListAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParameterListParameterListParserRuleCall_2_1_1_0 = (RuleCall)cParameterListAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		////
		//unlabelledStatement:
		//	simpleStatement=simpleStatement | structuredStatement=structuredStatement | identifier=identifier ("("
		//	parameterList=parameterList ")")?;
		@Override public ParserRule getRule() { return rule; }
		
		//simpleStatement=simpleStatement | structuredStatement=structuredStatement | identifier=identifier ("("
		//parameterList=parameterList ")")?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//simpleStatement=simpleStatement
		public Assignment getSimpleStatementAssignment_0() { return cSimpleStatementAssignment_0; }
		
		//simpleStatement
		public RuleCall getSimpleStatementSimpleStatementParserRuleCall_0_0() { return cSimpleStatementSimpleStatementParserRuleCall_0_0; }
		
		//structuredStatement=structuredStatement
		public Assignment getStructuredStatementAssignment_1() { return cStructuredStatementAssignment_1; }
		
		//structuredStatement
		public RuleCall getStructuredStatementStructuredStatementParserRuleCall_1_0() { return cStructuredStatementStructuredStatementParserRuleCall_1_0; }
		
		//identifier=identifier ("(" parameterList=parameterList ")")?
		public Group getGroup_2() { return cGroup_2; }
		
		//identifier=identifier
		public Assignment getIdentifierAssignment_2_0() { return cIdentifierAssignment_2_0; }
		
		//identifier
		public RuleCall getIdentifierIdentifierParserRuleCall_2_0_0() { return cIdentifierIdentifierParserRuleCall_2_0_0; }
		
		//("(" parameterList=parameterList ")")?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2_1_0() { return cLeftParenthesisKeyword_2_1_0; }
		
		//parameterList=parameterList
		public Assignment getParameterListAssignment_2_1_1() { return cParameterListAssignment_2_1_1; }
		
		//parameterList
		public RuleCall getParameterListParameterListParserRuleCall_2_1_1_0() { return cParameterListParameterListParserRuleCall_2_1_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2_1_2() { return cRightParenthesisKeyword_2_1_2; }
	}
	public class SimpleStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "compilador.Pascal.simpleStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSimpleStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cGotoStatementAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cGotoStatementGotoStatementParserRuleCall_1_0_0 = (RuleCall)cGotoStatementAssignment_1_0.eContents().get(0);
		private final Assignment cAssignmentStatementAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cAssignmentStatementAssignmentStatementParserRuleCall_1_1_0 = (RuleCall)cAssignmentStatementAssignment_1_1.eContents().get(0);
		
		//////assignmentStatement | procedureStatement  -->  
		//simpleStatement:
		//	{simpleStatement} (gotoStatement=gotoStatement | assignmentStatement=assignmentStatement)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{simpleStatement} (gotoStatement=gotoStatement | assignmentStatement=assignmentStatement)?
		public Group getGroup() { return cGroup; }
		
		//{simpleStatement}
		public Action getSimpleStatementAction_0() { return cSimpleStatementAction_0; }
		
		//(gotoStatement=gotoStatement | assignmentStatement=assignmentStatement)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//gotoStatement=gotoStatement
		public Assignment getGotoStatementAssignment_1_0() { return cGotoStatementAssignment_1_0; }
		
		//gotoStatement
		public RuleCall getGotoStatementGotoStatementParserRuleCall_1_0_0() { return cGotoStatementGotoStatementParserRuleCall_1_0_0; }
		
		//assignmentStatement=assignmentStatement
		public Assignment getAssignmentStatementAssignment_1_1() { return cAssignmentStatementAssignment_1_1; }
		
		//assignmentStatement
		public RuleCall getAssignmentStatementAssignmentStatementParserRuleCall_1_1_0() { return cAssignmentStatementAssignmentStatementParserRuleCall_1_1_0; }
	}
	public class AssignmentStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "compilador.Pascal.assignmentStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVariableVariableParserRuleCall_0_0 = (RuleCall)cVariableAssignment_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//assignmentStatement:
		//	variable=variable ":=" expression=expression;
		@Override public ParserRule getRule() { return rule; }
		
		//variable=variable ":=" expression=expression
		public Group getGroup() { return cGroup; }
		
		//variable=variable
		public Assignment getVariableAssignment_0() { return cVariableAssignment_0; }
		
		//variable
		public RuleCall getVariableVariableParserRuleCall_0_0() { return cVariableVariableParserRuleCall_0_0; }
		
		//":="
		public Keyword getColonEqualsSignKeyword_1() { return cColonEqualsSignKeyword_1; }
		
		//expression=expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "compilador.Pascal.variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Keyword cCommercialAtKeyword_0_0_0 = (Keyword)cGroup_0_0.eContents().get(0);
		private final Assignment cIdentifierAssignment_0_0_1 = (Assignment)cGroup_0_0.eContents().get(1);
		private final RuleCall cIdentifierIdentifierParserRuleCall_0_0_1_0 = (RuleCall)cIdentifierAssignment_0_0_1.eContents().get(0);
		private final Assignment cIdentifierAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cIdentifierIdentifierParserRuleCall_0_1_0 = (RuleCall)cIdentifierAssignment_0_1.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cExpressionAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0_1_0 = (RuleCall)cExpressionAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_0_2 = (Group)cGroup_1_0.eContents().get(2);
		private final Keyword cCommaKeyword_1_0_2_0 = (Keyword)cGroup_1_0_2.eContents().get(0);
		private final Assignment cExpression1Assignment_1_0_2_1 = (Assignment)cGroup_1_0_2.eContents().get(1);
		private final RuleCall cExpression1ExpressionParserRuleCall_1_0_2_1_0 = (RuleCall)cExpression1Assignment_1_0_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_0_3 = (Keyword)cGroup_1_0.eContents().get(3);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftParenthesisFullStopKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cExpression2Assignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cExpression2ExpressionParserRuleCall_1_1_1_0 = (RuleCall)cExpression2Assignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_1_2 = (Group)cGroup_1_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_1_2_0 = (Keyword)cGroup_1_1_2.eContents().get(0);
		private final Assignment cExpression3Assignment_1_1_2_1 = (Assignment)cGroup_1_1_2.eContents().get(1);
		private final RuleCall cExpression3ExpressionParserRuleCall_1_1_2_1_0 = (RuleCall)cExpression3Assignment_1_1_2_1.eContents().get(0);
		private final Keyword cFullStopRightParenthesisKeyword_1_1_3 = (Keyword)cGroup_1_1.eContents().get(3);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Keyword cFullStopKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cIdentifier2Assignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cIdentifier2IdentifierParserRuleCall_1_2_1_0 = (RuleCall)cIdentifier2Assignment_1_2_1.eContents().get(0);
		private final Keyword cCircumflexAccentKeyword_1_3 = (Keyword)cAlternatives_1.eContents().get(3);
		
		//variable:
		//	("@" identifier=identifier | identifier=identifier) ("[" expression+=expression ("," expression1+=expression)* "]" |
		//	"(." expression2+=expression ("," expression3+=expression)* ".)" | "." identifier2+=identifier | "^")*;
		@Override public ParserRule getRule() { return rule; }
		
		//("@" identifier=identifier | identifier=identifier) ("[" expression+=expression ("," expression1+=expression)* "]" |
		//"(." expression2+=expression ("," expression3+=expression)* ".)" | "." identifier2+=identifier | "^")*
		public Group getGroup() { return cGroup; }
		
		//"@" identifier=identifier | identifier=identifier
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//"@" identifier=identifier
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//"@"
		public Keyword getCommercialAtKeyword_0_0_0() { return cCommercialAtKeyword_0_0_0; }
		
		//identifier=identifier
		public Assignment getIdentifierAssignment_0_0_1() { return cIdentifierAssignment_0_0_1; }
		
		//identifier
		public RuleCall getIdentifierIdentifierParserRuleCall_0_0_1_0() { return cIdentifierIdentifierParserRuleCall_0_0_1_0; }
		
		//identifier=identifier
		public Assignment getIdentifierAssignment_0_1() { return cIdentifierAssignment_0_1; }
		
		//identifier
		public RuleCall getIdentifierIdentifierParserRuleCall_0_1_0() { return cIdentifierIdentifierParserRuleCall_0_1_0; }
		
		//("[" expression+=expression ("," expression1+=expression)* "]" | "(." expression2+=expression (","
		//expression3+=expression)* ".)" | "." identifier2+=identifier | "^")*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//"[" expression+=expression ("," expression1+=expression)* "]"
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_1_0_0() { return cLeftSquareBracketKeyword_1_0_0; }
		
		//expression+=expression
		public Assignment getExpressionAssignment_1_0_1() { return cExpressionAssignment_1_0_1; }
		
		//expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0_1_0() { return cExpressionExpressionParserRuleCall_1_0_1_0; }
		
		//("," expression1+=expression)*
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }
		
		//","
		public Keyword getCommaKeyword_1_0_2_0() { return cCommaKeyword_1_0_2_0; }
		
		//expression1+=expression
		public Assignment getExpression1Assignment_1_0_2_1() { return cExpression1Assignment_1_0_2_1; }
		
		//expression
		public RuleCall getExpression1ExpressionParserRuleCall_1_0_2_1_0() { return cExpression1ExpressionParserRuleCall_1_0_2_1_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_1_0_3() { return cRightSquareBracketKeyword_1_0_3; }
		
		//"(." expression2+=expression ("," expression3+=expression)* ".)"
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//"(."
		public Keyword getLeftParenthesisFullStopKeyword_1_1_0() { return cLeftParenthesisFullStopKeyword_1_1_0; }
		
		//expression2+=expression
		public Assignment getExpression2Assignment_1_1_1() { return cExpression2Assignment_1_1_1; }
		
		//expression
		public RuleCall getExpression2ExpressionParserRuleCall_1_1_1_0() { return cExpression2ExpressionParserRuleCall_1_1_1_0; }
		
		//("," expression3+=expression)*
		public Group getGroup_1_1_2() { return cGroup_1_1_2; }
		
		//","
		public Keyword getCommaKeyword_1_1_2_0() { return cCommaKeyword_1_1_2_0; }
		
		//expression3+=expression
		public Assignment getExpression3Assignment_1_1_2_1() { return cExpression3Assignment_1_1_2_1; }
		
		//expression
		public RuleCall getExpression3ExpressionParserRuleCall_1_1_2_1_0() { return cExpression3ExpressionParserRuleCall_1_1_2_1_0; }
		
		//".)"
		public Keyword getFullStopRightParenthesisKeyword_1_1_3() { return cFullStopRightParenthesisKeyword_1_1_3; }
		
		//"." identifier2+=identifier
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//"."
		public Keyword getFullStopKeyword_1_2_0() { return cFullStopKeyword_1_2_0; }
		
		//identifier2+=identifier
		public Assignment getIdentifier2Assignment_1_2_1() { return cIdentifier2Assignment_1_2_1; }
		
		//identifier
		public RuleCall getIdentifier2IdentifierParserRuleCall_1_2_1_0() { return cIdentifier2IdentifierParserRuleCall_1_2_1_0; }
		
		//"^"
		public Keyword getCircumflexAccentKeyword_1_3() { return cCircumflexAccentKeyword_1_3; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "compilador.Pascal.expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSimpleExpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSimpleExpressionSimpleExpressionParserRuleCall_0_0 = (RuleCall)cSimpleExpressionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cRelationaloperatorAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cRelationaloperatorRelationaloperatorParserRuleCall_1_0_0 = (RuleCall)cRelationaloperatorAssignment_1_0.eContents().get(0);
		private final Assignment cExpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_1_0 = (RuleCall)cExpressionAssignment_1_1.eContents().get(0);
		
		////
		//expression:
		//	simpleExpression=simpleExpression (relationaloperator=relationaloperator expression=expression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//simpleExpression=simpleExpression (relationaloperator=relationaloperator expression=expression)?
		public Group getGroup() { return cGroup; }
		
		//simpleExpression=simpleExpression
		public Assignment getSimpleExpressionAssignment_0() { return cSimpleExpressionAssignment_0; }
		
		//simpleExpression
		public RuleCall getSimpleExpressionSimpleExpressionParserRuleCall_0_0() { return cSimpleExpressionSimpleExpressionParserRuleCall_0_0; }
		
		//(relationaloperator=relationaloperator expression=expression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//relationaloperator=relationaloperator
		public Assignment getRelationaloperatorAssignment_1_0() { return cRelationaloperatorAssignment_1_0; }
		
		//relationaloperator
		public RuleCall getRelationaloperatorRelationaloperatorParserRuleCall_1_0_0() { return cRelationaloperatorRelationaloperatorParserRuleCall_1_0_0; }
		
		//expression=expression
		public Assignment getExpressionAssignment_1_1() { return cExpressionAssignment_1_1; }
		
		//expression
		public RuleCall getExpressionExpressionParserRuleCall_1_1_0() { return cExpressionExpressionParserRuleCall_1_1_0; }
	}
	public class RelationaloperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "compilador.Pascal.relationaloperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLessThanSignGreaterThanSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLessThanSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLessThanSignEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cGreaterThanSignEqualsSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cGreaterThanSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cInKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		
		//relationaloperator:
		//	"=" | "<>" | "<" | "<=" | ">=" | ">" | "in";
		@Override public ParserRule getRule() { return rule; }
		
		//"=" | "<>" | "<" | "<=" | ">=" | ">" | "in"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"="
		public Keyword getEqualsSignKeyword_0() { return cEqualsSignKeyword_0; }
		
		//"<>"
		public Keyword getLessThanSignGreaterThanSignKeyword_1() { return cLessThanSignGreaterThanSignKeyword_1; }
		
		//"<"
		public Keyword getLessThanSignKeyword_2() { return cLessThanSignKeyword_2; }
		
		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_3() { return cLessThanSignEqualsSignKeyword_3; }
		
		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_4() { return cGreaterThanSignEqualsSignKeyword_4; }
		
		//">"
		public Keyword getGreaterThanSignKeyword_5() { return cGreaterThanSignKeyword_5; }
		
		//"in"
		public Keyword getInKeyword_6() { return cInKeyword_6; }
	}
	public class SimpleExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "compilador.Pascal.simpleExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTermAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTermTermParserRuleCall_0_0 = (RuleCall)cTermAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cAdditiveoperatorAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cAdditiveoperatorAdditiveoperatorParserRuleCall_1_0_0 = (RuleCall)cAdditiveoperatorAssignment_1_0.eContents().get(0);
		private final Assignment cSimpleExpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSimpleExpressionSimpleExpressionParserRuleCall_1_1_0 = (RuleCall)cSimpleExpressionAssignment_1_1.eContents().get(0);
		
		//simpleExpression:
		//	term=term (additiveoperator=additiveoperator simpleExpression=simpleExpression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//term=term (additiveoperator=additiveoperator simpleExpression=simpleExpression)?
		public Group getGroup() { return cGroup; }
		
		//term=term
		public Assignment getTermAssignment_0() { return cTermAssignment_0; }
		
		//term
		public RuleCall getTermTermParserRuleCall_0_0() { return cTermTermParserRuleCall_0_0; }
		
		//(additiveoperator=additiveoperator simpleExpression=simpleExpression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//additiveoperator=additiveoperator
		public Assignment getAdditiveoperatorAssignment_1_0() { return cAdditiveoperatorAssignment_1_0; }
		
		//additiveoperator
		public RuleCall getAdditiveoperatorAdditiveoperatorParserRuleCall_1_0_0() { return cAdditiveoperatorAdditiveoperatorParserRuleCall_1_0_0; }
		
		//simpleExpression=simpleExpression
		public Assignment getSimpleExpressionAssignment_1_1() { return cSimpleExpressionAssignment_1_1; }
		
		//simpleExpression
		public RuleCall getSimpleExpressionSimpleExpressionParserRuleCall_1_1_0() { return cSimpleExpressionSimpleExpressionParserRuleCall_1_1_0; }
	}
	public class AdditiveoperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "compilador.Pascal.additiveoperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cOrKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//additiveoperator:
		//	"+" | "-" | "or";
		@Override public ParserRule getRule() { return rule; }
		
		//"+" | "-" | "or"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"+"
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }
		
		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
		
		//"or"
		public Keyword getOrKeyword_2() { return cOrKeyword_2; }
	}
	public class TermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "compilador.Pascal.term");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSignedFactorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSignedFactorSignedFactorParserRuleCall_0_0 = (RuleCall)cSignedFactorAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cMultiplicativeoperatorAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cMultiplicativeoperatorMultiplicativeoperatorParserRuleCall_1_0_0 = (RuleCall)cMultiplicativeoperatorAssignment_1_0.eContents().get(0);
		private final Assignment cTermAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTermTermParserRuleCall_1_1_0 = (RuleCall)cTermAssignment_1_1.eContents().get(0);
		
		//term:
		//	signedFactor=signedFactor (multiplicativeoperator=multiplicativeoperator term=term)?;
		@Override public ParserRule getRule() { return rule; }
		
		//signedFactor=signedFactor (multiplicativeoperator=multiplicativeoperator term=term)?
		public Group getGroup() { return cGroup; }
		
		//signedFactor=signedFactor
		public Assignment getSignedFactorAssignment_0() { return cSignedFactorAssignment_0; }
		
		//signedFactor
		public RuleCall getSignedFactorSignedFactorParserRuleCall_0_0() { return cSignedFactorSignedFactorParserRuleCall_0_0; }
		
		//(multiplicativeoperator=multiplicativeoperator term=term)?
		public Group getGroup_1() { return cGroup_1; }
		
		//multiplicativeoperator=multiplicativeoperator
		public Assignment getMultiplicativeoperatorAssignment_1_0() { return cMultiplicativeoperatorAssignment_1_0; }
		
		//multiplicativeoperator
		public RuleCall getMultiplicativeoperatorMultiplicativeoperatorParserRuleCall_1_0_0() { return cMultiplicativeoperatorMultiplicativeoperatorParserRuleCall_1_0_0; }
		
		//term=term
		public Assignment getTermAssignment_1_1() { return cTermAssignment_1_1; }
		
		//term
		public RuleCall getTermTermParserRuleCall_1_1_0() { return cTermTermParserRuleCall_1_1_0; }
	}
	public class MultiplicativeoperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "compilador.Pascal.multiplicativeoperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSolidusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cDivKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cModKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cAndKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//multiplicativeoperator:
		//	"*" | "/" | "div" | "mod" | "and";
		@Override public ParserRule getRule() { return rule; }
		
		//"*" | "/" | "div" | "mod" | "and"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"*"
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }
		
		//"/"
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }
		
		//"div"
		public Keyword getDivKeyword_2() { return cDivKeyword_2; }
		
		//"mod"
		public Keyword getModKeyword_3() { return cModKeyword_3; }
		
		//"and"
		public Keyword getAndKeyword_4() { return cAndKeyword_4; }
	}
	public class SignedFactorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "compilador.Pascal.signedFactor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cPlusSignKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cFactorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFactorFactorParserRuleCall_1_0 = (RuleCall)cFactorAssignment_1.eContents().get(0);
		
		//signedFactor:
		//	("+" | "-")? factor=factor;
		@Override public ParserRule getRule() { return rule; }
		
		//("+" | "-")? factor=factor
		public Group getGroup() { return cGroup; }
		
		//("+" | "-")?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//"+"
		public Keyword getPlusSignKeyword_0_0() { return cPlusSignKeyword_0_0; }
		
		//"-"
		public Keyword getHyphenMinusKeyword_0_1() { return cHyphenMinusKeyword_0_1; }
		
		//factor=factor
		public Assignment getFactorAssignment_1() { return cFactorAssignment_1; }
		
		//factor
		public RuleCall getFactorFactorParserRuleCall_1_0() { return cFactorFactorParserRuleCall_1_0; }
	}
	public class FactorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "compilador.Pascal.factor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cExpressionAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_0_1_0 = (RuleCall)cExpressionAssignment_0_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cUnsignedConstantAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cUnsignedConstantUnsignedConstantParserRuleCall_1_0 = (RuleCall)cUnsignedConstantAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cNotKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cFactorAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cFactorFactorParserRuleCall_2_1_0 = (RuleCall)cFactorAssignment_2_1.eContents().get(0);
		private final Assignment cBoolAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cBoolBOOLTerminalRuleCall_3_0 = (RuleCall)cBoolAssignment_3.eContents().get(0);
		private final Assignment cFunctionDesignatorAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cFunctionDesignatorFunctionDesignatorParserRuleCall_4_0 = (RuleCall)cFunctionDesignatorAssignment_4.eContents().get(0);
		private final Assignment cVariableAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cVariableVariableParserRuleCall_5_0 = (RuleCall)cVariableAssignment_5.eContents().get(0);
		
		//factor:
		//	"(" expression=expression ")" | unsignedConstant=unsignedConstant | "not" factor=factor | bool=BOOL |
		//	functionDesignator=functionDesignator | variable=variable;
		@Override public ParserRule getRule() { return rule; }
		
		//"(" expression=expression ")" | unsignedConstant=unsignedConstant | "not" factor=factor | bool=BOOL |
		//functionDesignator=functionDesignator | variable=variable
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"(" expression=expression ")"
		public Group getGroup_0() { return cGroup_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//expression=expression
		public Assignment getExpressionAssignment_0_1() { return cExpressionAssignment_0_1; }
		
		//expression
		public RuleCall getExpressionExpressionParserRuleCall_0_1_0() { return cExpressionExpressionParserRuleCall_0_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//unsignedConstant=unsignedConstant
		public Assignment getUnsignedConstantAssignment_1() { return cUnsignedConstantAssignment_1; }
		
		//unsignedConstant
		public RuleCall getUnsignedConstantUnsignedConstantParserRuleCall_1_0() { return cUnsignedConstantUnsignedConstantParserRuleCall_1_0; }
		
		//"not" factor=factor
		public Group getGroup_2() { return cGroup_2; }
		
		//"not"
		public Keyword getNotKeyword_2_0() { return cNotKeyword_2_0; }
		
		//factor=factor
		public Assignment getFactorAssignment_2_1() { return cFactorAssignment_2_1; }
		
		//factor
		public RuleCall getFactorFactorParserRuleCall_2_1_0() { return cFactorFactorParserRuleCall_2_1_0; }
		
		//bool=BOOL
		public Assignment getBoolAssignment_3() { return cBoolAssignment_3; }
		
		//BOOL
		public RuleCall getBoolBOOLTerminalRuleCall_3_0() { return cBoolBOOLTerminalRuleCall_3_0; }
		
		//functionDesignator=functionDesignator
		public Assignment getFunctionDesignatorAssignment_4() { return cFunctionDesignatorAssignment_4; }
		
		//functionDesignator
		public RuleCall getFunctionDesignatorFunctionDesignatorParserRuleCall_4_0() { return cFunctionDesignatorFunctionDesignatorParserRuleCall_4_0; }
		
		//variable=variable
		public Assignment getVariableAssignment_5() { return cVariableAssignment_5; }
		
		//variable
		public RuleCall getVariableVariableParserRuleCall_5_0() { return cVariableVariableParserRuleCall_5_0; }
	}
	public class UnsignedConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "compilador.Pascal.unsignedConstant");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cUnsignedNumberAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cUnsignedNumberUnsignedNumberParserRuleCall_0_0 = (RuleCall)cUnsignedNumberAssignment_0.eContents().get(0);
		private final Assignment cString_literalAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cString_literalSTRING_LITERALTerminalRuleCall_1_0 = (RuleCall)cString_literalAssignment_1.eContents().get(0);
		private final Assignment cConstantChrAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cConstantChrConstantChrParserRuleCall_2_0 = (RuleCall)cConstantChrAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cUnsignedConstantAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cNilKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		
		//unsignedConstant:
		//	unsignedNumber=unsignedNumber | string_literal=STRING_LITERAL | constantChr=constantChr | {unsignedConstant} "nil";
		@Override public ParserRule getRule() { return rule; }
		
		//unsignedNumber=unsignedNumber | string_literal=STRING_LITERAL | constantChr=constantChr | {unsignedConstant} "nil"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//unsignedNumber=unsignedNumber
		public Assignment getUnsignedNumberAssignment_0() { return cUnsignedNumberAssignment_0; }
		
		//unsignedNumber
		public RuleCall getUnsignedNumberUnsignedNumberParserRuleCall_0_0() { return cUnsignedNumberUnsignedNumberParserRuleCall_0_0; }
		
		//string_literal=STRING_LITERAL
		public Assignment getString_literalAssignment_1() { return cString_literalAssignment_1; }
		
		//STRING_LITERAL
		public RuleCall getString_literalSTRING_LITERALTerminalRuleCall_1_0() { return cString_literalSTRING_LITERALTerminalRuleCall_1_0; }
		
		//constantChr=constantChr
		public Assignment getConstantChrAssignment_2() { return cConstantChrAssignment_2; }
		
		//constantChr
		public RuleCall getConstantChrConstantChrParserRuleCall_2_0() { return cConstantChrConstantChrParserRuleCall_2_0; }
		
		//{unsignedConstant} "nil"
		public Group getGroup_3() { return cGroup_3; }
		
		//{unsignedConstant}
		public Action getUnsignedConstantAction_3_0() { return cUnsignedConstantAction_3_0; }
		
		//"nil"
		public Keyword getNilKeyword_3_1() { return cNilKeyword_3_1; }
	}
	public class FunctionDesignatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "compilador.Pascal.functionDesignator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentifierIdentifierParserRuleCall_0_0 = (RuleCall)cIdentifierAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParameterListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParameterListParameterListParserRuleCall_2_0 = (RuleCall)cParameterListAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//functionDesignator:
		//	identifier=identifier "(" parameterList=parameterList ")";
		@Override public ParserRule getRule() { return rule; }
		
		//identifier=identifier "(" parameterList=parameterList ")"
		public Group getGroup() { return cGroup; }
		
		//identifier=identifier
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }
		
		//identifier
		public RuleCall getIdentifierIdentifierParserRuleCall_0_0() { return cIdentifierIdentifierParserRuleCall_0_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//parameterList=parameterList
		public Assignment getParameterListAssignment_2() { return cParameterListAssignment_2; }
		
		//parameterList
		public RuleCall getParameterListParameterListParserRuleCall_2_0() { return cParameterListParameterListParserRuleCall_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ParameterListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "compilador.Pascal.parameterList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cActualParameterParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cActualParameterAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cActualParameterActualParameterParserRuleCall_1_1_0 = (RuleCall)cActualParameterAssignment_1_1.eContents().get(0);
		
		//parameterList:
		//	actualParameter ("," actualParameter+=actualParameter)*;
		@Override public ParserRule getRule() { return rule; }
		
		//actualParameter ("," actualParameter+=actualParameter)*
		public Group getGroup() { return cGroup; }
		
		//actualParameter
		public RuleCall getActualParameterParserRuleCall_0() { return cActualParameterParserRuleCall_0; }
		
		//("," actualParameter+=actualParameter)*
		public Group getGroup_1() { return cGroup_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//actualParameter+=actualParameter
		public Assignment getActualParameterAssignment_1_1() { return cActualParameterAssignment_1_1; }
		
		//actualParameter
		public RuleCall getActualParameterActualParameterParserRuleCall_1_1_0() { return cActualParameterActualParameterParserRuleCall_1_1_0; }
	}
	public class ActualParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "compilador.Pascal.actualParameter");
		private final Assignment cExpressionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_0 = (RuleCall)cExpressionAssignment.eContents().get(0);
		
		//actualParameter:
		//	expression=expression;
		@Override public ParserRule getRule() { return rule; }
		
		//expression=expression
		public Assignment getExpressionAssignment() { return cExpressionAssignment; }
		
		//expression
		public RuleCall getExpressionExpressionParserRuleCall_0() { return cExpressionExpressionParserRuleCall_0; }
	}
	public class GotoStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "compilador.Pascal.gotoStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGotoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLabelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLabelLabelParserRuleCall_1_0 = (RuleCall)cLabelAssignment_1.eContents().get(0);
		
		//gotoStatement:
		//	"goto" label=label;
		@Override public ParserRule getRule() { return rule; }
		
		//"goto" label=label
		public Group getGroup() { return cGroup; }
		
		//"goto"
		public Keyword getGotoKeyword_0() { return cGotoKeyword_0; }
		
		//label=label
		public Assignment getLabelAssignment_1() { return cLabelAssignment_1; }
		
		//label
		public RuleCall getLabelLabelParserRuleCall_1_0() { return cLabelLabelParserRuleCall_1_0; }
	}
	public class StructuredStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "compilador.Pascal.structuredStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cCompoundStatementAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cCompoundStatementCompoundStatementParserRuleCall_0_0 = (RuleCall)cCompoundStatementAssignment_0.eContents().get(0);
		private final Assignment cConditionalStatementAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cConditionalStatementConditionalStatementParserRuleCall_1_0 = (RuleCall)cConditionalStatementAssignment_1.eContents().get(0);
		
		//structuredStatement:
		//	compoundStatement=compoundStatement | conditionalStatement=conditionalStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//compoundStatement=compoundStatement | conditionalStatement=conditionalStatement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//compoundStatement=compoundStatement
		public Assignment getCompoundStatementAssignment_0() { return cCompoundStatementAssignment_0; }
		
		//compoundStatement
		public RuleCall getCompoundStatementCompoundStatementParserRuleCall_0_0() { return cCompoundStatementCompoundStatementParserRuleCall_0_0; }
		
		//conditionalStatement=conditionalStatement
		public Assignment getConditionalStatementAssignment_1() { return cConditionalStatementAssignment_1; }
		
		//conditionalStatement
		public RuleCall getConditionalStatementConditionalStatementParserRuleCall_1_0() { return cConditionalStatementConditionalStatementParserRuleCall_1_0; }
	}
	public class CompoundStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "compilador.Pascal.compoundStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBeginKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cStatementsParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cEndKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//compoundStatement:
		//	"begin" statements "end";
		@Override public ParserRule getRule() { return rule; }
		
		//"begin" statements "end"
		public Group getGroup() { return cGroup; }
		
		//"begin"
		public Keyword getBeginKeyword_0() { return cBeginKeyword_0; }
		
		//statements
		public RuleCall getStatementsParserRuleCall_1() { return cStatementsParserRuleCall_1; }
		
		//"end"
		public Keyword getEndKeyword_2() { return cEndKeyword_2; }
	}
	public class StatementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "compilador.Pascal.statements");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStatementAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStatementStatementParserRuleCall_0_0 = (RuleCall)cStatementAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cStatementAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cStatementStatementParserRuleCall_1_1_0 = (RuleCall)cStatementAssignment_1_1.eContents().get(0);
		
		//statements:
		//	statement+=statement (";" statement+=statement)*;
		@Override public ParserRule getRule() { return rule; }
		
		//statement+=statement (";" statement+=statement)*
		public Group getGroup() { return cGroup; }
		
		//statement+=statement
		public Assignment getStatementAssignment_0() { return cStatementAssignment_0; }
		
		//statement
		public RuleCall getStatementStatementParserRuleCall_0_0() { return cStatementStatementParserRuleCall_0_0; }
		
		//(";" statement+=statement)*
		public Group getGroup_1() { return cGroup_1; }
		
		//";"
		public Keyword getSemicolonKeyword_1_0() { return cSemicolonKeyword_1_0; }
		
		//statement+=statement
		public Assignment getStatementAssignment_1_1() { return cStatementAssignment_1_1; }
		
		//statement
		public RuleCall getStatementStatementParserRuleCall_1_1_0() { return cStatementStatementParserRuleCall_1_1_0; }
	}
	public class ConditionalStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "compilador.Pascal.conditionalStatement");
		private final Assignment cCaseStatementAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cCaseStatementCaseStatementParserRuleCall_0 = (RuleCall)cCaseStatementAssignment.eContents().get(0);
		
		//conditionalStatement:
		//	caseStatement=caseStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//caseStatement=caseStatement
		public Assignment getCaseStatementAssignment() { return cCaseStatementAssignment; }
		
		//caseStatement
		public RuleCall getCaseStatementCaseStatementParserRuleCall_0() { return cCaseStatementCaseStatementParserRuleCall_0; }
	}
	public class CaseStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "compilador.Pascal.caseStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cOfKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCaseListElementAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCaseListElementCaseListElementParserRuleCall_3_0 = (RuleCall)cCaseListElementAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cSemicolonKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cCaseListElement1Assignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cCaseListElement1CaseListElementParserRuleCall_4_1_0 = (RuleCall)cCaseListElement1Assignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cElseKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cStatementsAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cStatementsStatementsParserRuleCall_5_2_0 = (RuleCall)cStatementsAssignment_5_2.eContents().get(0);
		private final Keyword cEndKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//caseStatement:
		//	"case" expression=expression "of" caseListElement=caseListElement (";" caseListElement1+=caseListElement)* (";"
		//	"else" statements=statements)? "end";
		@Override public ParserRule getRule() { return rule; }
		
		//"case" expression=expression "of" caseListElement=caseListElement (";" caseListElement1+=caseListElement)* (";" "else"
		//statements=statements)? "end"
		public Group getGroup() { return cGroup; }
		
		//"case"
		public Keyword getCaseKeyword_0() { return cCaseKeyword_0; }
		
		//expression=expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
		
		//"of"
		public Keyword getOfKeyword_2() { return cOfKeyword_2; }
		
		//caseListElement=caseListElement
		public Assignment getCaseListElementAssignment_3() { return cCaseListElementAssignment_3; }
		
		//caseListElement
		public RuleCall getCaseListElementCaseListElementParserRuleCall_3_0() { return cCaseListElementCaseListElementParserRuleCall_3_0; }
		
		//(";" caseListElement1+=caseListElement)*
		public Group getGroup_4() { return cGroup_4; }
		
		//";"
		public Keyword getSemicolonKeyword_4_0() { return cSemicolonKeyword_4_0; }
		
		//caseListElement1+=caseListElement
		public Assignment getCaseListElement1Assignment_4_1() { return cCaseListElement1Assignment_4_1; }
		
		//caseListElement
		public RuleCall getCaseListElement1CaseListElementParserRuleCall_4_1_0() { return cCaseListElement1CaseListElementParserRuleCall_4_1_0; }
		
		//(";" "else" statements=statements)?
		public Group getGroup_5() { return cGroup_5; }
		
		//";"
		public Keyword getSemicolonKeyword_5_0() { return cSemicolonKeyword_5_0; }
		
		//"else"
		public Keyword getElseKeyword_5_1() { return cElseKeyword_5_1; }
		
		//statements=statements
		public Assignment getStatementsAssignment_5_2() { return cStatementsAssignment_5_2; }
		
		//statements
		public RuleCall getStatementsStatementsParserRuleCall_5_2_0() { return cStatementsStatementsParserRuleCall_5_2_0; }
		
		//"end"
		public Keyword getEndKeyword_6() { return cEndKeyword_6; }
	}
	public class CaseListElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "compilador.Pascal.caseListElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConstListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConstListConstListParserRuleCall_0_0 = (RuleCall)cConstListAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementStatementParserRuleCall_2_0 = (RuleCall)cStatementAssignment_2.eContents().get(0);
		
		//caseListElement:
		//	constList=constList ":" statement=statement;
		@Override public ParserRule getRule() { return rule; }
		
		//constList=constList ":" statement=statement
		public Group getGroup() { return cGroup; }
		
		//constList=constList
		public Assignment getConstListAssignment_0() { return cConstListAssignment_0; }
		
		//constList
		public RuleCall getConstListConstListParserRuleCall_0_0() { return cConstListConstListParserRuleCall_0_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//statement=statement
		public Assignment getStatementAssignment_2() { return cStatementAssignment_2; }
		
		//statement
		public RuleCall getStatementStatementParserRuleCall_2_0() { return cStatementStatementParserRuleCall_2_0; }
	}
	
	
	private final PascalElements pPascal;
	private final ProgramElements pProgram;
	private final ProgramHeadingElements pProgramHeading;
	private final IdentifierListElements pIdentifierList;
	private final IdentifierElements pIdentifier;
	private final BlockElements pBlock;
	private final Label_declaration_partElements pLabel_declaration_part;
	private final LabelElements pLabel;
	private final UnsignedIntegerElements pUnsignedInteger;
	private final ConstantDefinitionPartElements pConstantDefinitionPart;
	private final ConstantDefinitionElements pConstantDefinition;
	private final ConstantElements pConstant;
	private final ConstantChrElements pConstantChr;
	private final UnsignedNumberElements pUnsignedNumber;
	private final UnsignedRealElements pUnsignedReal;
	private final SignElements pSign;
	private final UsesUnitsPartElements pUsesUnitsPart;
	private final TypeDefinitionPartElements pTypeDefinitionPart;
	private final TypeDefinitionElements pTypeDefinition;
	private final FunctionTypeElements pFunctionType;
	private final ResultTypeElements pResultType;
	private final FormalParameterListElements pFormalParameterList;
	private final FormalParameterSectionElements pFormalParameterSection;
	private final ParameterGroupElements pParameterGroup;
	private final TypeIdentifierElements pTypeIdentifier;
	private final ProcedureTypeElements pProcedureType;
	private final TypeElements pType;
	private final PointerTypeElements pPointerType;
	private final SimpleTypeElements pSimpleType;
	private final ScalarTypeElements pScalarType;
	private final SubrangeTypeElements pSubrangeType;
	private final StructuredTypeElements pStructuredType;
	private final UnpackedStructuredTypeElements pUnpackedStructuredType;
	private final StringtypeElements pStringtype;
	private final RecordTypeElements pRecordType;
	private final FieldListElements pFieldList;
	private final FixedPartElements pFixedPart;
	private final RecordSectionElements pRecordSection;
	private final VariantPartElements pVariantPart;
	private final TagElements pTag;
	private final VariantElements pVariant;
	private final ConstListElements pConstList;
	private final VariableDeclarationPartElements pVariableDeclarationPart;
	private final VariableDeclarationElements pVariableDeclaration;
	private final ProcedureAndFunctionDeclarationPartElements pProcedureAndFunctionDeclarationPart;
	private final ProcedureOrFunctionDeclarationElements pProcedureOrFunctionDeclaration;
	private final ProcedureDeclarationElements pProcedureDeclaration;
	private final FunctionDeclarationElements pFunctionDeclaration;
	private final StatementElements pStatement;
	private final UnlabelledStatementElements pUnlabelledStatement;
	private final SimpleStatementElements pSimpleStatement;
	private final AssignmentStatementElements pAssignmentStatement;
	private final VariableElements pVariable;
	private final ExpressionElements pExpression;
	private final RelationaloperatorElements pRelationaloperator;
	private final SimpleExpressionElements pSimpleExpression;
	private final AdditiveoperatorElements pAdditiveoperator;
	private final TermElements pTerm;
	private final MultiplicativeoperatorElements pMultiplicativeoperator;
	private final SignedFactorElements pSignedFactor;
	private final FactorElements pFactor;
	private final UnsignedConstantElements pUnsignedConstant;
	private final FunctionDesignatorElements pFunctionDesignator;
	private final ParameterListElements pParameterList;
	private final ActualParameterElements pActualParameter;
	private final GotoStatementElements pGotoStatement;
	private final StructuredStatementElements pStructuredStatement;
	private final CompoundStatementElements pCompoundStatement;
	private final StatementsElements pStatements;
	private final ConditionalStatementElements pConditionalStatement;
	private final CaseStatementElements pCaseStatement;
	private final CaseListElementElements pCaseListElement;
	private final TerminalRule tBOOL;
	private final TerminalRule tIDENT;
	private final TerminalRule tSTRING_LITERAL;
	private final TerminalRule tEXPONENT;
	private final TerminalRule tNUM;
	private final TerminalRule tNUM_REAL;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public PascalGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pPascal = new PascalElements();
		this.pProgram = new ProgramElements();
		this.pProgramHeading = new ProgramHeadingElements();
		this.pIdentifierList = new IdentifierListElements();
		this.pIdentifier = new IdentifierElements();
		this.pBlock = new BlockElements();
		this.pLabel_declaration_part = new Label_declaration_partElements();
		this.pLabel = new LabelElements();
		this.pUnsignedInteger = new UnsignedIntegerElements();
		this.pConstantDefinitionPart = new ConstantDefinitionPartElements();
		this.pConstantDefinition = new ConstantDefinitionElements();
		this.pConstant = new ConstantElements();
		this.pConstantChr = new ConstantChrElements();
		this.pUnsignedNumber = new UnsignedNumberElements();
		this.pUnsignedReal = new UnsignedRealElements();
		this.pSign = new SignElements();
		this.pUsesUnitsPart = new UsesUnitsPartElements();
		this.pTypeDefinitionPart = new TypeDefinitionPartElements();
		this.pTypeDefinition = new TypeDefinitionElements();
		this.pFunctionType = new FunctionTypeElements();
		this.pResultType = new ResultTypeElements();
		this.pFormalParameterList = new FormalParameterListElements();
		this.pFormalParameterSection = new FormalParameterSectionElements();
		this.pParameterGroup = new ParameterGroupElements();
		this.pTypeIdentifier = new TypeIdentifierElements();
		this.pProcedureType = new ProcedureTypeElements();
		this.pType = new TypeElements();
		this.pPointerType = new PointerTypeElements();
		this.pSimpleType = new SimpleTypeElements();
		this.pScalarType = new ScalarTypeElements();
		this.pSubrangeType = new SubrangeTypeElements();
		this.pStructuredType = new StructuredTypeElements();
		this.pUnpackedStructuredType = new UnpackedStructuredTypeElements();
		this.pStringtype = new StringtypeElements();
		this.pRecordType = new RecordTypeElements();
		this.pFieldList = new FieldListElements();
		this.pFixedPart = new FixedPartElements();
		this.pRecordSection = new RecordSectionElements();
		this.pVariantPart = new VariantPartElements();
		this.pTag = new TagElements();
		this.pVariant = new VariantElements();
		this.pConstList = new ConstListElements();
		this.pVariableDeclarationPart = new VariableDeclarationPartElements();
		this.pVariableDeclaration = new VariableDeclarationElements();
		this.pProcedureAndFunctionDeclarationPart = new ProcedureAndFunctionDeclarationPartElements();
		this.pProcedureOrFunctionDeclaration = new ProcedureOrFunctionDeclarationElements();
		this.pProcedureDeclaration = new ProcedureDeclarationElements();
		this.pFunctionDeclaration = new FunctionDeclarationElements();
		this.pStatement = new StatementElements();
		this.pUnlabelledStatement = new UnlabelledStatementElements();
		this.pSimpleStatement = new SimpleStatementElements();
		this.pAssignmentStatement = new AssignmentStatementElements();
		this.pVariable = new VariableElements();
		this.pExpression = new ExpressionElements();
		this.pRelationaloperator = new RelationaloperatorElements();
		this.pSimpleExpression = new SimpleExpressionElements();
		this.pAdditiveoperator = new AdditiveoperatorElements();
		this.pTerm = new TermElements();
		this.pMultiplicativeoperator = new MultiplicativeoperatorElements();
		this.pSignedFactor = new SignedFactorElements();
		this.pFactor = new FactorElements();
		this.pUnsignedConstant = new UnsignedConstantElements();
		this.pFunctionDesignator = new FunctionDesignatorElements();
		this.pParameterList = new ParameterListElements();
		this.pActualParameter = new ActualParameterElements();
		this.pGotoStatement = new GotoStatementElements();
		this.pStructuredStatement = new StructuredStatementElements();
		this.pCompoundStatement = new CompoundStatementElements();
		this.pStatements = new StatementsElements();
		this.pConditionalStatement = new ConditionalStatementElements();
		this.pCaseStatement = new CaseStatementElements();
		this.pCaseListElement = new CaseListElementElements();
		this.tBOOL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "compilador.Pascal.BOOL");
		this.tIDENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "compilador.Pascal.IDENT");
		this.tSTRING_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "compilador.Pascal.STRING_LITERAL");
		this.tEXPONENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "compilador.Pascal.EXPONENT");
		this.tNUM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "compilador.Pascal.NUM");
		this.tNUM_REAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "compilador.Pascal.NUM_REAL");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("compilador.Pascal".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//pascal:
	//	program+=program;
	public PascalElements getPascalAccess() {
		return pPascal;
	}
	
	public ParserRule getPascalRule() {
		return getPascalAccess().getRule();
	}
	
	//program:
	//	head=programHeading "interface"? block=block ".";
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//programHeading:
	//	"program" identifer=identifier ("(" identifierList=identifierList ")")? ";";
	public ProgramHeadingElements getProgramHeadingAccess() {
		return pProgramHeading;
	}
	
	public ParserRule getProgramHeadingRule() {
		return getProgramHeadingAccess().getRule();
	}
	
	//identifierList:
	//	{identifierList} identifier=identifier ("," identifierList1+=identifier)*;
	public IdentifierListElements getIdentifierListAccess() {
		return pIdentifierList;
	}
	
	public ParserRule getIdentifierListRule() {
		return getIdentifierListAccess().getRule();
	}
	
	//identifier:
	//	identifier=IDENT;
	public IdentifierElements getIdentifierAccess() {
		return pIdentifier;
	}
	
	public ParserRule getIdentifierRule() {
		return getIdentifierAccess().getRule();
	}
	
	////
	//// )*	compoundStatement;
	//block:
	//	{block} (label+=label_declaration_part | constantDefinitionPart+=constantDefinitionPart |
	//	typeDefinitionPart+=typeDefinitionPart | variableDeclarationPart+=variableDeclarationPart |
	//	procedureAndFunctionDeclarationPart+=procedureAndFunctionDeclarationPart | usesUnitsPart+=usesUnitsPart |
	//	"implemetation")* compoundStatement=compoundStatement;
	public BlockElements getBlockAccess() {
		return pBlock;
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}
	
	//label_declaration_part:
	//	"label" label ("," label+=label)* ";";
	public Label_declaration_partElements getLabel_declaration_partAccess() {
		return pLabel_declaration_part;
	}
	
	public ParserRule getLabel_declaration_partRule() {
		return getLabel_declaration_partAccess().getRule();
	}
	
	//label:
	//	unsignedInteger=unsignedInteger | identifier=identifier;
	public LabelElements getLabelAccess() {
		return pLabel;
	}
	
	public ParserRule getLabelRule() {
		return getLabelAccess().getRule();
	}
	
	//unsignedInteger:
	//	number=NUM;
	public UnsignedIntegerElements getUnsignedIntegerAccess() {
		return pUnsignedInteger;
	}
	
	public ParserRule getUnsignedIntegerRule() {
		return getUnsignedIntegerAccess().getRule();
	}
	
	//constantDefinitionPart:
	//	"const" (constantDefinition+=constantDefinition ";")+;
	public ConstantDefinitionPartElements getConstantDefinitionPartAccess() {
		return pConstantDefinitionPart;
	}
	
	public ParserRule getConstantDefinitionPartRule() {
		return getConstantDefinitionPartAccess().getRule();
	}
	
	////
	//constantDefinition:
	//	identifier=identifier "=" constant=constant;
	public ConstantDefinitionElements getConstantDefinitionAccess() {
		return pConstantDefinition;
	}
	
	public ParserRule getConstantDefinitionRule() {
		return getConstantDefinitionAccess().getRule();
	}
	
	////
	//////STRING_LITERAL
	//constant:
	//	number=unsignedNumber | sign=sign number1=unsignedNumber | identifier=identifier | STRING_LITERAL=STRING_LITERAL |
	//	sign2+=sign identifier1+=identifier | constantChr=constantChr;
	public ConstantElements getConstantAccess() {
		return pConstant;
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}
	
	//constantChr:
	//	"chr" "(" unsignedInteger=unsignedInteger ")";
	public ConstantChrElements getConstantChrAccess() {
		return pConstantChr;
	}
	
	public ParserRule getConstantChrRule() {
		return getConstantChrAccess().getRule();
	}
	
	//unsignedNumber:
	//	unsignedInteger=unsignedInteger | unsignedReal=unsignedReal;
	public UnsignedNumberElements getUnsignedNumberAccess() {
		return pUnsignedNumber;
	}
	
	public ParserRule getUnsignedNumberRule() {
		return getUnsignedNumberAccess().getRule();
	}
	
	//unsignedReal:
	//	NUM_REAL;
	public UnsignedRealElements getUnsignedRealAccess() {
		return pUnsignedReal;
	}
	
	public ParserRule getUnsignedRealRule() {
		return getUnsignedRealAccess().getRule();
	}
	
	//sign:
	//	"+" | "-";
	public SignElements getSignAccess() {
		return pSign;
	}
	
	public ParserRule getSignRule() {
		return getSignAccess().getRule();
	}
	
	//usesUnitsPart:
	//	"uses" identifierList=identifierList ";";
	public UsesUnitsPartElements getUsesUnitsPartAccess() {
		return pUsesUnitsPart;
	}
	
	public ParserRule getUsesUnitsPartRule() {
		return getUsesUnitsPartAccess().getRule();
	}
	
	//typeDefinitionPart:
	//	"type" typeDefinition=typeDefinition typeDefinition1+=typeDefinition* ";";
	public TypeDefinitionPartElements getTypeDefinitionPartAccess() {
		return pTypeDefinitionPart;
	}
	
	public ParserRule getTypeDefinitionPartRule() {
		return getTypeDefinitionPartAccess().getRule();
	}
	
	//typeDefinition:
	//	indentifier+=identifier "=" (type=type | functionType=functionType | procedureType=procedureType);
	public TypeDefinitionElements getTypeDefinitionAccess() {
		return pTypeDefinition;
	}
	
	public ParserRule getTypeDefinitionRule() {
		return getTypeDefinitionAccess().getRule();
	}
	
	//functionType:
	//	"function" formalParameterList=formalParameterList? ":" resultType=resultType;
	public FunctionTypeElements getFunctionTypeAccess() {
		return pFunctionType;
	}
	
	public ParserRule getFunctionTypeRule() {
		return getFunctionTypeAccess().getRule();
	}
	
	//resultType:
	//	typeIdentifier;
	public ResultTypeElements getResultTypeAccess() {
		return pResultType;
	}
	
	public ParserRule getResultTypeRule() {
		return getResultTypeAccess().getRule();
	}
	
	//formalParameterList:
	//	"(" formalParameterSection=formalParameterSection (";" formalParameterSection2+=formalParameterSection)* ")";
	public FormalParameterListElements getFormalParameterListAccess() {
		return pFormalParameterList;
	}
	
	public ParserRule getFormalParameterListRule() {
		return getFormalParameterListAccess().getRule();
	}
	
	//formalParameterSection:
	//	parameterGroup=parameterGroup | "var" parameterGroup2+=parameterGroup | "function" parameterGroup3+=parameterGroup
	//	| "procedure" parameterGroup4+=parameterGroup;
	public FormalParameterSectionElements getFormalParameterSectionAccess() {
		return pFormalParameterSection;
	}
	
	public ParserRule getFormalParameterSectionRule() {
		return getFormalParameterSectionAccess().getRule();
	}
	
	//parameterGroup:
	//	identifierList=identifierList ":" typeIdentifier=typeIdentifier;
	public ParameterGroupElements getParameterGroupAccess() {
		return pParameterGroup;
	}
	
	public ParserRule getParameterGroupRule() {
		return getParameterGroupAccess().getRule();
	}
	
	//typeIdentifier:
	//	identifier=identifier | char="char" | boolean="boolean" | integer="integer" | real="real" | string="string";
	public TypeIdentifierElements getTypeIdentifierAccess() {
		return pTypeIdentifier;
	}
	
	public ParserRule getTypeIdentifierRule() {
		return getTypeIdentifierAccess().getRule();
	}
	
	//procedureType:
	//	{procedureType} "procedure" formalParameterList=formalParameterList?;
	public ProcedureTypeElements getProcedureTypeAccess() {
		return pProcedureType;
	}
	
	public ParserRule getProcedureTypeRule() {
		return getProcedureTypeAccess().getRule();
	}
	
	//type:
	//	simpleType=simpleType | structuredType=structuredType | pointerType=pointerType;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//pointerType:
	//	"^" typeIdentifier=typeIdentifier;
	public PointerTypeElements getPointerTypeAccess() {
		return pPointerType;
	}
	
	public ParserRule getPointerTypeRule() {
		return getPointerTypeAccess().getRule();
	}
	
	//simpleType:
	//	scalarType=scalarType | subrangeType=subrangeType | typeIdentifier=typeIdentifier | stringtype=stringtype;
	public SimpleTypeElements getSimpleTypeAccess() {
		return pSimpleType;
	}
	
	public ParserRule getSimpleTypeRule() {
		return getSimpleTypeAccess().getRule();
	}
	
	//scalarType:
	//	"(" identifierList=identifierList ")";
	public ScalarTypeElements getScalarTypeAccess() {
		return pScalarType;
	}
	
	public ParserRule getScalarTypeRule() {
		return getScalarTypeAccess().getRule();
	}
	
	//subrangeType:
	//	constant=constant ".." constant2=constant;
	public SubrangeTypeElements getSubrangeTypeAccess() {
		return pSubrangeType;
	}
	
	public ParserRule getSubrangeTypeRule() {
		return getSubrangeTypeAccess().getRule();
	}
	
	//structuredType:
	//	"packed" unpackedStructuredType=unpackedStructuredType
	//	| unpackedStructuredType1+=unpackedStructuredType;
	public StructuredTypeElements getStructuredTypeAccess() {
		return pStructuredType;
	}
	
	public ParserRule getStructuredTypeRule() {
		return getStructuredTypeAccess().getRule();
	}
	
	//unpackedStructuredType:
	//	recordType=recordType;
	public UnpackedStructuredTypeElements getUnpackedStructuredTypeAccess() {
		return pUnpackedStructuredType;
	}
	
	public ParserRule getUnpackedStructuredTypeRule() {
		return getUnpackedStructuredTypeAccess().getRule();
	}
	
	//stringtype:
	//	"string" "[" (identifier=identifier | unsignedNumber=unsignedNumber) "]";
	public StringtypeElements getStringtypeAccess() {
		return pStringtype;
	}
	
	public ParserRule getStringtypeRule() {
		return getStringtypeAccess().getRule();
	}
	
	//recordType:
	//	{recordType} "record" fieldList=fieldList? "end";
	public RecordTypeElements getRecordTypeAccess() {
		return pRecordType;
	}
	
	public ParserRule getRecordTypeRule() {
		return getRecordTypeAccess().getRule();
	}
	
	//fieldList:
	//	fixedPart=fixedPart (";" variantPart=variantPart)?
	//	| variantPart1+=variantPart;
	public FieldListElements getFieldListAccess() {
		return pFieldList;
	}
	
	public ParserRule getFieldListRule() {
		return getFieldListAccess().getRule();
	}
	
	//fixedPart:
	//	recordSection=recordSection (";" recordSection1+=recordSection)*;
	public FixedPartElements getFixedPartAccess() {
		return pFixedPart;
	}
	
	public ParserRule getFixedPartRule() {
		return getFixedPartAccess().getRule();
	}
	
	//recordSection:
	//	identifierList=identifierList ":" type=type;
	public RecordSectionElements getRecordSectionAccess() {
		return pRecordSection;
	}
	
	public ParserRule getRecordSectionRule() {
		return getRecordSectionAccess().getRule();
	}
	
	//variantPart:
	//	"case" tag=tag "of" variant=variant (";" variant1+=variant)*;
	public VariantPartElements getVariantPartAccess() {
		return pVariantPart;
	}
	
	public ParserRule getVariantPartRule() {
		return getVariantPartAccess().getRule();
	}
	
	//tag:
	//	identifier=identifier ":" typeIdentifier=typeIdentifier
	//	| typeIdentifier1+=typeIdentifier;
	public TagElements getTagAccess() {
		return pTag;
	}
	
	public ParserRule getTagRule() {
		return getTagAccess().getRule();
	}
	
	//variant:
	//	constant (":" constant+=constant)* ":" "(" fieldList=fieldList ")";
	public VariantElements getVariantAccess() {
		return pVariant;
	}
	
	public ParserRule getVariantRule() {
		return getVariantAccess().getRule();
	}
	
	//constList:
	//	constant=constant (":" constant1+=constant)*;
	public ConstListElements getConstListAccess() {
		return pConstList;
	}
	
	public ParserRule getConstListRule() {
		return getConstListAccess().getRule();
	}
	
	//variableDeclarationPart:
	//	"var" variableDeclaration=variableDeclaration (";" variableDeclaration1+=variableDeclaration)* ";";
	public VariableDeclarationPartElements getVariableDeclarationPartAccess() {
		return pVariableDeclarationPart;
	}
	
	public ParserRule getVariableDeclarationPartRule() {
		return getVariableDeclarationPartAccess().getRule();
	}
	
	//variableDeclaration:
	//	identifierList=identifierList ":" type=type ("=" expression=expression)?;
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return pVariableDeclaration;
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}
	
	//procedureAndFunctionDeclarationPart:
	//	procedureOrFunctionDeclaration=procedureOrFunctionDeclaration ";";
	public ProcedureAndFunctionDeclarationPartElements getProcedureAndFunctionDeclarationPartAccess() {
		return pProcedureAndFunctionDeclarationPart;
	}
	
	public ParserRule getProcedureAndFunctionDeclarationPartRule() {
		return getProcedureAndFunctionDeclarationPartAccess().getRule();
	}
	
	//procedureOrFunctionDeclaration:
	//	procedureDeclaration=procedureDeclaration | functionDeclaration=functionDeclaration;
	public ProcedureOrFunctionDeclarationElements getProcedureOrFunctionDeclarationAccess() {
		return pProcedureOrFunctionDeclaration;
	}
	
	public ParserRule getProcedureOrFunctionDeclarationRule() {
		return getProcedureOrFunctionDeclarationAccess().getRule();
	}
	
	//procedureDeclaration:
	//	"procedure" identifier=identifier formalParameterList=formalParameterList? ";" block=block;
	public ProcedureDeclarationElements getProcedureDeclarationAccess() {
		return pProcedureDeclaration;
	}
	
	public ParserRule getProcedureDeclarationRule() {
		return getProcedureDeclarationAccess().getRule();
	}
	
	//functionDeclaration:
	//	"function" identifier=identifier formalParameterList=formalParameterList? ":" resultType=resultType ";" block=block;
	public FunctionDeclarationElements getFunctionDeclarationAccess() {
		return pFunctionDeclaration;
	}
	
	public ParserRule getFunctionDeclarationRule() {
		return getFunctionDeclarationAccess().getRule();
	}
	
	//statement:
	//	label ":" unlabelledStatement=unlabelledStatement | unlabelledStatement=unlabelledStatement;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	////
	//unlabelledStatement:
	//	simpleStatement=simpleStatement | structuredStatement=structuredStatement | identifier=identifier ("("
	//	parameterList=parameterList ")")?;
	public UnlabelledStatementElements getUnlabelledStatementAccess() {
		return pUnlabelledStatement;
	}
	
	public ParserRule getUnlabelledStatementRule() {
		return getUnlabelledStatementAccess().getRule();
	}
	
	//////assignmentStatement | procedureStatement  -->  
	//simpleStatement:
	//	{simpleStatement} (gotoStatement=gotoStatement | assignmentStatement=assignmentStatement)?;
	public SimpleStatementElements getSimpleStatementAccess() {
		return pSimpleStatement;
	}
	
	public ParserRule getSimpleStatementRule() {
		return getSimpleStatementAccess().getRule();
	}
	
	//assignmentStatement:
	//	variable=variable ":=" expression=expression;
	public AssignmentStatementElements getAssignmentStatementAccess() {
		return pAssignmentStatement;
	}
	
	public ParserRule getAssignmentStatementRule() {
		return getAssignmentStatementAccess().getRule();
	}
	
	//variable:
	//	("@" identifier=identifier | identifier=identifier) ("[" expression+=expression ("," expression1+=expression)* "]" |
	//	"(." expression2+=expression ("," expression3+=expression)* ".)" | "." identifier2+=identifier | "^")*;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	////
	//expression:
	//	simpleExpression=simpleExpression (relationaloperator=relationaloperator expression=expression)?;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//relationaloperator:
	//	"=" | "<>" | "<" | "<=" | ">=" | ">" | "in";
	public RelationaloperatorElements getRelationaloperatorAccess() {
		return pRelationaloperator;
	}
	
	public ParserRule getRelationaloperatorRule() {
		return getRelationaloperatorAccess().getRule();
	}
	
	//simpleExpression:
	//	term=term (additiveoperator=additiveoperator simpleExpression=simpleExpression)?;
	public SimpleExpressionElements getSimpleExpressionAccess() {
		return pSimpleExpression;
	}
	
	public ParserRule getSimpleExpressionRule() {
		return getSimpleExpressionAccess().getRule();
	}
	
	//additiveoperator:
	//	"+" | "-" | "or";
	public AdditiveoperatorElements getAdditiveoperatorAccess() {
		return pAdditiveoperator;
	}
	
	public ParserRule getAdditiveoperatorRule() {
		return getAdditiveoperatorAccess().getRule();
	}
	
	//term:
	//	signedFactor=signedFactor (multiplicativeoperator=multiplicativeoperator term=term)?;
	public TermElements getTermAccess() {
		return pTerm;
	}
	
	public ParserRule getTermRule() {
		return getTermAccess().getRule();
	}
	
	//multiplicativeoperator:
	//	"*" | "/" | "div" | "mod" | "and";
	public MultiplicativeoperatorElements getMultiplicativeoperatorAccess() {
		return pMultiplicativeoperator;
	}
	
	public ParserRule getMultiplicativeoperatorRule() {
		return getMultiplicativeoperatorAccess().getRule();
	}
	
	//signedFactor:
	//	("+" | "-")? factor=factor;
	public SignedFactorElements getSignedFactorAccess() {
		return pSignedFactor;
	}
	
	public ParserRule getSignedFactorRule() {
		return getSignedFactorAccess().getRule();
	}
	
	//factor:
	//	"(" expression=expression ")" | unsignedConstant=unsignedConstant | "not" factor=factor | bool=BOOL |
	//	functionDesignator=functionDesignator | variable=variable;
	public FactorElements getFactorAccess() {
		return pFactor;
	}
	
	public ParserRule getFactorRule() {
		return getFactorAccess().getRule();
	}
	
	//unsignedConstant:
	//	unsignedNumber=unsignedNumber | string_literal=STRING_LITERAL | constantChr=constantChr | {unsignedConstant} "nil";
	public UnsignedConstantElements getUnsignedConstantAccess() {
		return pUnsignedConstant;
	}
	
	public ParserRule getUnsignedConstantRule() {
		return getUnsignedConstantAccess().getRule();
	}
	
	//functionDesignator:
	//	identifier=identifier "(" parameterList=parameterList ")";
	public FunctionDesignatorElements getFunctionDesignatorAccess() {
		return pFunctionDesignator;
	}
	
	public ParserRule getFunctionDesignatorRule() {
		return getFunctionDesignatorAccess().getRule();
	}
	
	//parameterList:
	//	actualParameter ("," actualParameter+=actualParameter)*;
	public ParameterListElements getParameterListAccess() {
		return pParameterList;
	}
	
	public ParserRule getParameterListRule() {
		return getParameterListAccess().getRule();
	}
	
	//actualParameter:
	//	expression=expression;
	public ActualParameterElements getActualParameterAccess() {
		return pActualParameter;
	}
	
	public ParserRule getActualParameterRule() {
		return getActualParameterAccess().getRule();
	}
	
	//gotoStatement:
	//	"goto" label=label;
	public GotoStatementElements getGotoStatementAccess() {
		return pGotoStatement;
	}
	
	public ParserRule getGotoStatementRule() {
		return getGotoStatementAccess().getRule();
	}
	
	//structuredStatement:
	//	compoundStatement=compoundStatement | conditionalStatement=conditionalStatement;
	public StructuredStatementElements getStructuredStatementAccess() {
		return pStructuredStatement;
	}
	
	public ParserRule getStructuredStatementRule() {
		return getStructuredStatementAccess().getRule();
	}
	
	//compoundStatement:
	//	"begin" statements "end";
	public CompoundStatementElements getCompoundStatementAccess() {
		return pCompoundStatement;
	}
	
	public ParserRule getCompoundStatementRule() {
		return getCompoundStatementAccess().getRule();
	}
	
	//statements:
	//	statement+=statement (";" statement+=statement)*;
	public StatementsElements getStatementsAccess() {
		return pStatements;
	}
	
	public ParserRule getStatementsRule() {
		return getStatementsAccess().getRule();
	}
	
	//conditionalStatement:
	//	caseStatement=caseStatement;
	public ConditionalStatementElements getConditionalStatementAccess() {
		return pConditionalStatement;
	}
	
	public ParserRule getConditionalStatementRule() {
		return getConditionalStatementAccess().getRule();
	}
	
	//caseStatement:
	//	"case" expression=expression "of" caseListElement=caseListElement (";" caseListElement1+=caseListElement)* (";"
	//	"else" statements=statements)? "end";
	public CaseStatementElements getCaseStatementAccess() {
		return pCaseStatement;
	}
	
	public ParserRule getCaseStatementRule() {
		return getCaseStatementAccess().getRule();
	}
	
	//caseListElement:
	//	constList=constList ":" statement=statement;
	public CaseListElementElements getCaseListElementAccess() {
		return pCaseListElement;
	}
	
	public ParserRule getCaseListElementRule() {
		return getCaseListElementAccess().getRule();
	}
	
	//terminal BOOL:
	//	"true" | "false";
	public TerminalRule getBOOLRule() {
		return tBOOL;
	}
	
	//terminal IDENT:
	//	('a'..'z' | 'A'..'Z') ('a'..'z' | 'A'..'Z' | NUM | '_')*;
	public TerminalRule getIDENTRule() {
		return tIDENT;
	}
	
	//terminal STRING_LITERAL:
	//	'"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | '"'))* '"' |
	//	"'" ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | "'"))* "'";
	public TerminalRule getSTRING_LITERALRule() {
		return tSTRING_LITERAL;
	}
	
	//terminal fragment EXPONENT:
	//	'e' ('+' | '-')? NUM+;
	public TerminalRule getEXPONENTRule() {
		return tEXPONENT;
	}
	
	//terminal NUM:
	//	'0'..'9'+;
	public TerminalRule getNUMRule() {
		return tNUM;
	}
	
	//terminal NUM_REAL:
	//	NUM+ ('.' NUM+ EXPONENT?);
	public TerminalRule getNUM_REALRule() {
		return tNUM_REAL;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
