/*
 * generated by Xtext 2.15.0
 */
grammar InternalPascal;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package compilador.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package compilador.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import compilador.services.PascalGrammarAccess;

}
@parser::members {
	private PascalGrammarAccess grammarAccess;

	public void setGrammarAccess(PascalGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRulepascal
entryRulepascal
:
{ before(grammarAccess.getPascalRule()); }
	 rulepascal
{ after(grammarAccess.getPascalRule()); } 
	 EOF 
;

// Rule pascal
rulepascal 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPascalAccess().getProgramAssignment()); }
		(rule__Pascal__ProgramAssignment)
		{ after(grammarAccess.getPascalAccess().getProgramAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleprogram
entryRuleprogram
:
{ before(grammarAccess.getProgramRule()); }
	 ruleprogram
{ after(grammarAccess.getProgramRule()); } 
	 EOF 
;

// Rule program
ruleprogram 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProgramAccess().getGroup()); }
		(rule__Program__Group__0)
		{ after(grammarAccess.getProgramAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleprogramHeading
entryRuleprogramHeading
:
{ before(grammarAccess.getProgramHeadingRule()); }
	 ruleprogramHeading
{ after(grammarAccess.getProgramHeadingRule()); } 
	 EOF 
;

// Rule programHeading
ruleprogramHeading 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProgramHeadingAccess().getGroup()); }
		(rule__ProgramHeading__Group__0)
		{ after(grammarAccess.getProgramHeadingAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleidentifierList
entryRuleidentifierList
:
{ before(grammarAccess.getIdentifierListRule()); }
	 ruleidentifierList
{ after(grammarAccess.getIdentifierListRule()); } 
	 EOF 
;

// Rule identifierList
ruleidentifierList 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIdentifierListAccess().getGroup()); }
		(rule__IdentifierList__Group__0)
		{ after(grammarAccess.getIdentifierListAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleidentifier
entryRuleidentifier
:
{ before(grammarAccess.getIdentifierRule()); }
	 ruleidentifier
{ after(grammarAccess.getIdentifierRule()); } 
	 EOF 
;

// Rule identifier
ruleidentifier 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIdentifierAccess().getIdentifierAssignment()); }
		(rule__Identifier__IdentifierAssignment)
		{ after(grammarAccess.getIdentifierAccess().getIdentifierAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleblock
entryRuleblock
:
{ before(grammarAccess.getBlockRule()); }
	 ruleblock
{ after(grammarAccess.getBlockRule()); } 
	 EOF 
;

// Rule block
ruleblock 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBlockAccess().getGroup()); }
		(rule__Block__Group__0)
		{ after(grammarAccess.getBlockAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulelabel_declaration_part
entryRulelabel_declaration_part
:
{ before(grammarAccess.getLabel_declaration_partRule()); }
	 rulelabel_declaration_part
{ after(grammarAccess.getLabel_declaration_partRule()); } 
	 EOF 
;

// Rule label_declaration_part
rulelabel_declaration_part 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLabel_declaration_partAccess().getGroup()); }
		(rule__Label_declaration_part__Group__0)
		{ after(grammarAccess.getLabel_declaration_partAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulelabel
entryRulelabel
:
{ before(grammarAccess.getLabelRule()); }
	 rulelabel
{ after(grammarAccess.getLabelRule()); } 
	 EOF 
;

// Rule label
rulelabel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLabelAccess().getAlternatives()); }
		(rule__Label__Alternatives)
		{ after(grammarAccess.getLabelAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleunsignedInteger
entryRuleunsignedInteger
:
{ before(grammarAccess.getUnsignedIntegerRule()); }
	 ruleunsignedInteger
{ after(grammarAccess.getUnsignedIntegerRule()); } 
	 EOF 
;

// Rule unsignedInteger
ruleunsignedInteger 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUnsignedIntegerAccess().getNumberAssignment()); }
		(rule__UnsignedInteger__NumberAssignment)
		{ after(grammarAccess.getUnsignedIntegerAccess().getNumberAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleconstantDefinitionPart
entryRuleconstantDefinitionPart
:
{ before(grammarAccess.getConstantDefinitionPartRule()); }
	 ruleconstantDefinitionPart
{ after(grammarAccess.getConstantDefinitionPartRule()); } 
	 EOF 
;

// Rule constantDefinitionPart
ruleconstantDefinitionPart 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConstantDefinitionPartAccess().getGroup()); }
		(rule__ConstantDefinitionPart__Group__0)
		{ after(grammarAccess.getConstantDefinitionPartAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleconstantDefinition
entryRuleconstantDefinition
:
{ before(grammarAccess.getConstantDefinitionRule()); }
	 ruleconstantDefinition
{ after(grammarAccess.getConstantDefinitionRule()); } 
	 EOF 
;

// Rule constantDefinition
ruleconstantDefinition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConstantDefinitionAccess().getGroup()); }
		(rule__ConstantDefinition__Group__0)
		{ after(grammarAccess.getConstantDefinitionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleconstant
entryRuleconstant
:
{ before(grammarAccess.getConstantRule()); }
	 ruleconstant
{ after(grammarAccess.getConstantRule()); } 
	 EOF 
;

// Rule constant
ruleconstant 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConstantAccess().getAlternatives()); }
		(rule__Constant__Alternatives)
		{ after(grammarAccess.getConstantAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleconstantChr
entryRuleconstantChr
:
{ before(grammarAccess.getConstantChrRule()); }
	 ruleconstantChr
{ after(grammarAccess.getConstantChrRule()); } 
	 EOF 
;

// Rule constantChr
ruleconstantChr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConstantChrAccess().getGroup()); }
		(rule__ConstantChr__Group__0)
		{ after(grammarAccess.getConstantChrAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleunsignedNumber
entryRuleunsignedNumber
:
{ before(grammarAccess.getUnsignedNumberRule()); }
	 ruleunsignedNumber
{ after(grammarAccess.getUnsignedNumberRule()); } 
	 EOF 
;

// Rule unsignedNumber
ruleunsignedNumber 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUnsignedNumberAccess().getAlternatives()); }
		(rule__UnsignedNumber__Alternatives)
		{ after(grammarAccess.getUnsignedNumberAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleunsignedReal
entryRuleunsignedReal
:
{ before(grammarAccess.getUnsignedRealRule()); }
	 ruleunsignedReal
{ after(grammarAccess.getUnsignedRealRule()); } 
	 EOF 
;

// Rule unsignedReal
ruleunsignedReal 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUnsignedRealAccess().getNUM_REALTerminalRuleCall()); }
		RULE_NUM_REAL
		{ after(grammarAccess.getUnsignedRealAccess().getNUM_REALTerminalRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulesign
entryRulesign
:
{ before(grammarAccess.getSignRule()); }
	 rulesign
{ after(grammarAccess.getSignRule()); } 
	 EOF 
;

// Rule sign
rulesign 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSignAccess().getAlternatives()); }
		(rule__Sign__Alternatives)
		{ after(grammarAccess.getSignAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleusesUnitsPart
entryRuleusesUnitsPart
:
{ before(grammarAccess.getUsesUnitsPartRule()); }
	 ruleusesUnitsPart
{ after(grammarAccess.getUsesUnitsPartRule()); } 
	 EOF 
;

// Rule usesUnitsPart
ruleusesUnitsPart 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUsesUnitsPartAccess().getGroup()); }
		(rule__UsesUnitsPart__Group__0)
		{ after(grammarAccess.getUsesUnitsPartAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuletypeDefinitionPart
entryRuletypeDefinitionPart
:
{ before(grammarAccess.getTypeDefinitionPartRule()); }
	 ruletypeDefinitionPart
{ after(grammarAccess.getTypeDefinitionPartRule()); } 
	 EOF 
;

// Rule typeDefinitionPart
ruletypeDefinitionPart 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypeDefinitionPartAccess().getGroup()); }
		(rule__TypeDefinitionPart__Group__0)
		{ after(grammarAccess.getTypeDefinitionPartAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuletypeDefinition
entryRuletypeDefinition
:
{ before(grammarAccess.getTypeDefinitionRule()); }
	 ruletypeDefinition
{ after(grammarAccess.getTypeDefinitionRule()); } 
	 EOF 
;

// Rule typeDefinition
ruletypeDefinition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypeDefinitionAccess().getGroup()); }
		(rule__TypeDefinition__Group__0)
		{ after(grammarAccess.getTypeDefinitionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulefunctionType
entryRulefunctionType
:
{ before(grammarAccess.getFunctionTypeRule()); }
	 rulefunctionType
{ after(grammarAccess.getFunctionTypeRule()); } 
	 EOF 
;

// Rule functionType
rulefunctionType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionTypeAccess().getGroup()); }
		(rule__FunctionType__Group__0)
		{ after(grammarAccess.getFunctionTypeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleresultType
entryRuleresultType
:
{ before(grammarAccess.getResultTypeRule()); }
	 ruleresultType
{ after(grammarAccess.getResultTypeRule()); } 
	 EOF 
;

// Rule resultType
ruleresultType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getResultTypeAccess().getTypeIdentifierParserRuleCall()); }
		ruletypeIdentifier
		{ after(grammarAccess.getResultTypeAccess().getTypeIdentifierParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleformalParameterList
entryRuleformalParameterList
:
{ before(grammarAccess.getFormalParameterListRule()); }
	 ruleformalParameterList
{ after(grammarAccess.getFormalParameterListRule()); } 
	 EOF 
;

// Rule formalParameterList
ruleformalParameterList 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFormalParameterListAccess().getGroup()); }
		(rule__FormalParameterList__Group__0)
		{ after(grammarAccess.getFormalParameterListAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleformalParameterSection
entryRuleformalParameterSection
:
{ before(grammarAccess.getFormalParameterSectionRule()); }
	 ruleformalParameterSection
{ after(grammarAccess.getFormalParameterSectionRule()); } 
	 EOF 
;

// Rule formalParameterSection
ruleformalParameterSection 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFormalParameterSectionAccess().getAlternatives()); }
		(rule__FormalParameterSection__Alternatives)
		{ after(grammarAccess.getFormalParameterSectionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleparameterGroup
entryRuleparameterGroup
:
{ before(grammarAccess.getParameterGroupRule()); }
	 ruleparameterGroup
{ after(grammarAccess.getParameterGroupRule()); } 
	 EOF 
;

// Rule parameterGroup
ruleparameterGroup 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParameterGroupAccess().getGroup()); }
		(rule__ParameterGroup__Group__0)
		{ after(grammarAccess.getParameterGroupAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuletypeIdentifier
entryRuletypeIdentifier
:
{ before(grammarAccess.getTypeIdentifierRule()); }
	 ruletypeIdentifier
{ after(grammarAccess.getTypeIdentifierRule()); } 
	 EOF 
;

// Rule typeIdentifier
ruletypeIdentifier 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypeIdentifierAccess().getAlternatives()); }
		(rule__TypeIdentifier__Alternatives)
		{ after(grammarAccess.getTypeIdentifierAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleprocedureType
entryRuleprocedureType
:
{ before(grammarAccess.getProcedureTypeRule()); }
	 ruleprocedureType
{ after(grammarAccess.getProcedureTypeRule()); } 
	 EOF 
;

// Rule procedureType
ruleprocedureType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProcedureTypeAccess().getGroup()); }
		(rule__ProcedureType__Group__0)
		{ after(grammarAccess.getProcedureTypeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuletype
entryRuletype
:
{ before(grammarAccess.getTypeRule()); }
	 ruletype
{ after(grammarAccess.getTypeRule()); } 
	 EOF 
;

// Rule type
ruletype 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypeAccess().getAlternatives()); }
		(rule__Type__Alternatives)
		{ after(grammarAccess.getTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulepointerType
entryRulepointerType
:
{ before(grammarAccess.getPointerTypeRule()); }
	 rulepointerType
{ after(grammarAccess.getPointerTypeRule()); } 
	 EOF 
;

// Rule pointerType
rulepointerType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPointerTypeAccess().getGroup()); }
		(rule__PointerType__Group__0)
		{ after(grammarAccess.getPointerTypeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulesimpleType
entryRulesimpleType
:
{ before(grammarAccess.getSimpleTypeRule()); }
	 rulesimpleType
{ after(grammarAccess.getSimpleTypeRule()); } 
	 EOF 
;

// Rule simpleType
rulesimpleType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSimpleTypeAccess().getAlternatives()); }
		(rule__SimpleType__Alternatives)
		{ after(grammarAccess.getSimpleTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulescalarType
entryRulescalarType
:
{ before(grammarAccess.getScalarTypeRule()); }
	 rulescalarType
{ after(grammarAccess.getScalarTypeRule()); } 
	 EOF 
;

// Rule scalarType
rulescalarType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getScalarTypeAccess().getGroup()); }
		(rule__ScalarType__Group__0)
		{ after(grammarAccess.getScalarTypeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulesubrangeType
entryRulesubrangeType
:
{ before(grammarAccess.getSubrangeTypeRule()); }
	 rulesubrangeType
{ after(grammarAccess.getSubrangeTypeRule()); } 
	 EOF 
;

// Rule subrangeType
rulesubrangeType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSubrangeTypeAccess().getGroup()); }
		(rule__SubrangeType__Group__0)
		{ after(grammarAccess.getSubrangeTypeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulestructuredType
entryRulestructuredType
:
{ before(grammarAccess.getStructuredTypeRule()); }
	 rulestructuredType
{ after(grammarAccess.getStructuredTypeRule()); } 
	 EOF 
;

// Rule structuredType
rulestructuredType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStructuredTypeAccess().getAlternatives()); }
		(rule__StructuredType__Alternatives)
		{ after(grammarAccess.getStructuredTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleunpackedStructuredType
entryRuleunpackedStructuredType
:
{ before(grammarAccess.getUnpackedStructuredTypeRule()); }
	 ruleunpackedStructuredType
{ after(grammarAccess.getUnpackedStructuredTypeRule()); } 
	 EOF 
;

// Rule unpackedStructuredType
ruleunpackedStructuredType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUnpackedStructuredTypeAccess().getRecordTypeAssignment()); }
		(rule__UnpackedStructuredType__RecordTypeAssignment)
		{ after(grammarAccess.getUnpackedStructuredTypeAccess().getRecordTypeAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulestringtype
entryRulestringtype
:
{ before(grammarAccess.getStringtypeRule()); }
	 rulestringtype
{ after(grammarAccess.getStringtypeRule()); } 
	 EOF 
;

// Rule stringtype
rulestringtype 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStringtypeAccess().getGroup()); }
		(rule__Stringtype__Group__0)
		{ after(grammarAccess.getStringtypeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulerecordType
entryRulerecordType
:
{ before(grammarAccess.getRecordTypeRule()); }
	 rulerecordType
{ after(grammarAccess.getRecordTypeRule()); } 
	 EOF 
;

// Rule recordType
rulerecordType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRecordTypeAccess().getGroup()); }
		(rule__RecordType__Group__0)
		{ after(grammarAccess.getRecordTypeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulefieldList
entryRulefieldList
:
{ before(grammarAccess.getFieldListRule()); }
	 rulefieldList
{ after(grammarAccess.getFieldListRule()); } 
	 EOF 
;

// Rule fieldList
rulefieldList 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFieldListAccess().getAlternatives()); }
		(rule__FieldList__Alternatives)
		{ after(grammarAccess.getFieldListAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulefixedPart
entryRulefixedPart
:
{ before(grammarAccess.getFixedPartRule()); }
	 rulefixedPart
{ after(grammarAccess.getFixedPartRule()); } 
	 EOF 
;

// Rule fixedPart
rulefixedPart 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFixedPartAccess().getGroup()); }
		(rule__FixedPart__Group__0)
		{ after(grammarAccess.getFixedPartAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulerecordSection
entryRulerecordSection
:
{ before(grammarAccess.getRecordSectionRule()); }
	 rulerecordSection
{ after(grammarAccess.getRecordSectionRule()); } 
	 EOF 
;

// Rule recordSection
rulerecordSection 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRecordSectionAccess().getGroup()); }
		(rule__RecordSection__Group__0)
		{ after(grammarAccess.getRecordSectionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulevariantPart
entryRulevariantPart
:
{ before(grammarAccess.getVariantPartRule()); }
	 rulevariantPart
{ after(grammarAccess.getVariantPartRule()); } 
	 EOF 
;

// Rule variantPart
rulevariantPart 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariantPartAccess().getGroup()); }
		(rule__VariantPart__Group__0)
		{ after(grammarAccess.getVariantPartAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuletag
entryRuletag
:
{ before(grammarAccess.getTagRule()); }
	 ruletag
{ after(grammarAccess.getTagRule()); } 
	 EOF 
;

// Rule tag
ruletag 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTagAccess().getAlternatives()); }
		(rule__Tag__Alternatives)
		{ after(grammarAccess.getTagAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulevariant
entryRulevariant
:
{ before(grammarAccess.getVariantRule()); }
	 rulevariant
{ after(grammarAccess.getVariantRule()); } 
	 EOF 
;

// Rule variant
rulevariant 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariantAccess().getGroup()); }
		(rule__Variant__Group__0)
		{ after(grammarAccess.getVariantAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleconstList
entryRuleconstList
:
{ before(grammarAccess.getConstListRule()); }
	 ruleconstList
{ after(grammarAccess.getConstListRule()); } 
	 EOF 
;

// Rule constList
ruleconstList 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConstListAccess().getGroup()); }
		(rule__ConstList__Group__0)
		{ after(grammarAccess.getConstListAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulevariableDeclarationPart
entryRulevariableDeclarationPart
:
{ before(grammarAccess.getVariableDeclarationPartRule()); }
	 rulevariableDeclarationPart
{ after(grammarAccess.getVariableDeclarationPartRule()); } 
	 EOF 
;

// Rule variableDeclarationPart
rulevariableDeclarationPart 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableDeclarationPartAccess().getGroup()); }
		(rule__VariableDeclarationPart__Group__0)
		{ after(grammarAccess.getVariableDeclarationPartAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulevariableDeclaration
entryRulevariableDeclaration
:
{ before(grammarAccess.getVariableDeclarationRule()); }
	 rulevariableDeclaration
{ after(grammarAccess.getVariableDeclarationRule()); } 
	 EOF 
;

// Rule variableDeclaration
rulevariableDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableDeclarationAccess().getGroup()); }
		(rule__VariableDeclaration__Group__0)
		{ after(grammarAccess.getVariableDeclarationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleprocedureAndFunctionDeclarationPart
entryRuleprocedureAndFunctionDeclarationPart
:
{ before(grammarAccess.getProcedureAndFunctionDeclarationPartRule()); }
	 ruleprocedureAndFunctionDeclarationPart
{ after(grammarAccess.getProcedureAndFunctionDeclarationPartRule()); } 
	 EOF 
;

// Rule procedureAndFunctionDeclarationPart
ruleprocedureAndFunctionDeclarationPart 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProcedureAndFunctionDeclarationPartAccess().getGroup()); }
		(rule__ProcedureAndFunctionDeclarationPart__Group__0)
		{ after(grammarAccess.getProcedureAndFunctionDeclarationPartAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleprocedureOrFunctionDeclaration
entryRuleprocedureOrFunctionDeclaration
:
{ before(grammarAccess.getProcedureOrFunctionDeclarationRule()); }
	 ruleprocedureOrFunctionDeclaration
{ after(grammarAccess.getProcedureOrFunctionDeclarationRule()); } 
	 EOF 
;

// Rule procedureOrFunctionDeclaration
ruleprocedureOrFunctionDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProcedureOrFunctionDeclarationAccess().getAlternatives()); }
		(rule__ProcedureOrFunctionDeclaration__Alternatives)
		{ after(grammarAccess.getProcedureOrFunctionDeclarationAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleprocedureDeclaration
entryRuleprocedureDeclaration
:
{ before(grammarAccess.getProcedureDeclarationRule()); }
	 ruleprocedureDeclaration
{ after(grammarAccess.getProcedureDeclarationRule()); } 
	 EOF 
;

// Rule procedureDeclaration
ruleprocedureDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProcedureDeclarationAccess().getGroup()); }
		(rule__ProcedureDeclaration__Group__0)
		{ after(grammarAccess.getProcedureDeclarationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulefunctionDeclaration
entryRulefunctionDeclaration
:
{ before(grammarAccess.getFunctionDeclarationRule()); }
	 rulefunctionDeclaration
{ after(grammarAccess.getFunctionDeclarationRule()); } 
	 EOF 
;

// Rule functionDeclaration
rulefunctionDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionDeclarationAccess().getGroup()); }
		(rule__FunctionDeclaration__Group__0)
		{ after(grammarAccess.getFunctionDeclarationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulestatement
entryRulestatement
:
{ before(grammarAccess.getStatementRule()); }
	 rulestatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule statement
rulestatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStatementAccess().getAlternatives()); }
		(rule__Statement__Alternatives)
		{ after(grammarAccess.getStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleunlabelledStatement
entryRuleunlabelledStatement
:
{ before(grammarAccess.getUnlabelledStatementRule()); }
	 ruleunlabelledStatement
{ after(grammarAccess.getUnlabelledStatementRule()); } 
	 EOF 
;

// Rule unlabelledStatement
ruleunlabelledStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUnlabelledStatementAccess().getAlternatives()); }
		(rule__UnlabelledStatement__Alternatives)
		{ after(grammarAccess.getUnlabelledStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulesimpleStatement
entryRulesimpleStatement
:
{ before(grammarAccess.getSimpleStatementRule()); }
	 rulesimpleStatement
{ after(grammarAccess.getSimpleStatementRule()); } 
	 EOF 
;

// Rule simpleStatement
rulesimpleStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSimpleStatementAccess().getGroup()); }
		(rule__SimpleStatement__Group__0)
		{ after(grammarAccess.getSimpleStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleassignmentStatement
entryRuleassignmentStatement
:
{ before(grammarAccess.getAssignmentStatementRule()); }
	 ruleassignmentStatement
{ after(grammarAccess.getAssignmentStatementRule()); } 
	 EOF 
;

// Rule assignmentStatement
ruleassignmentStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAssignmentStatementAccess().getGroup()); }
		(rule__AssignmentStatement__Group__0)
		{ after(grammarAccess.getAssignmentStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulevariable
entryRulevariable
:
{ before(grammarAccess.getVariableRule()); }
	 rulevariable
{ after(grammarAccess.getVariableRule()); } 
	 EOF 
;

// Rule variable
rulevariable 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableAccess().getGroup()); }
		(rule__Variable__Group__0)
		{ after(grammarAccess.getVariableAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleexpression
entryRuleexpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleexpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule expression
ruleexpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getGroup()); }
		(rule__Expression__Group__0)
		{ after(grammarAccess.getExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulerelationaloperator
entryRulerelationaloperator
:
{ before(grammarAccess.getRelationaloperatorRule()); }
	 rulerelationaloperator
{ after(grammarAccess.getRelationaloperatorRule()); } 
	 EOF 
;

// Rule relationaloperator
rulerelationaloperator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRelationaloperatorAccess().getAlternatives()); }
		(rule__Relationaloperator__Alternatives)
		{ after(grammarAccess.getRelationaloperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulesimpleExpression
entryRulesimpleExpression
:
{ before(grammarAccess.getSimpleExpressionRule()); }
	 rulesimpleExpression
{ after(grammarAccess.getSimpleExpressionRule()); } 
	 EOF 
;

// Rule simpleExpression
rulesimpleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSimpleExpressionAccess().getGroup()); }
		(rule__SimpleExpression__Group__0)
		{ after(grammarAccess.getSimpleExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleadditiveoperator
entryRuleadditiveoperator
:
{ before(grammarAccess.getAdditiveoperatorRule()); }
	 ruleadditiveoperator
{ after(grammarAccess.getAdditiveoperatorRule()); } 
	 EOF 
;

// Rule additiveoperator
ruleadditiveoperator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAdditiveoperatorAccess().getAlternatives()); }
		(rule__Additiveoperator__Alternatives)
		{ after(grammarAccess.getAdditiveoperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleterm
entryRuleterm
:
{ before(grammarAccess.getTermRule()); }
	 ruleterm
{ after(grammarAccess.getTermRule()); } 
	 EOF 
;

// Rule term
ruleterm 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTermAccess().getGroup()); }
		(rule__Term__Group__0)
		{ after(grammarAccess.getTermAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulemultiplicativeoperator
entryRulemultiplicativeoperator
:
{ before(grammarAccess.getMultiplicativeoperatorRule()); }
	 rulemultiplicativeoperator
{ after(grammarAccess.getMultiplicativeoperatorRule()); } 
	 EOF 
;

// Rule multiplicativeoperator
rulemultiplicativeoperator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMultiplicativeoperatorAccess().getAlternatives()); }
		(rule__Multiplicativeoperator__Alternatives)
		{ after(grammarAccess.getMultiplicativeoperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulesignedFactor
entryRulesignedFactor
:
{ before(grammarAccess.getSignedFactorRule()); }
	 rulesignedFactor
{ after(grammarAccess.getSignedFactorRule()); } 
	 EOF 
;

// Rule signedFactor
rulesignedFactor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSignedFactorAccess().getGroup()); }
		(rule__SignedFactor__Group__0)
		{ after(grammarAccess.getSignedFactorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulefactor
entryRulefactor
:
{ before(grammarAccess.getFactorRule()); }
	 rulefactor
{ after(grammarAccess.getFactorRule()); } 
	 EOF 
;

// Rule factor
rulefactor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFactorAccess().getAlternatives()); }
		(rule__Factor__Alternatives)
		{ after(grammarAccess.getFactorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleunsignedConstant
entryRuleunsignedConstant
:
{ before(grammarAccess.getUnsignedConstantRule()); }
	 ruleunsignedConstant
{ after(grammarAccess.getUnsignedConstantRule()); } 
	 EOF 
;

// Rule unsignedConstant
ruleunsignedConstant 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUnsignedConstantAccess().getAlternatives()); }
		(rule__UnsignedConstant__Alternatives)
		{ after(grammarAccess.getUnsignedConstantAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulefunctionDesignator
entryRulefunctionDesignator
:
{ before(grammarAccess.getFunctionDesignatorRule()); }
	 rulefunctionDesignator
{ after(grammarAccess.getFunctionDesignatorRule()); } 
	 EOF 
;

// Rule functionDesignator
rulefunctionDesignator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionDesignatorAccess().getGroup()); }
		(rule__FunctionDesignator__Group__0)
		{ after(grammarAccess.getFunctionDesignatorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleparameterList
entryRuleparameterList
:
{ before(grammarAccess.getParameterListRule()); }
	 ruleparameterList
{ after(grammarAccess.getParameterListRule()); } 
	 EOF 
;

// Rule parameterList
ruleparameterList 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParameterListAccess().getGroup()); }
		(rule__ParameterList__Group__0)
		{ after(grammarAccess.getParameterListAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleactualParameter
entryRuleactualParameter
:
{ before(grammarAccess.getActualParameterRule()); }
	 ruleactualParameter
{ after(grammarAccess.getActualParameterRule()); } 
	 EOF 
;

// Rule actualParameter
ruleactualParameter 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getActualParameterAccess().getExpressionAssignment()); }
		(rule__ActualParameter__ExpressionAssignment)
		{ after(grammarAccess.getActualParameterAccess().getExpressionAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulegotoStatement
entryRulegotoStatement
:
{ before(grammarAccess.getGotoStatementRule()); }
	 rulegotoStatement
{ after(grammarAccess.getGotoStatementRule()); } 
	 EOF 
;

// Rule gotoStatement
rulegotoStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGotoStatementAccess().getGroup()); }
		(rule__GotoStatement__Group__0)
		{ after(grammarAccess.getGotoStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulestructuredStatement
entryRulestructuredStatement
:
{ before(grammarAccess.getStructuredStatementRule()); }
	 rulestructuredStatement
{ after(grammarAccess.getStructuredStatementRule()); } 
	 EOF 
;

// Rule structuredStatement
rulestructuredStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStructuredStatementAccess().getAlternatives()); }
		(rule__StructuredStatement__Alternatives)
		{ after(grammarAccess.getStructuredStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulecompoundStatement
entryRulecompoundStatement
:
{ before(grammarAccess.getCompoundStatementRule()); }
	 rulecompoundStatement
{ after(grammarAccess.getCompoundStatementRule()); } 
	 EOF 
;

// Rule compoundStatement
rulecompoundStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCompoundStatementAccess().getGroup()); }
		(rule__CompoundStatement__Group__0)
		{ after(grammarAccess.getCompoundStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulestatements
entryRulestatements
:
{ before(grammarAccess.getStatementsRule()); }
	 rulestatements
{ after(grammarAccess.getStatementsRule()); } 
	 EOF 
;

// Rule statements
rulestatements 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStatementsAccess().getGroup()); }
		(rule__Statements__Group__0)
		{ after(grammarAccess.getStatementsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleconditionalStatement
entryRuleconditionalStatement
:
{ before(grammarAccess.getConditionalStatementRule()); }
	 ruleconditionalStatement
{ after(grammarAccess.getConditionalStatementRule()); } 
	 EOF 
;

// Rule conditionalStatement
ruleconditionalStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConditionalStatementAccess().getCaseStatementAssignment()); }
		(rule__ConditionalStatement__CaseStatementAssignment)
		{ after(grammarAccess.getConditionalStatementAccess().getCaseStatementAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulecaseStatement
entryRulecaseStatement
:
{ before(grammarAccess.getCaseStatementRule()); }
	 rulecaseStatement
{ after(grammarAccess.getCaseStatementRule()); } 
	 EOF 
;

// Rule caseStatement
rulecaseStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCaseStatementAccess().getGroup()); }
		(rule__CaseStatement__Group__0)
		{ after(grammarAccess.getCaseStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulecaseListElement
entryRulecaseListElement
:
{ before(grammarAccess.getCaseListElementRule()); }
	 rulecaseListElement
{ after(grammarAccess.getCaseListElementRule()); } 
	 EOF 
;

// Rule caseListElement
rulecaseListElement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCaseListElementAccess().getGroup()); }
		(rule__CaseListElement__Group__0)
		{ after(grammarAccess.getCaseListElementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBlockAccess().getLabelAssignment_1_0()); }
		(rule__Block__LabelAssignment_1_0)
		{ after(grammarAccess.getBlockAccess().getLabelAssignment_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getBlockAccess().getConstantDefinitionPartAssignment_1_1()); }
		(rule__Block__ConstantDefinitionPartAssignment_1_1)
		{ after(grammarAccess.getBlockAccess().getConstantDefinitionPartAssignment_1_1()); }
	)
	|
	(
		{ before(grammarAccess.getBlockAccess().getTypeDefinitionPartAssignment_1_2()); }
		(rule__Block__TypeDefinitionPartAssignment_1_2)
		{ after(grammarAccess.getBlockAccess().getTypeDefinitionPartAssignment_1_2()); }
	)
	|
	(
		{ before(grammarAccess.getBlockAccess().getVariableDeclarationPartAssignment_1_3()); }
		(rule__Block__VariableDeclarationPartAssignment_1_3)
		{ after(grammarAccess.getBlockAccess().getVariableDeclarationPartAssignment_1_3()); }
	)
	|
	(
		{ before(grammarAccess.getBlockAccess().getProcedureAndFunctionDeclarationPartAssignment_1_4()); }
		(rule__Block__ProcedureAndFunctionDeclarationPartAssignment_1_4)
		{ after(grammarAccess.getBlockAccess().getProcedureAndFunctionDeclarationPartAssignment_1_4()); }
	)
	|
	(
		{ before(grammarAccess.getBlockAccess().getUsesUnitsPartAssignment_1_5()); }
		(rule__Block__UsesUnitsPartAssignment_1_5)
		{ after(grammarAccess.getBlockAccess().getUsesUnitsPartAssignment_1_5()); }
	)
	|
	(
		{ before(grammarAccess.getBlockAccess().getImplemetationKeyword_1_6()); }
		'implemetation'
		{ after(grammarAccess.getBlockAccess().getImplemetationKeyword_1_6()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Label__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLabelAccess().getUnsignedIntegerAssignment_0()); }
		(rule__Label__UnsignedIntegerAssignment_0)
		{ after(grammarAccess.getLabelAccess().getUnsignedIntegerAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getLabelAccess().getIdentifierAssignment_1()); }
		(rule__Label__IdentifierAssignment_1)
		{ after(grammarAccess.getLabelAccess().getIdentifierAssignment_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstantAccess().getNumberAssignment_0()); }
		(rule__Constant__NumberAssignment_0)
		{ after(grammarAccess.getConstantAccess().getNumberAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getConstantAccess().getGroup_1()); }
		(rule__Constant__Group_1__0)
		{ after(grammarAccess.getConstantAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getConstantAccess().getIdentifierAssignment_2()); }
		(rule__Constant__IdentifierAssignment_2)
		{ after(grammarAccess.getConstantAccess().getIdentifierAssignment_2()); }
	)
	|
	(
		{ before(grammarAccess.getConstantAccess().getSTRING_LITERALAssignment_3()); }
		(rule__Constant__STRING_LITERALAssignment_3)
		{ after(grammarAccess.getConstantAccess().getSTRING_LITERALAssignment_3()); }
	)
	|
	(
		{ before(grammarAccess.getConstantAccess().getGroup_4()); }
		(rule__Constant__Group_4__0)
		{ after(grammarAccess.getConstantAccess().getGroup_4()); }
	)
	|
	(
		{ before(grammarAccess.getConstantAccess().getConstantChrAssignment_5()); }
		(rule__Constant__ConstantChrAssignment_5)
		{ after(grammarAccess.getConstantAccess().getConstantChrAssignment_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnsignedNumber__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnsignedNumberAccess().getUnsignedIntegerAssignment_0()); }
		(rule__UnsignedNumber__UnsignedIntegerAssignment_0)
		{ after(grammarAccess.getUnsignedNumberAccess().getUnsignedIntegerAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getUnsignedNumberAccess().getUnsignedRealAssignment_1()); }
		(rule__UnsignedNumber__UnsignedRealAssignment_1)
		{ after(grammarAccess.getUnsignedNumberAccess().getUnsignedRealAssignment_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sign__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSignAccess().getPlusSignKeyword_0()); }
		'+'
		{ after(grammarAccess.getSignAccess().getPlusSignKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getSignAccess().getHyphenMinusKeyword_1()); }
		'-'
		{ after(grammarAccess.getSignAccess().getHyphenMinusKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDefinition__Alternatives_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeDefinitionAccess().getTypeAssignment_2_0()); }
		(rule__TypeDefinition__TypeAssignment_2_0)
		{ after(grammarAccess.getTypeDefinitionAccess().getTypeAssignment_2_0()); }
	)
	|
	(
		{ before(grammarAccess.getTypeDefinitionAccess().getFunctionTypeAssignment_2_1()); }
		(rule__TypeDefinition__FunctionTypeAssignment_2_1)
		{ after(grammarAccess.getTypeDefinitionAccess().getFunctionTypeAssignment_2_1()); }
	)
	|
	(
		{ before(grammarAccess.getTypeDefinitionAccess().getProcedureTypeAssignment_2_2()); }
		(rule__TypeDefinition__ProcedureTypeAssignment_2_2)
		{ after(grammarAccess.getTypeDefinitionAccess().getProcedureTypeAssignment_2_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FormalParameterSection__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFormalParameterSectionAccess().getParameterGroupAssignment_0()); }
		(rule__FormalParameterSection__ParameterGroupAssignment_0)
		{ after(grammarAccess.getFormalParameterSectionAccess().getParameterGroupAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getFormalParameterSectionAccess().getGroup_1()); }
		(rule__FormalParameterSection__Group_1__0)
		{ after(grammarAccess.getFormalParameterSectionAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getFormalParameterSectionAccess().getGroup_2()); }
		(rule__FormalParameterSection__Group_2__0)
		{ after(grammarAccess.getFormalParameterSectionAccess().getGroup_2()); }
	)
	|
	(
		{ before(grammarAccess.getFormalParameterSectionAccess().getGroup_3()); }
		(rule__FormalParameterSection__Group_3__0)
		{ after(grammarAccess.getFormalParameterSectionAccess().getGroup_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeIdentifier__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeIdentifierAccess().getIdentifierAssignment_0()); }
		(rule__TypeIdentifier__IdentifierAssignment_0)
		{ after(grammarAccess.getTypeIdentifierAccess().getIdentifierAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getTypeIdentifierAccess().getCharAssignment_1()); }
		(rule__TypeIdentifier__CharAssignment_1)
		{ after(grammarAccess.getTypeIdentifierAccess().getCharAssignment_1()); }
	)
	|
	(
		{ before(grammarAccess.getTypeIdentifierAccess().getBooleanAssignment_2()); }
		(rule__TypeIdentifier__BooleanAssignment_2)
		{ after(grammarAccess.getTypeIdentifierAccess().getBooleanAssignment_2()); }
	)
	|
	(
		{ before(grammarAccess.getTypeIdentifierAccess().getIntegerAssignment_3()); }
		(rule__TypeIdentifier__IntegerAssignment_3)
		{ after(grammarAccess.getTypeIdentifierAccess().getIntegerAssignment_3()); }
	)
	|
	(
		{ before(grammarAccess.getTypeIdentifierAccess().getRealAssignment_4()); }
		(rule__TypeIdentifier__RealAssignment_4)
		{ after(grammarAccess.getTypeIdentifierAccess().getRealAssignment_4()); }
	)
	|
	(
		{ before(grammarAccess.getTypeIdentifierAccess().getStringAssignment_5()); }
		(rule__TypeIdentifier__StringAssignment_5)
		{ after(grammarAccess.getTypeIdentifierAccess().getStringAssignment_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeAccess().getSimpleTypeAssignment_0()); }
		(rule__Type__SimpleTypeAssignment_0)
		{ after(grammarAccess.getTypeAccess().getSimpleTypeAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getStructuredTypeAssignment_1()); }
		(rule__Type__StructuredTypeAssignment_1)
		{ after(grammarAccess.getTypeAccess().getStructuredTypeAssignment_1()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getPointerTypeAssignment_2()); }
		(rule__Type__PointerTypeAssignment_2)
		{ after(grammarAccess.getTypeAccess().getPointerTypeAssignment_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleTypeAccess().getScalarTypeAssignment_0()); }
		(rule__SimpleType__ScalarTypeAssignment_0)
		{ after(grammarAccess.getSimpleTypeAccess().getScalarTypeAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getSimpleTypeAccess().getSubrangeTypeAssignment_1()); }
		(rule__SimpleType__SubrangeTypeAssignment_1)
		{ after(grammarAccess.getSimpleTypeAccess().getSubrangeTypeAssignment_1()); }
	)
	|
	(
		{ before(grammarAccess.getSimpleTypeAccess().getTypeIdentifierAssignment_2()); }
		(rule__SimpleType__TypeIdentifierAssignment_2)
		{ after(grammarAccess.getSimpleTypeAccess().getTypeIdentifierAssignment_2()); }
	)
	|
	(
		{ before(grammarAccess.getSimpleTypeAccess().getStringtypeAssignment_3()); }
		(rule__SimpleType__StringtypeAssignment_3)
		{ after(grammarAccess.getSimpleTypeAccess().getStringtypeAssignment_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StructuredType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStructuredTypeAccess().getGroup_0()); }
		(rule__StructuredType__Group_0__0)
		{ after(grammarAccess.getStructuredTypeAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getStructuredTypeAccess().getUnpackedStructuredType1Assignment_1()); }
		(rule__StructuredType__UnpackedStructuredType1Assignment_1)
		{ after(grammarAccess.getStructuredTypeAccess().getUnpackedStructuredType1Assignment_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Stringtype__Alternatives_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStringtypeAccess().getIdentifierAssignment_2_0()); }
		(rule__Stringtype__IdentifierAssignment_2_0)
		{ after(grammarAccess.getStringtypeAccess().getIdentifierAssignment_2_0()); }
	)
	|
	(
		{ before(grammarAccess.getStringtypeAccess().getUnsignedNumberAssignment_2_1()); }
		(rule__Stringtype__UnsignedNumberAssignment_2_1)
		{ after(grammarAccess.getStringtypeAccess().getUnsignedNumberAssignment_2_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FieldList__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFieldListAccess().getGroup_0()); }
		(rule__FieldList__Group_0__0)
		{ after(grammarAccess.getFieldListAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getFieldListAccess().getVariantPart1Assignment_1()); }
		(rule__FieldList__VariantPart1Assignment_1)
		{ after(grammarAccess.getFieldListAccess().getVariantPart1Assignment_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Tag__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTagAccess().getGroup_0()); }
		(rule__Tag__Group_0__0)
		{ after(grammarAccess.getTagAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getTagAccess().getTypeIdentifier1Assignment_1()); }
		(rule__Tag__TypeIdentifier1Assignment_1)
		{ after(grammarAccess.getTagAccess().getTypeIdentifier1Assignment_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureOrFunctionDeclaration__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProcedureOrFunctionDeclarationAccess().getProcedureDeclarationAssignment_0()); }
		(rule__ProcedureOrFunctionDeclaration__ProcedureDeclarationAssignment_0)
		{ after(grammarAccess.getProcedureOrFunctionDeclarationAccess().getProcedureDeclarationAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getProcedureOrFunctionDeclarationAccess().getFunctionDeclarationAssignment_1()); }
		(rule__ProcedureOrFunctionDeclaration__FunctionDeclarationAssignment_1)
		{ after(grammarAccess.getProcedureOrFunctionDeclarationAccess().getFunctionDeclarationAssignment_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementAccess().getGroup_0()); }
		(rule__Statement__Group_0__0)
		{ after(grammarAccess.getStatementAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getUnlabelledStatementAssignment_1()); }
		(rule__Statement__UnlabelledStatementAssignment_1)
		{ after(grammarAccess.getStatementAccess().getUnlabelledStatementAssignment_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnlabelledStatement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnlabelledStatementAccess().getSimpleStatementAssignment_0()); }
		(rule__UnlabelledStatement__SimpleStatementAssignment_0)
		{ after(grammarAccess.getUnlabelledStatementAccess().getSimpleStatementAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getUnlabelledStatementAccess().getStructuredStatementAssignment_1()); }
		(rule__UnlabelledStatement__StructuredStatementAssignment_1)
		{ after(grammarAccess.getUnlabelledStatementAccess().getStructuredStatementAssignment_1()); }
	)
	|
	(
		{ before(grammarAccess.getUnlabelledStatementAccess().getGroup_2()); }
		(rule__UnlabelledStatement__Group_2__0)
		{ after(grammarAccess.getUnlabelledStatementAccess().getGroup_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleStatement__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleStatementAccess().getGotoStatementAssignment_1_0()); }
		(rule__SimpleStatement__GotoStatementAssignment_1_0)
		{ after(grammarAccess.getSimpleStatementAccess().getGotoStatementAssignment_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getSimpleStatementAccess().getAssignmentStatementAssignment_1_1()); }
		(rule__SimpleStatement__AssignmentStatementAssignment_1_1)
		{ after(grammarAccess.getSimpleStatementAccess().getAssignmentStatementAssignment_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableAccess().getGroup_0_0()); }
		(rule__Variable__Group_0_0__0)
		{ after(grammarAccess.getVariableAccess().getGroup_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getVariableAccess().getIdentifierAssignment_0_1()); }
		(rule__Variable__IdentifierAssignment_0_1)
		{ after(grammarAccess.getVariableAccess().getIdentifierAssignment_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableAccess().getGroup_1_0()); }
		(rule__Variable__Group_1_0__0)
		{ after(grammarAccess.getVariableAccess().getGroup_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getVariableAccess().getGroup_1_1()); }
		(rule__Variable__Group_1_1__0)
		{ after(grammarAccess.getVariableAccess().getGroup_1_1()); }
	)
	|
	(
		{ before(grammarAccess.getVariableAccess().getGroup_1_2()); }
		(rule__Variable__Group_1_2__0)
		{ after(grammarAccess.getVariableAccess().getGroup_1_2()); }
	)
	|
	(
		{ before(grammarAccess.getVariableAccess().getCircumflexAccentKeyword_1_3()); }
		'^'
		{ after(grammarAccess.getVariableAccess().getCircumflexAccentKeyword_1_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Relationaloperator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationaloperatorAccess().getEqualsSignKeyword_0()); }
		'='
		{ after(grammarAccess.getRelationaloperatorAccess().getEqualsSignKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getRelationaloperatorAccess().getLessThanSignGreaterThanSignKeyword_1()); }
		'<>'
		{ after(grammarAccess.getRelationaloperatorAccess().getLessThanSignGreaterThanSignKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getRelationaloperatorAccess().getLessThanSignKeyword_2()); }
		'<'
		{ after(grammarAccess.getRelationaloperatorAccess().getLessThanSignKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getRelationaloperatorAccess().getLessThanSignEqualsSignKeyword_3()); }
		'<='
		{ after(grammarAccess.getRelationaloperatorAccess().getLessThanSignEqualsSignKeyword_3()); }
	)
	|
	(
		{ before(grammarAccess.getRelationaloperatorAccess().getGreaterThanSignEqualsSignKeyword_4()); }
		'>='
		{ after(grammarAccess.getRelationaloperatorAccess().getGreaterThanSignEqualsSignKeyword_4()); }
	)
	|
	(
		{ before(grammarAccess.getRelationaloperatorAccess().getGreaterThanSignKeyword_5()); }
		'>'
		{ after(grammarAccess.getRelationaloperatorAccess().getGreaterThanSignKeyword_5()); }
	)
	|
	(
		{ before(grammarAccess.getRelationaloperatorAccess().getInKeyword_6()); }
		'in'
		{ after(grammarAccess.getRelationaloperatorAccess().getInKeyword_6()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Additiveoperator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditiveoperatorAccess().getPlusSignKeyword_0()); }
		'+'
		{ after(grammarAccess.getAdditiveoperatorAccess().getPlusSignKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getAdditiveoperatorAccess().getHyphenMinusKeyword_1()); }
		'-'
		{ after(grammarAccess.getAdditiveoperatorAccess().getHyphenMinusKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getAdditiveoperatorAccess().getOrKeyword_2()); }
		'or'
		{ after(grammarAccess.getAdditiveoperatorAccess().getOrKeyword_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplicativeoperator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicativeoperatorAccess().getAsteriskKeyword_0()); }
		'*'
		{ after(grammarAccess.getMultiplicativeoperatorAccess().getAsteriskKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getMultiplicativeoperatorAccess().getSolidusKeyword_1()); }
		'/'
		{ after(grammarAccess.getMultiplicativeoperatorAccess().getSolidusKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getMultiplicativeoperatorAccess().getDivKeyword_2()); }
		'div'
		{ after(grammarAccess.getMultiplicativeoperatorAccess().getDivKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getMultiplicativeoperatorAccess().getModKeyword_3()); }
		'mod'
		{ after(grammarAccess.getMultiplicativeoperatorAccess().getModKeyword_3()); }
	)
	|
	(
		{ before(grammarAccess.getMultiplicativeoperatorAccess().getAndKeyword_4()); }
		'and'
		{ after(grammarAccess.getMultiplicativeoperatorAccess().getAndKeyword_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SignedFactor__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSignedFactorAccess().getPlusSignKeyword_0_0()); }
		'+'
		{ after(grammarAccess.getSignedFactorAccess().getPlusSignKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getSignedFactorAccess().getHyphenMinusKeyword_0_1()); }
		'-'
		{ after(grammarAccess.getSignedFactorAccess().getHyphenMinusKeyword_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFactorAccess().getGroup_0()); }
		(rule__Factor__Group_0__0)
		{ after(grammarAccess.getFactorAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getFactorAccess().getUnsignedConstantAssignment_1()); }
		(rule__Factor__UnsignedConstantAssignment_1)
		{ after(grammarAccess.getFactorAccess().getUnsignedConstantAssignment_1()); }
	)
	|
	(
		{ before(grammarAccess.getFactorAccess().getGroup_2()); }
		(rule__Factor__Group_2__0)
		{ after(grammarAccess.getFactorAccess().getGroup_2()); }
	)
	|
	(
		{ before(grammarAccess.getFactorAccess().getBoolAssignment_3()); }
		(rule__Factor__BoolAssignment_3)
		{ after(grammarAccess.getFactorAccess().getBoolAssignment_3()); }
	)
	|
	(
		{ before(grammarAccess.getFactorAccess().getFunctionDesignatorAssignment_4()); }
		(rule__Factor__FunctionDesignatorAssignment_4)
		{ after(grammarAccess.getFactorAccess().getFunctionDesignatorAssignment_4()); }
	)
	|
	(
		{ before(grammarAccess.getFactorAccess().getVariableAssignment_5()); }
		(rule__Factor__VariableAssignment_5)
		{ after(grammarAccess.getFactorAccess().getVariableAssignment_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnsignedConstant__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnsignedConstantAccess().getUnsignedNumberAssignment_0()); }
		(rule__UnsignedConstant__UnsignedNumberAssignment_0)
		{ after(grammarAccess.getUnsignedConstantAccess().getUnsignedNumberAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getUnsignedConstantAccess().getString_literalAssignment_1()); }
		(rule__UnsignedConstant__String_literalAssignment_1)
		{ after(grammarAccess.getUnsignedConstantAccess().getString_literalAssignment_1()); }
	)
	|
	(
		{ before(grammarAccess.getUnsignedConstantAccess().getConstantChrAssignment_2()); }
		(rule__UnsignedConstant__ConstantChrAssignment_2)
		{ after(grammarAccess.getUnsignedConstantAccess().getConstantChrAssignment_2()); }
	)
	|
	(
		{ before(grammarAccess.getUnsignedConstantAccess().getGroup_3()); }
		(rule__UnsignedConstant__Group_3__0)
		{ after(grammarAccess.getUnsignedConstantAccess().getGroup_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StructuredStatement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStructuredStatementAccess().getCompoundStatementAssignment_0()); }
		(rule__StructuredStatement__CompoundStatementAssignment_0)
		{ after(grammarAccess.getStructuredStatementAccess().getCompoundStatementAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getStructuredStatementAccess().getConditionalStatementAssignment_1()); }
		(rule__StructuredStatement__ConditionalStatementAssignment_1)
		{ after(grammarAccess.getStructuredStatementAccess().getConditionalStatementAssignment_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__0__Impl
	rule__Program__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getHeadAssignment_0()); }
	(rule__Program__HeadAssignment_0)
	{ after(grammarAccess.getProgramAccess().getHeadAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__1__Impl
	rule__Program__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getInterfaceKeyword_1()); }
	('interface')?
	{ after(grammarAccess.getProgramAccess().getInterfaceKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__2__Impl
	rule__Program__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getBlockAssignment_2()); }
	(rule__Program__BlockAssignment_2)
	{ after(grammarAccess.getProgramAccess().getBlockAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getFullStopKeyword_3()); }
	'.'
	{ after(grammarAccess.getProgramAccess().getFullStopKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ProgramHeading__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProgramHeading__Group__0__Impl
	rule__ProgramHeading__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProgramHeading__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramHeadingAccess().getProgramKeyword_0()); }
	'program'
	{ after(grammarAccess.getProgramHeadingAccess().getProgramKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProgramHeading__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProgramHeading__Group__1__Impl
	rule__ProgramHeading__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ProgramHeading__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramHeadingAccess().getIdentiferAssignment_1()); }
	(rule__ProgramHeading__IdentiferAssignment_1)
	{ after(grammarAccess.getProgramHeadingAccess().getIdentiferAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProgramHeading__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProgramHeading__Group__2__Impl
	rule__ProgramHeading__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ProgramHeading__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramHeadingAccess().getGroup_2()); }
	(rule__ProgramHeading__Group_2__0)?
	{ after(grammarAccess.getProgramHeadingAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProgramHeading__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProgramHeading__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProgramHeading__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramHeadingAccess().getSemicolonKeyword_3()); }
	';'
	{ after(grammarAccess.getProgramHeadingAccess().getSemicolonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ProgramHeading__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProgramHeading__Group_2__0__Impl
	rule__ProgramHeading__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProgramHeading__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramHeadingAccess().getLeftParenthesisKeyword_2_0()); }
	'('
	{ after(grammarAccess.getProgramHeadingAccess().getLeftParenthesisKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProgramHeading__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProgramHeading__Group_2__1__Impl
	rule__ProgramHeading__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ProgramHeading__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramHeadingAccess().getIdentifierListAssignment_2_1()); }
	(rule__ProgramHeading__IdentifierListAssignment_2_1)
	{ after(grammarAccess.getProgramHeadingAccess().getIdentifierListAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProgramHeading__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProgramHeading__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProgramHeading__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramHeadingAccess().getRightParenthesisKeyword_2_2()); }
	')'
	{ after(grammarAccess.getProgramHeadingAccess().getRightParenthesisKeyword_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IdentifierList__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IdentifierList__Group__0__Impl
	rule__IdentifierList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IdentifierList__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIdentifierListAccess().getIdentifierListAction_0()); }
	()
	{ after(grammarAccess.getIdentifierListAccess().getIdentifierListAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IdentifierList__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IdentifierList__Group__1__Impl
	rule__IdentifierList__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IdentifierList__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIdentifierListAccess().getIdentifierAssignment_1()); }
	(rule__IdentifierList__IdentifierAssignment_1)
	{ after(grammarAccess.getIdentifierListAccess().getIdentifierAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IdentifierList__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IdentifierList__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IdentifierList__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIdentifierListAccess().getGroup_2()); }
	(rule__IdentifierList__Group_2__0)*
	{ after(grammarAccess.getIdentifierListAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IdentifierList__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IdentifierList__Group_2__0__Impl
	rule__IdentifierList__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IdentifierList__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIdentifierListAccess().getCommaKeyword_2_0()); }
	','
	{ after(grammarAccess.getIdentifierListAccess().getCommaKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IdentifierList__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IdentifierList__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IdentifierList__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIdentifierListAccess().getIdentifierList1Assignment_2_1()); }
	(rule__IdentifierList__IdentifierList1Assignment_2_1)
	{ after(grammarAccess.getIdentifierListAccess().getIdentifierList1Assignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Block__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Block__Group__0__Impl
	rule__Block__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockAccess().getBlockAction_0()); }
	()
	{ after(grammarAccess.getBlockAccess().getBlockAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Block__Group__1__Impl
	rule__Block__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockAccess().getAlternatives_1()); }
	(rule__Block__Alternatives_1)*
	{ after(grammarAccess.getBlockAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Block__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockAccess().getCompoundStatementAssignment_2()); }
	(rule__Block__CompoundStatementAssignment_2)
	{ after(grammarAccess.getBlockAccess().getCompoundStatementAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Label_declaration_part__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Label_declaration_part__Group__0__Impl
	rule__Label_declaration_part__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Label_declaration_part__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLabel_declaration_partAccess().getLabelKeyword_0()); }
	'label'
	{ after(grammarAccess.getLabel_declaration_partAccess().getLabelKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Label_declaration_part__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Label_declaration_part__Group__1__Impl
	rule__Label_declaration_part__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Label_declaration_part__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLabel_declaration_partAccess().getLabelParserRuleCall_1()); }
	rulelabel
	{ after(grammarAccess.getLabel_declaration_partAccess().getLabelParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Label_declaration_part__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Label_declaration_part__Group__2__Impl
	rule__Label_declaration_part__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Label_declaration_part__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLabel_declaration_partAccess().getGroup_2()); }
	(rule__Label_declaration_part__Group_2__0)*
	{ after(grammarAccess.getLabel_declaration_partAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Label_declaration_part__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Label_declaration_part__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Label_declaration_part__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLabel_declaration_partAccess().getSemicolonKeyword_3()); }
	';'
	{ after(grammarAccess.getLabel_declaration_partAccess().getSemicolonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Label_declaration_part__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Label_declaration_part__Group_2__0__Impl
	rule__Label_declaration_part__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Label_declaration_part__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLabel_declaration_partAccess().getCommaKeyword_2_0()); }
	','
	{ after(grammarAccess.getLabel_declaration_partAccess().getCommaKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Label_declaration_part__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Label_declaration_part__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Label_declaration_part__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLabel_declaration_partAccess().getLabelAssignment_2_1()); }
	(rule__Label_declaration_part__LabelAssignment_2_1)
	{ after(grammarAccess.getLabel_declaration_partAccess().getLabelAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConstantDefinitionPart__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstantDefinitionPart__Group__0__Impl
	rule__ConstantDefinitionPart__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantDefinitionPart__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstantDefinitionPartAccess().getConstKeyword_0()); }
	'const'
	{ after(grammarAccess.getConstantDefinitionPartAccess().getConstKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantDefinitionPart__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstantDefinitionPart__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantDefinitionPart__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getConstantDefinitionPartAccess().getGroup_1()); }
		(rule__ConstantDefinitionPart__Group_1__0)
		{ after(grammarAccess.getConstantDefinitionPartAccess().getGroup_1()); }
	)
	(
		{ before(grammarAccess.getConstantDefinitionPartAccess().getGroup_1()); }
		(rule__ConstantDefinitionPart__Group_1__0)*
		{ after(grammarAccess.getConstantDefinitionPartAccess().getGroup_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConstantDefinitionPart__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstantDefinitionPart__Group_1__0__Impl
	rule__ConstantDefinitionPart__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantDefinitionPart__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstantDefinitionPartAccess().getConstantDefinitionAssignment_1_0()); }
	(rule__ConstantDefinitionPart__ConstantDefinitionAssignment_1_0)
	{ after(grammarAccess.getConstantDefinitionPartAccess().getConstantDefinitionAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantDefinitionPart__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstantDefinitionPart__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantDefinitionPart__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstantDefinitionPartAccess().getSemicolonKeyword_1_1()); }
	';'
	{ after(grammarAccess.getConstantDefinitionPartAccess().getSemicolonKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConstantDefinition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstantDefinition__Group__0__Impl
	rule__ConstantDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantDefinition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstantDefinitionAccess().getIdentifierAssignment_0()); }
	(rule__ConstantDefinition__IdentifierAssignment_0)
	{ after(grammarAccess.getConstantDefinitionAccess().getIdentifierAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantDefinition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstantDefinition__Group__1__Impl
	rule__ConstantDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantDefinition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstantDefinitionAccess().getEqualsSignKeyword_1()); }
	'='
	{ after(grammarAccess.getConstantDefinitionAccess().getEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantDefinition__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstantDefinition__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantDefinition__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstantDefinitionAccess().getConstantAssignment_2()); }
	(rule__ConstantDefinition__ConstantAssignment_2)
	{ after(grammarAccess.getConstantDefinitionAccess().getConstantAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Constant__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constant__Group_1__0__Impl
	rule__Constant__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstantAccess().getSignAssignment_1_0()); }
	(rule__Constant__SignAssignment_1_0)
	{ after(grammarAccess.getConstantAccess().getSignAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constant__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstantAccess().getNumber1Assignment_1_1()); }
	(rule__Constant__Number1Assignment_1_1)
	{ after(grammarAccess.getConstantAccess().getNumber1Assignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Constant__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constant__Group_4__0__Impl
	rule__Constant__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstantAccess().getSign2Assignment_4_0()); }
	(rule__Constant__Sign2Assignment_4_0)
	{ after(grammarAccess.getConstantAccess().getSign2Assignment_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constant__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstantAccess().getIdentifier1Assignment_4_1()); }
	(rule__Constant__Identifier1Assignment_4_1)
	{ after(grammarAccess.getConstantAccess().getIdentifier1Assignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConstantChr__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstantChr__Group__0__Impl
	rule__ConstantChr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantChr__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstantChrAccess().getChrKeyword_0()); }
	'chr'
	{ after(grammarAccess.getConstantChrAccess().getChrKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantChr__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstantChr__Group__1__Impl
	rule__ConstantChr__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantChr__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstantChrAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getConstantChrAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantChr__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstantChr__Group__2__Impl
	rule__ConstantChr__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantChr__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstantChrAccess().getUnsignedIntegerAssignment_2()); }
	(rule__ConstantChr__UnsignedIntegerAssignment_2)
	{ after(grammarAccess.getConstantChrAccess().getUnsignedIntegerAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantChr__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstantChr__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantChr__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstantChrAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getConstantChrAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__UsesUnitsPart__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UsesUnitsPart__Group__0__Impl
	rule__UsesUnitsPart__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UsesUnitsPart__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUsesUnitsPartAccess().getUsesKeyword_0()); }
	'uses'
	{ after(grammarAccess.getUsesUnitsPartAccess().getUsesKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UsesUnitsPart__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UsesUnitsPart__Group__1__Impl
	rule__UsesUnitsPart__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UsesUnitsPart__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUsesUnitsPartAccess().getIdentifierListAssignment_1()); }
	(rule__UsesUnitsPart__IdentifierListAssignment_1)
	{ after(grammarAccess.getUsesUnitsPartAccess().getIdentifierListAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UsesUnitsPart__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UsesUnitsPart__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UsesUnitsPart__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUsesUnitsPartAccess().getSemicolonKeyword_2()); }
	';'
	{ after(grammarAccess.getUsesUnitsPartAccess().getSemicolonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TypeDefinitionPart__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeDefinitionPart__Group__0__Impl
	rule__TypeDefinitionPart__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDefinitionPart__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeDefinitionPartAccess().getTypeKeyword_0()); }
	'type'
	{ after(grammarAccess.getTypeDefinitionPartAccess().getTypeKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDefinitionPart__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeDefinitionPart__Group__1__Impl
	rule__TypeDefinitionPart__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDefinitionPart__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeDefinitionPartAccess().getTypeDefinitionAssignment_1()); }
	(rule__TypeDefinitionPart__TypeDefinitionAssignment_1)
	{ after(grammarAccess.getTypeDefinitionPartAccess().getTypeDefinitionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDefinitionPart__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeDefinitionPart__Group__2__Impl
	rule__TypeDefinitionPart__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDefinitionPart__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeDefinitionPartAccess().getTypeDefinition1Assignment_2()); }
	(rule__TypeDefinitionPart__TypeDefinition1Assignment_2)*
	{ after(grammarAccess.getTypeDefinitionPartAccess().getTypeDefinition1Assignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDefinitionPart__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeDefinitionPart__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDefinitionPart__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeDefinitionPartAccess().getSemicolonKeyword_3()); }
	';'
	{ after(grammarAccess.getTypeDefinitionPartAccess().getSemicolonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TypeDefinition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeDefinition__Group__0__Impl
	rule__TypeDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDefinition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeDefinitionAccess().getIdentifierAssignment_0()); }
	(rule__TypeDefinition__IdentifierAssignment_0)
	{ after(grammarAccess.getTypeDefinitionAccess().getIdentifierAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDefinition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeDefinition__Group__1__Impl
	rule__TypeDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDefinition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeDefinitionAccess().getEqualsSignKeyword_1()); }
	'='
	{ after(grammarAccess.getTypeDefinitionAccess().getEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDefinition__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeDefinition__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDefinition__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeDefinitionAccess().getAlternatives_2()); }
	(rule__TypeDefinition__Alternatives_2)
	{ after(grammarAccess.getTypeDefinitionAccess().getAlternatives_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionType__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionType__Group__0__Impl
	rule__FunctionType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionType__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionTypeAccess().getFunctionKeyword_0()); }
	'function'
	{ after(grammarAccess.getFunctionTypeAccess().getFunctionKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionType__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionType__Group__1__Impl
	rule__FunctionType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionType__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionTypeAccess().getFormalParameterListAssignment_1()); }
	(rule__FunctionType__FormalParameterListAssignment_1)?
	{ after(grammarAccess.getFunctionTypeAccess().getFormalParameterListAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionType__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionType__Group__2__Impl
	rule__FunctionType__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionType__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionTypeAccess().getColonKeyword_2()); }
	':'
	{ after(grammarAccess.getFunctionTypeAccess().getColonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionType__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionType__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionType__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionTypeAccess().getResultTypeAssignment_3()); }
	(rule__FunctionType__ResultTypeAssignment_3)
	{ after(grammarAccess.getFunctionTypeAccess().getResultTypeAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FormalParameterList__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FormalParameterList__Group__0__Impl
	rule__FormalParameterList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FormalParameterList__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFormalParameterListAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getFormalParameterListAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FormalParameterList__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FormalParameterList__Group__1__Impl
	rule__FormalParameterList__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FormalParameterList__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFormalParameterListAccess().getFormalParameterSectionAssignment_1()); }
	(rule__FormalParameterList__FormalParameterSectionAssignment_1)
	{ after(grammarAccess.getFormalParameterListAccess().getFormalParameterSectionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FormalParameterList__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FormalParameterList__Group__2__Impl
	rule__FormalParameterList__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FormalParameterList__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFormalParameterListAccess().getGroup_2()); }
	(rule__FormalParameterList__Group_2__0)*
	{ after(grammarAccess.getFormalParameterListAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FormalParameterList__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FormalParameterList__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FormalParameterList__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFormalParameterListAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getFormalParameterListAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FormalParameterList__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FormalParameterList__Group_2__0__Impl
	rule__FormalParameterList__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FormalParameterList__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFormalParameterListAccess().getSemicolonKeyword_2_0()); }
	';'
	{ after(grammarAccess.getFormalParameterListAccess().getSemicolonKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FormalParameterList__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FormalParameterList__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FormalParameterList__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFormalParameterListAccess().getFormalParameterSection2Assignment_2_1()); }
	(rule__FormalParameterList__FormalParameterSection2Assignment_2_1)
	{ after(grammarAccess.getFormalParameterListAccess().getFormalParameterSection2Assignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FormalParameterSection__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FormalParameterSection__Group_1__0__Impl
	rule__FormalParameterSection__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FormalParameterSection__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFormalParameterSectionAccess().getVarKeyword_1_0()); }
	'var'
	{ after(grammarAccess.getFormalParameterSectionAccess().getVarKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FormalParameterSection__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FormalParameterSection__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FormalParameterSection__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFormalParameterSectionAccess().getParameterGroup2Assignment_1_1()); }
	(rule__FormalParameterSection__ParameterGroup2Assignment_1_1)
	{ after(grammarAccess.getFormalParameterSectionAccess().getParameterGroup2Assignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FormalParameterSection__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FormalParameterSection__Group_2__0__Impl
	rule__FormalParameterSection__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FormalParameterSection__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFormalParameterSectionAccess().getFunctionKeyword_2_0()); }
	'function'
	{ after(grammarAccess.getFormalParameterSectionAccess().getFunctionKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FormalParameterSection__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FormalParameterSection__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FormalParameterSection__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFormalParameterSectionAccess().getParameterGroup3Assignment_2_1()); }
	(rule__FormalParameterSection__ParameterGroup3Assignment_2_1)
	{ after(grammarAccess.getFormalParameterSectionAccess().getParameterGroup3Assignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FormalParameterSection__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FormalParameterSection__Group_3__0__Impl
	rule__FormalParameterSection__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FormalParameterSection__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFormalParameterSectionAccess().getProcedureKeyword_3_0()); }
	'procedure'
	{ after(grammarAccess.getFormalParameterSectionAccess().getProcedureKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FormalParameterSection__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FormalParameterSection__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FormalParameterSection__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFormalParameterSectionAccess().getParameterGroup4Assignment_3_1()); }
	(rule__FormalParameterSection__ParameterGroup4Assignment_3_1)
	{ after(grammarAccess.getFormalParameterSectionAccess().getParameterGroup4Assignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterGroup__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterGroup__Group__0__Impl
	rule__ParameterGroup__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterGroup__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterGroupAccess().getIdentifierListAssignment_0()); }
	(rule__ParameterGroup__IdentifierListAssignment_0)
	{ after(grammarAccess.getParameterGroupAccess().getIdentifierListAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterGroup__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterGroup__Group__1__Impl
	rule__ParameterGroup__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterGroup__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterGroupAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getParameterGroupAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterGroup__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterGroup__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterGroup__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterGroupAccess().getTypeIdentifierAssignment_2()); }
	(rule__ParameterGroup__TypeIdentifierAssignment_2)
	{ after(grammarAccess.getParameterGroupAccess().getTypeIdentifierAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ProcedureType__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProcedureType__Group__0__Impl
	rule__ProcedureType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureType__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcedureTypeAccess().getProcedureTypeAction_0()); }
	()
	{ after(grammarAccess.getProcedureTypeAccess().getProcedureTypeAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureType__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProcedureType__Group__1__Impl
	rule__ProcedureType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureType__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcedureTypeAccess().getProcedureKeyword_1()); }
	'procedure'
	{ after(grammarAccess.getProcedureTypeAccess().getProcedureKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureType__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProcedureType__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureType__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcedureTypeAccess().getFormalParameterListAssignment_2()); }
	(rule__ProcedureType__FormalParameterListAssignment_2)?
	{ after(grammarAccess.getProcedureTypeAccess().getFormalParameterListAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PointerType__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PointerType__Group__0__Impl
	rule__PointerType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PointerType__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPointerTypeAccess().getCircumflexAccentKeyword_0()); }
	'^'
	{ after(grammarAccess.getPointerTypeAccess().getCircumflexAccentKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PointerType__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PointerType__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PointerType__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPointerTypeAccess().getTypeIdentifierAssignment_1()); }
	(rule__PointerType__TypeIdentifierAssignment_1)
	{ after(grammarAccess.getPointerTypeAccess().getTypeIdentifierAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ScalarType__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ScalarType__Group__0__Impl
	rule__ScalarType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ScalarType__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScalarTypeAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getScalarTypeAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ScalarType__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ScalarType__Group__1__Impl
	rule__ScalarType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ScalarType__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScalarTypeAccess().getIdentifierListAssignment_1()); }
	(rule__ScalarType__IdentifierListAssignment_1)
	{ after(grammarAccess.getScalarTypeAccess().getIdentifierListAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ScalarType__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ScalarType__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ScalarType__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScalarTypeAccess().getRightParenthesisKeyword_2()); }
	')'
	{ after(grammarAccess.getScalarTypeAccess().getRightParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SubrangeType__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubrangeType__Group__0__Impl
	rule__SubrangeType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubrangeType__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubrangeTypeAccess().getConstantAssignment_0()); }
	(rule__SubrangeType__ConstantAssignment_0)
	{ after(grammarAccess.getSubrangeTypeAccess().getConstantAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubrangeType__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubrangeType__Group__1__Impl
	rule__SubrangeType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SubrangeType__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubrangeTypeAccess().getFullStopFullStopKeyword_1()); }
	'..'
	{ after(grammarAccess.getSubrangeTypeAccess().getFullStopFullStopKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubrangeType__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubrangeType__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubrangeType__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubrangeTypeAccess().getConstant2Assignment_2()); }
	(rule__SubrangeType__Constant2Assignment_2)
	{ after(grammarAccess.getSubrangeTypeAccess().getConstant2Assignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StructuredType__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StructuredType__Group_0__0__Impl
	rule__StructuredType__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StructuredType__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStructuredTypeAccess().getPackedKeyword_0_0()); }
	'packed'
	{ after(grammarAccess.getStructuredTypeAccess().getPackedKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StructuredType__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StructuredType__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StructuredType__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStructuredTypeAccess().getUnpackedStructuredTypeAssignment_0_1()); }
	(rule__StructuredType__UnpackedStructuredTypeAssignment_0_1)
	{ after(grammarAccess.getStructuredTypeAccess().getUnpackedStructuredTypeAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Stringtype__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Stringtype__Group__0__Impl
	rule__Stringtype__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Stringtype__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringtypeAccess().getStringKeyword_0()); }
	'string'
	{ after(grammarAccess.getStringtypeAccess().getStringKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Stringtype__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Stringtype__Group__1__Impl
	rule__Stringtype__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Stringtype__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringtypeAccess().getLeftSquareBracketKeyword_1()); }
	'['
	{ after(grammarAccess.getStringtypeAccess().getLeftSquareBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Stringtype__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Stringtype__Group__2__Impl
	rule__Stringtype__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Stringtype__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringtypeAccess().getAlternatives_2()); }
	(rule__Stringtype__Alternatives_2)
	{ after(grammarAccess.getStringtypeAccess().getAlternatives_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Stringtype__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Stringtype__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Stringtype__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringtypeAccess().getRightSquareBracketKeyword_3()); }
	']'
	{ after(grammarAccess.getStringtypeAccess().getRightSquareBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RecordType__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RecordType__Group__0__Impl
	rule__RecordType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordType__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRecordTypeAccess().getRecordTypeAction_0()); }
	()
	{ after(grammarAccess.getRecordTypeAccess().getRecordTypeAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordType__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RecordType__Group__1__Impl
	rule__RecordType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordType__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRecordTypeAccess().getRecordKeyword_1()); }
	'record'
	{ after(grammarAccess.getRecordTypeAccess().getRecordKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordType__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RecordType__Group__2__Impl
	rule__RecordType__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordType__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRecordTypeAccess().getFieldListAssignment_2()); }
	(rule__RecordType__FieldListAssignment_2)?
	{ after(grammarAccess.getRecordTypeAccess().getFieldListAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordType__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RecordType__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordType__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRecordTypeAccess().getEndKeyword_3()); }
	'end'
	{ after(grammarAccess.getRecordTypeAccess().getEndKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FieldList__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FieldList__Group_0__0__Impl
	rule__FieldList__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FieldList__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFieldListAccess().getFixedPartAssignment_0_0()); }
	(rule__FieldList__FixedPartAssignment_0_0)
	{ after(grammarAccess.getFieldListAccess().getFixedPartAssignment_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FieldList__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FieldList__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FieldList__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFieldListAccess().getGroup_0_1()); }
	(rule__FieldList__Group_0_1__0)?
	{ after(grammarAccess.getFieldListAccess().getGroup_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FieldList__Group_0_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FieldList__Group_0_1__0__Impl
	rule__FieldList__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FieldList__Group_0_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFieldListAccess().getSemicolonKeyword_0_1_0()); }
	';'
	{ after(grammarAccess.getFieldListAccess().getSemicolonKeyword_0_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FieldList__Group_0_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FieldList__Group_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FieldList__Group_0_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFieldListAccess().getVariantPartAssignment_0_1_1()); }
	(rule__FieldList__VariantPartAssignment_0_1_1)
	{ after(grammarAccess.getFieldListAccess().getVariantPartAssignment_0_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FixedPart__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FixedPart__Group__0__Impl
	rule__FixedPart__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FixedPart__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFixedPartAccess().getRecordSectionAssignment_0()); }
	(rule__FixedPart__RecordSectionAssignment_0)
	{ after(grammarAccess.getFixedPartAccess().getRecordSectionAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FixedPart__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FixedPart__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FixedPart__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFixedPartAccess().getGroup_1()); }
	(rule__FixedPart__Group_1__0)*
	{ after(grammarAccess.getFixedPartAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FixedPart__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FixedPart__Group_1__0__Impl
	rule__FixedPart__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FixedPart__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFixedPartAccess().getSemicolonKeyword_1_0()); }
	';'
	{ after(grammarAccess.getFixedPartAccess().getSemicolonKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FixedPart__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FixedPart__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FixedPart__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFixedPartAccess().getRecordSection1Assignment_1_1()); }
	(rule__FixedPart__RecordSection1Assignment_1_1)
	{ after(grammarAccess.getFixedPartAccess().getRecordSection1Assignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RecordSection__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RecordSection__Group__0__Impl
	rule__RecordSection__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordSection__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRecordSectionAccess().getIdentifierListAssignment_0()); }
	(rule__RecordSection__IdentifierListAssignment_0)
	{ after(grammarAccess.getRecordSectionAccess().getIdentifierListAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordSection__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RecordSection__Group__1__Impl
	rule__RecordSection__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordSection__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRecordSectionAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getRecordSectionAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordSection__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RecordSection__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordSection__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRecordSectionAccess().getTypeAssignment_2()); }
	(rule__RecordSection__TypeAssignment_2)
	{ after(grammarAccess.getRecordSectionAccess().getTypeAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VariantPart__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariantPart__Group__0__Impl
	rule__VariantPart__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariantPart__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariantPartAccess().getCaseKeyword_0()); }
	'case'
	{ after(grammarAccess.getVariantPartAccess().getCaseKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariantPart__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariantPart__Group__1__Impl
	rule__VariantPart__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VariantPart__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariantPartAccess().getTagAssignment_1()); }
	(rule__VariantPart__TagAssignment_1)
	{ after(grammarAccess.getVariantPartAccess().getTagAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariantPart__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariantPart__Group__2__Impl
	rule__VariantPart__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VariantPart__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariantPartAccess().getOfKeyword_2()); }
	'of'
	{ after(grammarAccess.getVariantPartAccess().getOfKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariantPart__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariantPart__Group__3__Impl
	rule__VariantPart__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__VariantPart__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariantPartAccess().getVariantAssignment_3()); }
	(rule__VariantPart__VariantAssignment_3)
	{ after(grammarAccess.getVariantPartAccess().getVariantAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariantPart__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariantPart__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariantPart__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariantPartAccess().getGroup_4()); }
	(rule__VariantPart__Group_4__0)*
	{ after(grammarAccess.getVariantPartAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VariantPart__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariantPart__Group_4__0__Impl
	rule__VariantPart__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariantPart__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariantPartAccess().getSemicolonKeyword_4_0()); }
	';'
	{ after(grammarAccess.getVariantPartAccess().getSemicolonKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariantPart__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariantPart__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariantPart__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariantPartAccess().getVariant1Assignment_4_1()); }
	(rule__VariantPart__Variant1Assignment_4_1)
	{ after(grammarAccess.getVariantPartAccess().getVariant1Assignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Tag__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Tag__Group_0__0__Impl
	rule__Tag__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Tag__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTagAccess().getIdentifierAssignment_0_0()); }
	(rule__Tag__IdentifierAssignment_0_0)
	{ after(grammarAccess.getTagAccess().getIdentifierAssignment_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Tag__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Tag__Group_0__1__Impl
	rule__Tag__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Tag__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTagAccess().getColonKeyword_0_1()); }
	':'
	{ after(grammarAccess.getTagAccess().getColonKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Tag__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Tag__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Tag__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTagAccess().getTypeIdentifierAssignment_0_2()); }
	(rule__Tag__TypeIdentifierAssignment_0_2)
	{ after(grammarAccess.getTagAccess().getTypeIdentifierAssignment_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Variant__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variant__Group__0__Impl
	rule__Variant__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Variant__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariantAccess().getConstantParserRuleCall_0()); }
	ruleconstant
	{ after(grammarAccess.getVariantAccess().getConstantParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variant__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variant__Group__1__Impl
	rule__Variant__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Variant__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariantAccess().getGroup_1()); }
	(rule__Variant__Group_1__0)*
	{ after(grammarAccess.getVariantAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variant__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variant__Group__2__Impl
	rule__Variant__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Variant__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariantAccess().getColonKeyword_2()); }
	':'
	{ after(grammarAccess.getVariantAccess().getColonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variant__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variant__Group__3__Impl
	rule__Variant__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Variant__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariantAccess().getLeftParenthesisKeyword_3()); }
	'('
	{ after(grammarAccess.getVariantAccess().getLeftParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variant__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variant__Group__4__Impl
	rule__Variant__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Variant__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariantAccess().getFieldListAssignment_4()); }
	(rule__Variant__FieldListAssignment_4)
	{ after(grammarAccess.getVariantAccess().getFieldListAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variant__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variant__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Variant__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariantAccess().getRightParenthesisKeyword_5()); }
	')'
	{ after(grammarAccess.getVariantAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Variant__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variant__Group_1__0__Impl
	rule__Variant__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Variant__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariantAccess().getColonKeyword_1_0()); }
	':'
	{ after(grammarAccess.getVariantAccess().getColonKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variant__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variant__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Variant__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariantAccess().getConstantAssignment_1_1()); }
	(rule__Variant__ConstantAssignment_1_1)
	{ after(grammarAccess.getVariantAccess().getConstantAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConstList__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstList__Group__0__Impl
	rule__ConstList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstList__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstListAccess().getConstantAssignment_0()); }
	(rule__ConstList__ConstantAssignment_0)
	{ after(grammarAccess.getConstListAccess().getConstantAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstList__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstList__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstListAccess().getGroup_1()); }
	(rule__ConstList__Group_1__0)*
	{ after(grammarAccess.getConstListAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConstList__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstList__Group_1__0__Impl
	rule__ConstList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstList__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstListAccess().getColonKeyword_1_0()); }
	':'
	{ after(grammarAccess.getConstListAccess().getColonKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstList__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstList__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstListAccess().getConstant1Assignment_1_1()); }
	(rule__ConstList__Constant1Assignment_1_1)
	{ after(grammarAccess.getConstListAccess().getConstant1Assignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclarationPart__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDeclarationPart__Group__0__Impl
	rule__VariableDeclarationPart__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclarationPart__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDeclarationPartAccess().getVarKeyword_0()); }
	'var'
	{ after(grammarAccess.getVariableDeclarationPartAccess().getVarKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclarationPart__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDeclarationPart__Group__1__Impl
	rule__VariableDeclarationPart__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclarationPart__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDeclarationPartAccess().getVariableDeclarationAssignment_1()); }
	(rule__VariableDeclarationPart__VariableDeclarationAssignment_1)
	{ after(grammarAccess.getVariableDeclarationPartAccess().getVariableDeclarationAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclarationPart__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDeclarationPart__Group__2__Impl
	rule__VariableDeclarationPart__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclarationPart__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDeclarationPartAccess().getGroup_2()); }
	(rule__VariableDeclarationPart__Group_2__0)*
	{ after(grammarAccess.getVariableDeclarationPartAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclarationPart__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDeclarationPart__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclarationPart__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDeclarationPartAccess().getSemicolonKeyword_3()); }
	';'
	{ after(grammarAccess.getVariableDeclarationPartAccess().getSemicolonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclarationPart__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDeclarationPart__Group_2__0__Impl
	rule__VariableDeclarationPart__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclarationPart__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDeclarationPartAccess().getSemicolonKeyword_2_0()); }
	';'
	{ after(grammarAccess.getVariableDeclarationPartAccess().getSemicolonKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclarationPart__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDeclarationPart__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclarationPart__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDeclarationPartAccess().getVariableDeclaration1Assignment_2_1()); }
	(rule__VariableDeclarationPart__VariableDeclaration1Assignment_2_1)
	{ after(grammarAccess.getVariableDeclarationPartAccess().getVariableDeclaration1Assignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDeclaration__Group__0__Impl
	rule__VariableDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDeclarationAccess().getIdentifierListAssignment_0()); }
	(rule__VariableDeclaration__IdentifierListAssignment_0)
	{ after(grammarAccess.getVariableDeclarationAccess().getIdentifierListAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDeclaration__Group__1__Impl
	rule__VariableDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDeclarationAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getVariableDeclarationAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDeclaration__Group__2__Impl
	rule__VariableDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDeclarationAccess().getTypeAssignment_2()); }
	(rule__VariableDeclaration__TypeAssignment_2)
	{ after(grammarAccess.getVariableDeclarationAccess().getTypeAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDeclaration__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDeclarationAccess().getGroup_3()); }
	(rule__VariableDeclaration__Group_3__0)?
	{ after(grammarAccess.getVariableDeclarationAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDeclaration__Group_3__0__Impl
	rule__VariableDeclaration__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDeclarationAccess().getEqualsSignKeyword_3_0()); }
	'='
	{ after(grammarAccess.getVariableDeclarationAccess().getEqualsSignKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDeclaration__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDeclarationAccess().getExpressionAssignment_3_1()); }
	(rule__VariableDeclaration__ExpressionAssignment_3_1)
	{ after(grammarAccess.getVariableDeclarationAccess().getExpressionAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ProcedureAndFunctionDeclarationPart__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProcedureAndFunctionDeclarationPart__Group__0__Impl
	rule__ProcedureAndFunctionDeclarationPart__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureAndFunctionDeclarationPart__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcedureAndFunctionDeclarationPartAccess().getProcedureOrFunctionDeclarationAssignment_0()); }
	(rule__ProcedureAndFunctionDeclarationPart__ProcedureOrFunctionDeclarationAssignment_0)
	{ after(grammarAccess.getProcedureAndFunctionDeclarationPartAccess().getProcedureOrFunctionDeclarationAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureAndFunctionDeclarationPart__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProcedureAndFunctionDeclarationPart__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureAndFunctionDeclarationPart__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcedureAndFunctionDeclarationPartAccess().getSemicolonKeyword_1()); }
	';'
	{ after(grammarAccess.getProcedureAndFunctionDeclarationPartAccess().getSemicolonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ProcedureDeclaration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProcedureDeclaration__Group__0__Impl
	rule__ProcedureDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureDeclaration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcedureDeclarationAccess().getProcedureKeyword_0()); }
	'procedure'
	{ after(grammarAccess.getProcedureDeclarationAccess().getProcedureKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureDeclaration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProcedureDeclaration__Group__1__Impl
	rule__ProcedureDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureDeclaration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcedureDeclarationAccess().getIdentifierAssignment_1()); }
	(rule__ProcedureDeclaration__IdentifierAssignment_1)
	{ after(grammarAccess.getProcedureDeclarationAccess().getIdentifierAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureDeclaration__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProcedureDeclaration__Group__2__Impl
	rule__ProcedureDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureDeclaration__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcedureDeclarationAccess().getFormalParameterListAssignment_2()); }
	(rule__ProcedureDeclaration__FormalParameterListAssignment_2)?
	{ after(grammarAccess.getProcedureDeclarationAccess().getFormalParameterListAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureDeclaration__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProcedureDeclaration__Group__3__Impl
	rule__ProcedureDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureDeclaration__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcedureDeclarationAccess().getSemicolonKeyword_3()); }
	';'
	{ after(grammarAccess.getProcedureDeclarationAccess().getSemicolonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureDeclaration__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProcedureDeclaration__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureDeclaration__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcedureDeclarationAccess().getBlockAssignment_4()); }
	(rule__ProcedureDeclaration__BlockAssignment_4)
	{ after(grammarAccess.getProcedureDeclarationAccess().getBlockAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDeclaration__Group__0__Impl
	rule__FunctionDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDeclarationAccess().getFunctionKeyword_0()); }
	'function'
	{ after(grammarAccess.getFunctionDeclarationAccess().getFunctionKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDeclaration__Group__1__Impl
	rule__FunctionDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDeclarationAccess().getIdentifierAssignment_1()); }
	(rule__FunctionDeclaration__IdentifierAssignment_1)
	{ after(grammarAccess.getFunctionDeclarationAccess().getIdentifierAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDeclaration__Group__2__Impl
	rule__FunctionDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDeclarationAccess().getFormalParameterListAssignment_2()); }
	(rule__FunctionDeclaration__FormalParameterListAssignment_2)?
	{ after(grammarAccess.getFunctionDeclarationAccess().getFormalParameterListAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDeclaration__Group__3__Impl
	rule__FunctionDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDeclarationAccess().getColonKeyword_3()); }
	':'
	{ after(grammarAccess.getFunctionDeclarationAccess().getColonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDeclaration__Group__4__Impl
	rule__FunctionDeclaration__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDeclarationAccess().getResultTypeAssignment_4()); }
	(rule__FunctionDeclaration__ResultTypeAssignment_4)
	{ after(grammarAccess.getFunctionDeclarationAccess().getResultTypeAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDeclaration__Group__5__Impl
	rule__FunctionDeclaration__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDeclarationAccess().getSemicolonKeyword_5()); }
	';'
	{ after(grammarAccess.getFunctionDeclarationAccess().getSemicolonKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDeclaration__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDeclarationAccess().getBlockAssignment_6()); }
	(rule__FunctionDeclaration__BlockAssignment_6)
	{ after(grammarAccess.getFunctionDeclarationAccess().getBlockAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Statement__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Statement__Group_0__0__Impl
	rule__Statement__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementAccess().getLabelParserRuleCall_0_0()); }
	rulelabel
	{ after(grammarAccess.getStatementAccess().getLabelParserRuleCall_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Statement__Group_0__1__Impl
	rule__Statement__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementAccess().getColonKeyword_0_1()); }
	':'
	{ after(grammarAccess.getStatementAccess().getColonKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Statement__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementAccess().getUnlabelledStatementAssignment_0_2()); }
	(rule__Statement__UnlabelledStatementAssignment_0_2)
	{ after(grammarAccess.getStatementAccess().getUnlabelledStatementAssignment_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__UnlabelledStatement__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnlabelledStatement__Group_2__0__Impl
	rule__UnlabelledStatement__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnlabelledStatement__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnlabelledStatementAccess().getIdentifierAssignment_2_0()); }
	(rule__UnlabelledStatement__IdentifierAssignment_2_0)
	{ after(grammarAccess.getUnlabelledStatementAccess().getIdentifierAssignment_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnlabelledStatement__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnlabelledStatement__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnlabelledStatement__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnlabelledStatementAccess().getGroup_2_1()); }
	(rule__UnlabelledStatement__Group_2_1__0)?
	{ after(grammarAccess.getUnlabelledStatementAccess().getGroup_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__UnlabelledStatement__Group_2_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnlabelledStatement__Group_2_1__0__Impl
	rule__UnlabelledStatement__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnlabelledStatement__Group_2_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnlabelledStatementAccess().getLeftParenthesisKeyword_2_1_0()); }
	'('
	{ after(grammarAccess.getUnlabelledStatementAccess().getLeftParenthesisKeyword_2_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnlabelledStatement__Group_2_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnlabelledStatement__Group_2_1__1__Impl
	rule__UnlabelledStatement__Group_2_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UnlabelledStatement__Group_2_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnlabelledStatementAccess().getParameterListAssignment_2_1_1()); }
	(rule__UnlabelledStatement__ParameterListAssignment_2_1_1)
	{ after(grammarAccess.getUnlabelledStatementAccess().getParameterListAssignment_2_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnlabelledStatement__Group_2_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnlabelledStatement__Group_2_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnlabelledStatement__Group_2_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnlabelledStatementAccess().getRightParenthesisKeyword_2_1_2()); }
	')'
	{ after(grammarAccess.getUnlabelledStatementAccess().getRightParenthesisKeyword_2_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleStatement__Group__0__Impl
	rule__SimpleStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleStatementAccess().getSimpleStatementAction_0()); }
	()
	{ after(grammarAccess.getSimpleStatementAccess().getSimpleStatementAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleStatement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleStatementAccess().getAlternatives_1()); }
	(rule__SimpleStatement__Alternatives_1)?
	{ after(grammarAccess.getSimpleStatementAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AssignmentStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssignmentStatement__Group__0__Impl
	rule__AssignmentStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentStatementAccess().getVariableAssignment_0()); }
	(rule__AssignmentStatement__VariableAssignment_0)
	{ after(grammarAccess.getAssignmentStatementAccess().getVariableAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssignmentStatement__Group__1__Impl
	rule__AssignmentStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentStatementAccess().getColonEqualsSignKeyword_1()); }
	':='
	{ after(grammarAccess.getAssignmentStatementAccess().getColonEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssignmentStatement__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentStatementAccess().getExpressionAssignment_2()); }
	(rule__AssignmentStatement__ExpressionAssignment_2)
	{ after(grammarAccess.getAssignmentStatementAccess().getExpressionAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Variable__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group__0__Impl
	rule__Variable__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getAlternatives_0()); }
	(rule__Variable__Alternatives_0)
	{ after(grammarAccess.getVariableAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getAlternatives_1()); }
	(rule__Variable__Alternatives_1)*
	{ after(grammarAccess.getVariableAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Variable__Group_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group_0_0__0__Impl
	rule__Variable__Group_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getCommercialAtKeyword_0_0_0()); }
	'@'
	{ after(grammarAccess.getVariableAccess().getCommercialAtKeyword_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getIdentifierAssignment_0_0_1()); }
	(rule__Variable__IdentifierAssignment_0_0_1)
	{ after(grammarAccess.getVariableAccess().getIdentifierAssignment_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Variable__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group_1_0__0__Impl
	rule__Variable__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getLeftSquareBracketKeyword_1_0_0()); }
	'['
	{ after(grammarAccess.getVariableAccess().getLeftSquareBracketKeyword_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group_1_0__1__Impl
	rule__Variable__Group_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getExpressionAssignment_1_0_1()); }
	(rule__Variable__ExpressionAssignment_1_0_1)
	{ after(grammarAccess.getVariableAccess().getExpressionAssignment_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group_1_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group_1_0__2__Impl
	rule__Variable__Group_1_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group_1_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getGroup_1_0_2()); }
	(rule__Variable__Group_1_0_2__0)*
	{ after(grammarAccess.getVariableAccess().getGroup_1_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group_1_0__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group_1_0__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group_1_0__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getRightSquareBracketKeyword_1_0_3()); }
	']'
	{ after(grammarAccess.getVariableAccess().getRightSquareBracketKeyword_1_0_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Variable__Group_1_0_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group_1_0_2__0__Impl
	rule__Variable__Group_1_0_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group_1_0_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getCommaKeyword_1_0_2_0()); }
	','
	{ after(grammarAccess.getVariableAccess().getCommaKeyword_1_0_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group_1_0_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group_1_0_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group_1_0_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getExpression1Assignment_1_0_2_1()); }
	(rule__Variable__Expression1Assignment_1_0_2_1)
	{ after(grammarAccess.getVariableAccess().getExpression1Assignment_1_0_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Variable__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group_1_1__0__Impl
	rule__Variable__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getLeftParenthesisFullStopKeyword_1_1_0()); }
	'(.'
	{ after(grammarAccess.getVariableAccess().getLeftParenthesisFullStopKeyword_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group_1_1__1__Impl
	rule__Variable__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getExpression2Assignment_1_1_1()); }
	(rule__Variable__Expression2Assignment_1_1_1)
	{ after(grammarAccess.getVariableAccess().getExpression2Assignment_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group_1_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group_1_1__2__Impl
	rule__Variable__Group_1_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group_1_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getGroup_1_1_2()); }
	(rule__Variable__Group_1_1_2__0)*
	{ after(grammarAccess.getVariableAccess().getGroup_1_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group_1_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group_1_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group_1_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getFullStopRightParenthesisKeyword_1_1_3()); }
	'.)'
	{ after(grammarAccess.getVariableAccess().getFullStopRightParenthesisKeyword_1_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Variable__Group_1_1_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group_1_1_2__0__Impl
	rule__Variable__Group_1_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group_1_1_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getCommaKeyword_1_1_2_0()); }
	','
	{ after(grammarAccess.getVariableAccess().getCommaKeyword_1_1_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group_1_1_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group_1_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group_1_1_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getExpression3Assignment_1_1_2_1()); }
	(rule__Variable__Expression3Assignment_1_1_2_1)
	{ after(grammarAccess.getVariableAccess().getExpression3Assignment_1_1_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Variable__Group_1_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group_1_2__0__Impl
	rule__Variable__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group_1_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getFullStopKeyword_1_2_0()); }
	'.'
	{ after(grammarAccess.getVariableAccess().getFullStopKeyword_1_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group_1_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group_1_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getIdentifier2Assignment_1_2_1()); }
	(rule__Variable__Identifier2Assignment_1_2_1)
	{ after(grammarAccess.getVariableAccess().getIdentifier2Assignment_1_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group__0__Impl
	rule__Expression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getSimpleExpressionAssignment_0()); }
	(rule__Expression__SimpleExpressionAssignment_0)
	{ after(grammarAccess.getExpressionAccess().getSimpleExpressionAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getGroup_1()); }
	(rule__Expression__Group_1__0)?
	{ after(grammarAccess.getExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group_1__0__Impl
	rule__Expression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getRelationaloperatorAssignment_1_0()); }
	(rule__Expression__RelationaloperatorAssignment_1_0)
	{ after(grammarAccess.getExpressionAccess().getRelationaloperatorAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getExpressionAssignment_1_1()); }
	(rule__Expression__ExpressionAssignment_1_1)
	{ after(grammarAccess.getExpressionAccess().getExpressionAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleExpression__Group__0__Impl
	rule__SimpleExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleExpressionAccess().getTermAssignment_0()); }
	(rule__SimpleExpression__TermAssignment_0)
	{ after(grammarAccess.getSimpleExpressionAccess().getTermAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleExpressionAccess().getGroup_1()); }
	(rule__SimpleExpression__Group_1__0)?
	{ after(grammarAccess.getSimpleExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleExpression__Group_1__0__Impl
	rule__SimpleExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleExpressionAccess().getAdditiveoperatorAssignment_1_0()); }
	(rule__SimpleExpression__AdditiveoperatorAssignment_1_0)
	{ after(grammarAccess.getSimpleExpressionAccess().getAdditiveoperatorAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleExpressionAccess().getSimpleExpressionAssignment_1_1()); }
	(rule__SimpleExpression__SimpleExpressionAssignment_1_1)
	{ after(grammarAccess.getSimpleExpressionAccess().getSimpleExpressionAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Term__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Term__Group__0__Impl
	rule__Term__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTermAccess().getSignedFactorAssignment_0()); }
	(rule__Term__SignedFactorAssignment_0)
	{ after(grammarAccess.getTermAccess().getSignedFactorAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Term__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTermAccess().getGroup_1()); }
	(rule__Term__Group_1__0)?
	{ after(grammarAccess.getTermAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Term__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Term__Group_1__0__Impl
	rule__Term__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTermAccess().getMultiplicativeoperatorAssignment_1_0()); }
	(rule__Term__MultiplicativeoperatorAssignment_1_0)
	{ after(grammarAccess.getTermAccess().getMultiplicativeoperatorAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Term__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTermAccess().getTermAssignment_1_1()); }
	(rule__Term__TermAssignment_1_1)
	{ after(grammarAccess.getTermAccess().getTermAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SignedFactor__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SignedFactor__Group__0__Impl
	rule__SignedFactor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SignedFactor__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSignedFactorAccess().getAlternatives_0()); }
	(rule__SignedFactor__Alternatives_0)?
	{ after(grammarAccess.getSignedFactorAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SignedFactor__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SignedFactor__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SignedFactor__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSignedFactorAccess().getFactorAssignment_1()); }
	(rule__SignedFactor__FactorAssignment_1)
	{ after(grammarAccess.getSignedFactorAccess().getFactorAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Factor__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Factor__Group_0__0__Impl
	rule__Factor__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFactorAccess().getLeftParenthesisKeyword_0_0()); }
	'('
	{ after(grammarAccess.getFactorAccess().getLeftParenthesisKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Factor__Group_0__1__Impl
	rule__Factor__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFactorAccess().getExpressionAssignment_0_1()); }
	(rule__Factor__ExpressionAssignment_0_1)
	{ after(grammarAccess.getFactorAccess().getExpressionAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Factor__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFactorAccess().getRightParenthesisKeyword_0_2()); }
	')'
	{ after(grammarAccess.getFactorAccess().getRightParenthesisKeyword_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Factor__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Factor__Group_2__0__Impl
	rule__Factor__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFactorAccess().getNotKeyword_2_0()); }
	'not'
	{ after(grammarAccess.getFactorAccess().getNotKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Factor__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFactorAccess().getFactorAssignment_2_1()); }
	(rule__Factor__FactorAssignment_2_1)
	{ after(grammarAccess.getFactorAccess().getFactorAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__UnsignedConstant__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnsignedConstant__Group_3__0__Impl
	rule__UnsignedConstant__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnsignedConstant__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnsignedConstantAccess().getUnsignedConstantAction_3_0()); }
	()
	{ after(grammarAccess.getUnsignedConstantAccess().getUnsignedConstantAction_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnsignedConstant__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnsignedConstant__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnsignedConstant__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnsignedConstantAccess().getNilKeyword_3_1()); }
	'nil'
	{ after(grammarAccess.getUnsignedConstantAccess().getNilKeyword_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDesignator__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDesignator__Group__0__Impl
	rule__FunctionDesignator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDesignator__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDesignatorAccess().getIdentifierAssignment_0()); }
	(rule__FunctionDesignator__IdentifierAssignment_0)
	{ after(grammarAccess.getFunctionDesignatorAccess().getIdentifierAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDesignator__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDesignator__Group__1__Impl
	rule__FunctionDesignator__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDesignator__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDesignatorAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getFunctionDesignatorAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDesignator__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDesignator__Group__2__Impl
	rule__FunctionDesignator__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDesignator__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDesignatorAccess().getParameterListAssignment_2()); }
	(rule__FunctionDesignator__ParameterListAssignment_2)
	{ after(grammarAccess.getFunctionDesignatorAccess().getParameterListAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDesignator__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDesignator__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDesignator__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDesignatorAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getFunctionDesignatorAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterList__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterList__Group__0__Impl
	rule__ParameterList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterListAccess().getActualParameterParserRuleCall_0()); }
	ruleactualParameter
	{ after(grammarAccess.getParameterListAccess().getActualParameterParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterListAccess().getGroup_1()); }
	(rule__ParameterList__Group_1__0)*
	{ after(grammarAccess.getParameterListAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterList__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterList__Group_1__0__Impl
	rule__ParameterList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterListAccess().getCommaKeyword_1_0()); }
	','
	{ after(grammarAccess.getParameterListAccess().getCommaKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterListAccess().getActualParameterAssignment_1_1()); }
	(rule__ParameterList__ActualParameterAssignment_1_1)
	{ after(grammarAccess.getParameterListAccess().getActualParameterAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__GotoStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GotoStatement__Group__0__Impl
	rule__GotoStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GotoStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGotoStatementAccess().getGotoKeyword_0()); }
	'goto'
	{ after(grammarAccess.getGotoStatementAccess().getGotoKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GotoStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GotoStatement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GotoStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGotoStatementAccess().getLabelAssignment_1()); }
	(rule__GotoStatement__LabelAssignment_1)
	{ after(grammarAccess.getGotoStatementAccess().getLabelAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CompoundStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompoundStatement__Group__0__Impl
	rule__CompoundStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CompoundStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompoundStatementAccess().getBeginKeyword_0()); }
	'begin'
	{ after(grammarAccess.getCompoundStatementAccess().getBeginKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompoundStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompoundStatement__Group__1__Impl
	rule__CompoundStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CompoundStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompoundStatementAccess().getStatementsParserRuleCall_1()); }
	rulestatements
	{ after(grammarAccess.getCompoundStatementAccess().getStatementsParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompoundStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompoundStatement__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CompoundStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompoundStatementAccess().getEndKeyword_2()); }
	'end'
	{ after(grammarAccess.getCompoundStatementAccess().getEndKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Statements__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Statements__Group__0__Impl
	rule__Statements__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Statements__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementsAccess().getStatementAssignment_0()); }
	(rule__Statements__StatementAssignment_0)
	{ after(grammarAccess.getStatementsAccess().getStatementAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statements__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Statements__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Statements__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementsAccess().getGroup_1()); }
	(rule__Statements__Group_1__0)*
	{ after(grammarAccess.getStatementsAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Statements__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Statements__Group_1__0__Impl
	rule__Statements__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Statements__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementsAccess().getSemicolonKeyword_1_0()); }
	';'
	{ after(grammarAccess.getStatementsAccess().getSemicolonKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statements__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Statements__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Statements__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementsAccess().getStatementAssignment_1_1()); }
	(rule__Statements__StatementAssignment_1_1)
	{ after(grammarAccess.getStatementsAccess().getStatementAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CaseStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseStatement__Group__0__Impl
	rule__CaseStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseStatementAccess().getCaseKeyword_0()); }
	'case'
	{ after(grammarAccess.getCaseStatementAccess().getCaseKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseStatement__Group__1__Impl
	rule__CaseStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseStatementAccess().getExpressionAssignment_1()); }
	(rule__CaseStatement__ExpressionAssignment_1)
	{ after(grammarAccess.getCaseStatementAccess().getExpressionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseStatement__Group__2__Impl
	rule__CaseStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseStatementAccess().getOfKeyword_2()); }
	'of'
	{ after(grammarAccess.getCaseStatementAccess().getOfKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseStatement__Group__3__Impl
	rule__CaseStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseStatementAccess().getCaseListElementAssignment_3()); }
	(rule__CaseStatement__CaseListElementAssignment_3)
	{ after(grammarAccess.getCaseStatementAccess().getCaseListElementAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseStatement__Group__4__Impl
	rule__CaseStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseStatementAccess().getGroup_4()); }
	(rule__CaseStatement__Group_4__0)*
	{ after(grammarAccess.getCaseStatementAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseStatement__Group__5__Impl
	rule__CaseStatement__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseStatementAccess().getGroup_5()); }
	(rule__CaseStatement__Group_5__0)?
	{ after(grammarAccess.getCaseStatementAccess().getGroup_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseStatement__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseStatementAccess().getEndKeyword_6()); }
	'end'
	{ after(grammarAccess.getCaseStatementAccess().getEndKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CaseStatement__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseStatement__Group_4__0__Impl
	rule__CaseStatement__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseStatementAccess().getSemicolonKeyword_4_0()); }
	';'
	{ after(grammarAccess.getCaseStatementAccess().getSemicolonKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseStatement__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseStatementAccess().getCaseListElement1Assignment_4_1()); }
	(rule__CaseStatement__CaseListElement1Assignment_4_1)
	{ after(grammarAccess.getCaseStatementAccess().getCaseListElement1Assignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CaseStatement__Group_5__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseStatement__Group_5__0__Impl
	rule__CaseStatement__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__Group_5__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseStatementAccess().getSemicolonKeyword_5_0()); }
	';'
	{ after(grammarAccess.getCaseStatementAccess().getSemicolonKeyword_5_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__Group_5__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseStatement__Group_5__1__Impl
	rule__CaseStatement__Group_5__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__Group_5__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseStatementAccess().getElseKeyword_5_1()); }
	'else'
	{ after(grammarAccess.getCaseStatementAccess().getElseKeyword_5_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__Group_5__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseStatement__Group_5__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__Group_5__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseStatementAccess().getStatementsAssignment_5_2()); }
	(rule__CaseStatement__StatementsAssignment_5_2)
	{ after(grammarAccess.getCaseStatementAccess().getStatementsAssignment_5_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CaseListElement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseListElement__Group__0__Impl
	rule__CaseListElement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseListElement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseListElementAccess().getConstListAssignment_0()); }
	(rule__CaseListElement__ConstListAssignment_0)
	{ after(grammarAccess.getCaseListElementAccess().getConstListAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseListElement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseListElement__Group__1__Impl
	rule__CaseListElement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseListElement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseListElementAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getCaseListElementAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseListElement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseListElement__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseListElement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseListElementAccess().getStatementAssignment_2()); }
	(rule__CaseListElement__StatementAssignment_2)
	{ after(grammarAccess.getCaseListElementAccess().getStatementAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Pascal__ProgramAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPascalAccess().getProgramProgramParserRuleCall_0()); }
		ruleprogram
		{ after(grammarAccess.getPascalAccess().getProgramProgramParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__HeadAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramAccess().getHeadProgramHeadingParserRuleCall_0_0()); }
		ruleprogramHeading
		{ after(grammarAccess.getProgramAccess().getHeadProgramHeadingParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__BlockAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramAccess().getBlockBlockParserRuleCall_2_0()); }
		ruleblock
		{ after(grammarAccess.getProgramAccess().getBlockBlockParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProgramHeading__IdentiferAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramHeadingAccess().getIdentiferIdentifierParserRuleCall_1_0()); }
		ruleidentifier
		{ after(grammarAccess.getProgramHeadingAccess().getIdentiferIdentifierParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProgramHeading__IdentifierListAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramHeadingAccess().getIdentifierListIdentifierListParserRuleCall_2_1_0()); }
		ruleidentifierList
		{ after(grammarAccess.getProgramHeadingAccess().getIdentifierListIdentifierListParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IdentifierList__IdentifierAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIdentifierListAccess().getIdentifierIdentifierParserRuleCall_1_0()); }
		ruleidentifier
		{ after(grammarAccess.getIdentifierListAccess().getIdentifierIdentifierParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IdentifierList__IdentifierList1Assignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIdentifierListAccess().getIdentifierList1IdentifierParserRuleCall_2_1_0()); }
		ruleidentifier
		{ after(grammarAccess.getIdentifierListAccess().getIdentifierList1IdentifierParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Identifier__IdentifierAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIdentifierAccess().getIdentifierIDENTTerminalRuleCall_0()); }
		RULE_IDENT
		{ after(grammarAccess.getIdentifierAccess().getIdentifierIDENTTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__LabelAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBlockAccess().getLabelLabel_declaration_partParserRuleCall_1_0_0()); }
		rulelabel_declaration_part
		{ after(grammarAccess.getBlockAccess().getLabelLabel_declaration_partParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__ConstantDefinitionPartAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBlockAccess().getConstantDefinitionPartConstantDefinitionPartParserRuleCall_1_1_0()); }
		ruleconstantDefinitionPart
		{ after(grammarAccess.getBlockAccess().getConstantDefinitionPartConstantDefinitionPartParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__TypeDefinitionPartAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBlockAccess().getTypeDefinitionPartTypeDefinitionPartParserRuleCall_1_2_0()); }
		ruletypeDefinitionPart
		{ after(grammarAccess.getBlockAccess().getTypeDefinitionPartTypeDefinitionPartParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__VariableDeclarationPartAssignment_1_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBlockAccess().getVariableDeclarationPartVariableDeclarationPartParserRuleCall_1_3_0()); }
		rulevariableDeclarationPart
		{ after(grammarAccess.getBlockAccess().getVariableDeclarationPartVariableDeclarationPartParserRuleCall_1_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__ProcedureAndFunctionDeclarationPartAssignment_1_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBlockAccess().getProcedureAndFunctionDeclarationPartProcedureAndFunctionDeclarationPartParserRuleCall_1_4_0()); }
		ruleprocedureAndFunctionDeclarationPart
		{ after(grammarAccess.getBlockAccess().getProcedureAndFunctionDeclarationPartProcedureAndFunctionDeclarationPartParserRuleCall_1_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__UsesUnitsPartAssignment_1_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBlockAccess().getUsesUnitsPartUsesUnitsPartParserRuleCall_1_5_0()); }
		ruleusesUnitsPart
		{ after(grammarAccess.getBlockAccess().getUsesUnitsPartUsesUnitsPartParserRuleCall_1_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__CompoundStatementAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBlockAccess().getCompoundStatementCompoundStatementParserRuleCall_2_0()); }
		rulecompoundStatement
		{ after(grammarAccess.getBlockAccess().getCompoundStatementCompoundStatementParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Label_declaration_part__LabelAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLabel_declaration_partAccess().getLabelLabelParserRuleCall_2_1_0()); }
		rulelabel
		{ after(grammarAccess.getLabel_declaration_partAccess().getLabelLabelParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Label__UnsignedIntegerAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLabelAccess().getUnsignedIntegerUnsignedIntegerParserRuleCall_0_0()); }
		ruleunsignedInteger
		{ after(grammarAccess.getLabelAccess().getUnsignedIntegerUnsignedIntegerParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Label__IdentifierAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLabelAccess().getIdentifierIdentifierParserRuleCall_1_0()); }
		ruleidentifier
		{ after(grammarAccess.getLabelAccess().getIdentifierIdentifierParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnsignedInteger__NumberAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnsignedIntegerAccess().getNumberNUMTerminalRuleCall_0()); }
		RULE_NUM
		{ after(grammarAccess.getUnsignedIntegerAccess().getNumberNUMTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantDefinitionPart__ConstantDefinitionAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstantDefinitionPartAccess().getConstantDefinitionConstantDefinitionParserRuleCall_1_0_0()); }
		ruleconstantDefinition
		{ after(grammarAccess.getConstantDefinitionPartAccess().getConstantDefinitionConstantDefinitionParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantDefinition__IdentifierAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstantDefinitionAccess().getIdentifierIdentifierParserRuleCall_0_0()); }
		ruleidentifier
		{ after(grammarAccess.getConstantDefinitionAccess().getIdentifierIdentifierParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantDefinition__ConstantAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstantDefinitionAccess().getConstantConstantParserRuleCall_2_0()); }
		ruleconstant
		{ after(grammarAccess.getConstantDefinitionAccess().getConstantConstantParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__NumberAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstantAccess().getNumberUnsignedNumberParserRuleCall_0_0()); }
		ruleunsignedNumber
		{ after(grammarAccess.getConstantAccess().getNumberUnsignedNumberParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__SignAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstantAccess().getSignSignParserRuleCall_1_0_0()); }
		rulesign
		{ after(grammarAccess.getConstantAccess().getSignSignParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Number1Assignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstantAccess().getNumber1UnsignedNumberParserRuleCall_1_1_0()); }
		ruleunsignedNumber
		{ after(grammarAccess.getConstantAccess().getNumber1UnsignedNumberParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__IdentifierAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstantAccess().getIdentifierIdentifierParserRuleCall_2_0()); }
		ruleidentifier
		{ after(grammarAccess.getConstantAccess().getIdentifierIdentifierParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__STRING_LITERALAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstantAccess().getSTRING_LITERALSTRING_LITERALTerminalRuleCall_3_0()); }
		RULE_STRING_LITERAL
		{ after(grammarAccess.getConstantAccess().getSTRING_LITERALSTRING_LITERALTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Sign2Assignment_4_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstantAccess().getSign2SignParserRuleCall_4_0_0()); }
		rulesign
		{ after(grammarAccess.getConstantAccess().getSign2SignParserRuleCall_4_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Identifier1Assignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstantAccess().getIdentifier1IdentifierParserRuleCall_4_1_0()); }
		ruleidentifier
		{ after(grammarAccess.getConstantAccess().getIdentifier1IdentifierParserRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__ConstantChrAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstantAccess().getConstantChrConstantChrParserRuleCall_5_0()); }
		ruleconstantChr
		{ after(grammarAccess.getConstantAccess().getConstantChrConstantChrParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantChr__UnsignedIntegerAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstantChrAccess().getUnsignedIntegerUnsignedIntegerParserRuleCall_2_0()); }
		ruleunsignedInteger
		{ after(grammarAccess.getConstantChrAccess().getUnsignedIntegerUnsignedIntegerParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnsignedNumber__UnsignedIntegerAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnsignedNumberAccess().getUnsignedIntegerUnsignedIntegerParserRuleCall_0_0()); }
		ruleunsignedInteger
		{ after(grammarAccess.getUnsignedNumberAccess().getUnsignedIntegerUnsignedIntegerParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnsignedNumber__UnsignedRealAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnsignedNumberAccess().getUnsignedRealUnsignedRealParserRuleCall_1_0()); }
		ruleunsignedReal
		{ after(grammarAccess.getUnsignedNumberAccess().getUnsignedRealUnsignedRealParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UsesUnitsPart__IdentifierListAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUsesUnitsPartAccess().getIdentifierListIdentifierListParserRuleCall_1_0()); }
		ruleidentifierList
		{ after(grammarAccess.getUsesUnitsPartAccess().getIdentifierListIdentifierListParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDefinitionPart__TypeDefinitionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeDefinitionPartAccess().getTypeDefinitionTypeDefinitionParserRuleCall_1_0()); }
		ruletypeDefinition
		{ after(grammarAccess.getTypeDefinitionPartAccess().getTypeDefinitionTypeDefinitionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDefinitionPart__TypeDefinition1Assignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeDefinitionPartAccess().getTypeDefinition1TypeDefinitionParserRuleCall_2_0()); }
		ruletypeDefinition
		{ after(grammarAccess.getTypeDefinitionPartAccess().getTypeDefinition1TypeDefinitionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDefinition__IdentifierAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeDefinitionAccess().getIdentifierIdentifierParserRuleCall_0_0()); }
		ruleidentifier
		{ after(grammarAccess.getTypeDefinitionAccess().getIdentifierIdentifierParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDefinition__TypeAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeDefinitionAccess().getTypeTypeParserRuleCall_2_0_0()); }
		ruletype
		{ after(grammarAccess.getTypeDefinitionAccess().getTypeTypeParserRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDefinition__FunctionTypeAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeDefinitionAccess().getFunctionTypeFunctionTypeParserRuleCall_2_1_0()); }
		rulefunctionType
		{ after(grammarAccess.getTypeDefinitionAccess().getFunctionTypeFunctionTypeParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDefinition__ProcedureTypeAssignment_2_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeDefinitionAccess().getProcedureTypeProcedureTypeParserRuleCall_2_2_0()); }
		ruleprocedureType
		{ after(grammarAccess.getTypeDefinitionAccess().getProcedureTypeProcedureTypeParserRuleCall_2_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionType__FormalParameterListAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionTypeAccess().getFormalParameterListFormalParameterListParserRuleCall_1_0()); }
		ruleformalParameterList
		{ after(grammarAccess.getFunctionTypeAccess().getFormalParameterListFormalParameterListParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionType__ResultTypeAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionTypeAccess().getResultTypeResultTypeParserRuleCall_3_0()); }
		ruleresultType
		{ after(grammarAccess.getFunctionTypeAccess().getResultTypeResultTypeParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FormalParameterList__FormalParameterSectionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFormalParameterListAccess().getFormalParameterSectionFormalParameterSectionParserRuleCall_1_0()); }
		ruleformalParameterSection
		{ after(grammarAccess.getFormalParameterListAccess().getFormalParameterSectionFormalParameterSectionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FormalParameterList__FormalParameterSection2Assignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFormalParameterListAccess().getFormalParameterSection2FormalParameterSectionParserRuleCall_2_1_0()); }
		ruleformalParameterSection
		{ after(grammarAccess.getFormalParameterListAccess().getFormalParameterSection2FormalParameterSectionParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FormalParameterSection__ParameterGroupAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFormalParameterSectionAccess().getParameterGroupParameterGroupParserRuleCall_0_0()); }
		ruleparameterGroup
		{ after(grammarAccess.getFormalParameterSectionAccess().getParameterGroupParameterGroupParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FormalParameterSection__ParameterGroup2Assignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFormalParameterSectionAccess().getParameterGroup2ParameterGroupParserRuleCall_1_1_0()); }
		ruleparameterGroup
		{ after(grammarAccess.getFormalParameterSectionAccess().getParameterGroup2ParameterGroupParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FormalParameterSection__ParameterGroup3Assignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFormalParameterSectionAccess().getParameterGroup3ParameterGroupParserRuleCall_2_1_0()); }
		ruleparameterGroup
		{ after(grammarAccess.getFormalParameterSectionAccess().getParameterGroup3ParameterGroupParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FormalParameterSection__ParameterGroup4Assignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFormalParameterSectionAccess().getParameterGroup4ParameterGroupParserRuleCall_3_1_0()); }
		ruleparameterGroup
		{ after(grammarAccess.getFormalParameterSectionAccess().getParameterGroup4ParameterGroupParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterGroup__IdentifierListAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterGroupAccess().getIdentifierListIdentifierListParserRuleCall_0_0()); }
		ruleidentifierList
		{ after(grammarAccess.getParameterGroupAccess().getIdentifierListIdentifierListParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterGroup__TypeIdentifierAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterGroupAccess().getTypeIdentifierTypeIdentifierParserRuleCall_2_0()); }
		ruletypeIdentifier
		{ after(grammarAccess.getParameterGroupAccess().getTypeIdentifierTypeIdentifierParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeIdentifier__IdentifierAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeIdentifierAccess().getIdentifierIdentifierParserRuleCall_0_0()); }
		ruleidentifier
		{ after(grammarAccess.getTypeIdentifierAccess().getIdentifierIdentifierParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeIdentifier__CharAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeIdentifierAccess().getCharCharKeyword_1_0()); }
		(
			{ before(grammarAccess.getTypeIdentifierAccess().getCharCharKeyword_1_0()); }
			'char'
			{ after(grammarAccess.getTypeIdentifierAccess().getCharCharKeyword_1_0()); }
		)
		{ after(grammarAccess.getTypeIdentifierAccess().getCharCharKeyword_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeIdentifier__BooleanAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeIdentifierAccess().getBooleanBooleanKeyword_2_0()); }
		(
			{ before(grammarAccess.getTypeIdentifierAccess().getBooleanBooleanKeyword_2_0()); }
			'boolean'
			{ after(grammarAccess.getTypeIdentifierAccess().getBooleanBooleanKeyword_2_0()); }
		)
		{ after(grammarAccess.getTypeIdentifierAccess().getBooleanBooleanKeyword_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeIdentifier__IntegerAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeIdentifierAccess().getIntegerIntegerKeyword_3_0()); }
		(
			{ before(grammarAccess.getTypeIdentifierAccess().getIntegerIntegerKeyword_3_0()); }
			'integer'
			{ after(grammarAccess.getTypeIdentifierAccess().getIntegerIntegerKeyword_3_0()); }
		)
		{ after(grammarAccess.getTypeIdentifierAccess().getIntegerIntegerKeyword_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeIdentifier__RealAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeIdentifierAccess().getRealRealKeyword_4_0()); }
		(
			{ before(grammarAccess.getTypeIdentifierAccess().getRealRealKeyword_4_0()); }
			'real'
			{ after(grammarAccess.getTypeIdentifierAccess().getRealRealKeyword_4_0()); }
		)
		{ after(grammarAccess.getTypeIdentifierAccess().getRealRealKeyword_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeIdentifier__StringAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeIdentifierAccess().getStringStringKeyword_5_0()); }
		(
			{ before(grammarAccess.getTypeIdentifierAccess().getStringStringKeyword_5_0()); }
			'string'
			{ after(grammarAccess.getTypeIdentifierAccess().getStringStringKeyword_5_0()); }
		)
		{ after(grammarAccess.getTypeIdentifierAccess().getStringStringKeyword_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureType__FormalParameterListAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProcedureTypeAccess().getFormalParameterListFormalParameterListParserRuleCall_2_0()); }
		ruleformalParameterList
		{ after(grammarAccess.getProcedureTypeAccess().getFormalParameterListFormalParameterListParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__SimpleTypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeAccess().getSimpleTypeSimpleTypeParserRuleCall_0_0()); }
		rulesimpleType
		{ after(grammarAccess.getTypeAccess().getSimpleTypeSimpleTypeParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__StructuredTypeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeAccess().getStructuredTypeStructuredTypeParserRuleCall_1_0()); }
		rulestructuredType
		{ after(grammarAccess.getTypeAccess().getStructuredTypeStructuredTypeParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__PointerTypeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeAccess().getPointerTypePointerTypeParserRuleCall_2_0()); }
		rulepointerType
		{ after(grammarAccess.getTypeAccess().getPointerTypePointerTypeParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PointerType__TypeIdentifierAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPointerTypeAccess().getTypeIdentifierTypeIdentifierParserRuleCall_1_0()); }
		ruletypeIdentifier
		{ after(grammarAccess.getPointerTypeAccess().getTypeIdentifierTypeIdentifierParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__ScalarTypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleTypeAccess().getScalarTypeScalarTypeParserRuleCall_0_0()); }
		rulescalarType
		{ after(grammarAccess.getSimpleTypeAccess().getScalarTypeScalarTypeParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__SubrangeTypeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleTypeAccess().getSubrangeTypeSubrangeTypeParserRuleCall_1_0()); }
		rulesubrangeType
		{ after(grammarAccess.getSimpleTypeAccess().getSubrangeTypeSubrangeTypeParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__TypeIdentifierAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleTypeAccess().getTypeIdentifierTypeIdentifierParserRuleCall_2_0()); }
		ruletypeIdentifier
		{ after(grammarAccess.getSimpleTypeAccess().getTypeIdentifierTypeIdentifierParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__StringtypeAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleTypeAccess().getStringtypeStringtypeParserRuleCall_3_0()); }
		rulestringtype
		{ after(grammarAccess.getSimpleTypeAccess().getStringtypeStringtypeParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ScalarType__IdentifierListAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getScalarTypeAccess().getIdentifierListIdentifierListParserRuleCall_1_0()); }
		ruleidentifierList
		{ after(grammarAccess.getScalarTypeAccess().getIdentifierListIdentifierListParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubrangeType__ConstantAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSubrangeTypeAccess().getConstantConstantParserRuleCall_0_0()); }
		ruleconstant
		{ after(grammarAccess.getSubrangeTypeAccess().getConstantConstantParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubrangeType__Constant2Assignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSubrangeTypeAccess().getConstant2ConstantParserRuleCall_2_0()); }
		ruleconstant
		{ after(grammarAccess.getSubrangeTypeAccess().getConstant2ConstantParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StructuredType__UnpackedStructuredTypeAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStructuredTypeAccess().getUnpackedStructuredTypeUnpackedStructuredTypeParserRuleCall_0_1_0()); }
		ruleunpackedStructuredType
		{ after(grammarAccess.getStructuredTypeAccess().getUnpackedStructuredTypeUnpackedStructuredTypeParserRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StructuredType__UnpackedStructuredType1Assignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStructuredTypeAccess().getUnpackedStructuredType1UnpackedStructuredTypeParserRuleCall_1_0()); }
		ruleunpackedStructuredType
		{ after(grammarAccess.getStructuredTypeAccess().getUnpackedStructuredType1UnpackedStructuredTypeParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnpackedStructuredType__RecordTypeAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnpackedStructuredTypeAccess().getRecordTypeRecordTypeParserRuleCall_0()); }
		rulerecordType
		{ after(grammarAccess.getUnpackedStructuredTypeAccess().getRecordTypeRecordTypeParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Stringtype__IdentifierAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStringtypeAccess().getIdentifierIdentifierParserRuleCall_2_0_0()); }
		ruleidentifier
		{ after(grammarAccess.getStringtypeAccess().getIdentifierIdentifierParserRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Stringtype__UnsignedNumberAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStringtypeAccess().getUnsignedNumberUnsignedNumberParserRuleCall_2_1_0()); }
		ruleunsignedNumber
		{ after(grammarAccess.getStringtypeAccess().getUnsignedNumberUnsignedNumberParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordType__FieldListAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRecordTypeAccess().getFieldListFieldListParserRuleCall_2_0()); }
		rulefieldList
		{ after(grammarAccess.getRecordTypeAccess().getFieldListFieldListParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FieldList__FixedPartAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFieldListAccess().getFixedPartFixedPartParserRuleCall_0_0_0()); }
		rulefixedPart
		{ after(grammarAccess.getFieldListAccess().getFixedPartFixedPartParserRuleCall_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FieldList__VariantPartAssignment_0_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFieldListAccess().getVariantPartVariantPartParserRuleCall_0_1_1_0()); }
		rulevariantPart
		{ after(grammarAccess.getFieldListAccess().getVariantPartVariantPartParserRuleCall_0_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FieldList__VariantPart1Assignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFieldListAccess().getVariantPart1VariantPartParserRuleCall_1_0()); }
		rulevariantPart
		{ after(grammarAccess.getFieldListAccess().getVariantPart1VariantPartParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FixedPart__RecordSectionAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFixedPartAccess().getRecordSectionRecordSectionParserRuleCall_0_0()); }
		rulerecordSection
		{ after(grammarAccess.getFixedPartAccess().getRecordSectionRecordSectionParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FixedPart__RecordSection1Assignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFixedPartAccess().getRecordSection1RecordSectionParserRuleCall_1_1_0()); }
		rulerecordSection
		{ after(grammarAccess.getFixedPartAccess().getRecordSection1RecordSectionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordSection__IdentifierListAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRecordSectionAccess().getIdentifierListIdentifierListParserRuleCall_0_0()); }
		ruleidentifierList
		{ after(grammarAccess.getRecordSectionAccess().getIdentifierListIdentifierListParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordSection__TypeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRecordSectionAccess().getTypeTypeParserRuleCall_2_0()); }
		ruletype
		{ after(grammarAccess.getRecordSectionAccess().getTypeTypeParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariantPart__TagAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariantPartAccess().getTagTagParserRuleCall_1_0()); }
		ruletag
		{ after(grammarAccess.getVariantPartAccess().getTagTagParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariantPart__VariantAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariantPartAccess().getVariantVariantParserRuleCall_3_0()); }
		rulevariant
		{ after(grammarAccess.getVariantPartAccess().getVariantVariantParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariantPart__Variant1Assignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariantPartAccess().getVariant1VariantParserRuleCall_4_1_0()); }
		rulevariant
		{ after(grammarAccess.getVariantPartAccess().getVariant1VariantParserRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Tag__IdentifierAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTagAccess().getIdentifierIdentifierParserRuleCall_0_0_0()); }
		ruleidentifier
		{ after(grammarAccess.getTagAccess().getIdentifierIdentifierParserRuleCall_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Tag__TypeIdentifierAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTagAccess().getTypeIdentifierTypeIdentifierParserRuleCall_0_2_0()); }
		ruletypeIdentifier
		{ after(grammarAccess.getTagAccess().getTypeIdentifierTypeIdentifierParserRuleCall_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Tag__TypeIdentifier1Assignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTagAccess().getTypeIdentifier1TypeIdentifierParserRuleCall_1_0()); }
		ruletypeIdentifier
		{ after(grammarAccess.getTagAccess().getTypeIdentifier1TypeIdentifierParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variant__ConstantAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariantAccess().getConstantConstantParserRuleCall_1_1_0()); }
		ruleconstant
		{ after(grammarAccess.getVariantAccess().getConstantConstantParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variant__FieldListAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariantAccess().getFieldListFieldListParserRuleCall_4_0()); }
		rulefieldList
		{ after(grammarAccess.getVariantAccess().getFieldListFieldListParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstList__ConstantAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstListAccess().getConstantConstantParserRuleCall_0_0()); }
		ruleconstant
		{ after(grammarAccess.getConstListAccess().getConstantConstantParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstList__Constant1Assignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstListAccess().getConstant1ConstantParserRuleCall_1_1_0()); }
		ruleconstant
		{ after(grammarAccess.getConstListAccess().getConstant1ConstantParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclarationPart__VariableDeclarationAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableDeclarationPartAccess().getVariableDeclarationVariableDeclarationParserRuleCall_1_0()); }
		rulevariableDeclaration
		{ after(grammarAccess.getVariableDeclarationPartAccess().getVariableDeclarationVariableDeclarationParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclarationPart__VariableDeclaration1Assignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableDeclarationPartAccess().getVariableDeclaration1VariableDeclarationParserRuleCall_2_1_0()); }
		rulevariableDeclaration
		{ after(grammarAccess.getVariableDeclarationPartAccess().getVariableDeclaration1VariableDeclarationParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__IdentifierListAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableDeclarationAccess().getIdentifierListIdentifierListParserRuleCall_0_0()); }
		ruleidentifierList
		{ after(grammarAccess.getVariableDeclarationAccess().getIdentifierListIdentifierListParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__TypeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableDeclarationAccess().getTypeTypeParserRuleCall_2_0()); }
		ruletype
		{ after(grammarAccess.getVariableDeclarationAccess().getTypeTypeParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__ExpressionAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableDeclarationAccess().getExpressionExpressionParserRuleCall_3_1_0()); }
		ruleexpression
		{ after(grammarAccess.getVariableDeclarationAccess().getExpressionExpressionParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureAndFunctionDeclarationPart__ProcedureOrFunctionDeclarationAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProcedureAndFunctionDeclarationPartAccess().getProcedureOrFunctionDeclarationProcedureOrFunctionDeclarationParserRuleCall_0_0()); }
		ruleprocedureOrFunctionDeclaration
		{ after(grammarAccess.getProcedureAndFunctionDeclarationPartAccess().getProcedureOrFunctionDeclarationProcedureOrFunctionDeclarationParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureOrFunctionDeclaration__ProcedureDeclarationAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProcedureOrFunctionDeclarationAccess().getProcedureDeclarationProcedureDeclarationParserRuleCall_0_0()); }
		ruleprocedureDeclaration
		{ after(grammarAccess.getProcedureOrFunctionDeclarationAccess().getProcedureDeclarationProcedureDeclarationParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureOrFunctionDeclaration__FunctionDeclarationAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProcedureOrFunctionDeclarationAccess().getFunctionDeclarationFunctionDeclarationParserRuleCall_1_0()); }
		rulefunctionDeclaration
		{ after(grammarAccess.getProcedureOrFunctionDeclarationAccess().getFunctionDeclarationFunctionDeclarationParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureDeclaration__IdentifierAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProcedureDeclarationAccess().getIdentifierIdentifierParserRuleCall_1_0()); }
		ruleidentifier
		{ after(grammarAccess.getProcedureDeclarationAccess().getIdentifierIdentifierParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureDeclaration__FormalParameterListAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProcedureDeclarationAccess().getFormalParameterListFormalParameterListParserRuleCall_2_0()); }
		ruleformalParameterList
		{ after(grammarAccess.getProcedureDeclarationAccess().getFormalParameterListFormalParameterListParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureDeclaration__BlockAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProcedureDeclarationAccess().getBlockBlockParserRuleCall_4_0()); }
		ruleblock
		{ after(grammarAccess.getProcedureDeclarationAccess().getBlockBlockParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__IdentifierAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionDeclarationAccess().getIdentifierIdentifierParserRuleCall_1_0()); }
		ruleidentifier
		{ after(grammarAccess.getFunctionDeclarationAccess().getIdentifierIdentifierParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__FormalParameterListAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionDeclarationAccess().getFormalParameterListFormalParameterListParserRuleCall_2_0()); }
		ruleformalParameterList
		{ after(grammarAccess.getFunctionDeclarationAccess().getFormalParameterListFormalParameterListParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__ResultTypeAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionDeclarationAccess().getResultTypeResultTypeParserRuleCall_4_0()); }
		ruleresultType
		{ after(grammarAccess.getFunctionDeclarationAccess().getResultTypeResultTypeParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__BlockAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionDeclarationAccess().getBlockBlockParserRuleCall_6_0()); }
		ruleblock
		{ after(grammarAccess.getFunctionDeclarationAccess().getBlockBlockParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__UnlabelledStatementAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementAccess().getUnlabelledStatementUnlabelledStatementParserRuleCall_0_2_0()); }
		ruleunlabelledStatement
		{ after(grammarAccess.getStatementAccess().getUnlabelledStatementUnlabelledStatementParserRuleCall_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__UnlabelledStatementAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementAccess().getUnlabelledStatementUnlabelledStatementParserRuleCall_1_0()); }
		ruleunlabelledStatement
		{ after(grammarAccess.getStatementAccess().getUnlabelledStatementUnlabelledStatementParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnlabelledStatement__SimpleStatementAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnlabelledStatementAccess().getSimpleStatementSimpleStatementParserRuleCall_0_0()); }
		rulesimpleStatement
		{ after(grammarAccess.getUnlabelledStatementAccess().getSimpleStatementSimpleStatementParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnlabelledStatement__StructuredStatementAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnlabelledStatementAccess().getStructuredStatementStructuredStatementParserRuleCall_1_0()); }
		rulestructuredStatement
		{ after(grammarAccess.getUnlabelledStatementAccess().getStructuredStatementStructuredStatementParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnlabelledStatement__IdentifierAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnlabelledStatementAccess().getIdentifierIdentifierParserRuleCall_2_0_0()); }
		ruleidentifier
		{ after(grammarAccess.getUnlabelledStatementAccess().getIdentifierIdentifierParserRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnlabelledStatement__ParameterListAssignment_2_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnlabelledStatementAccess().getParameterListParameterListParserRuleCall_2_1_1_0()); }
		ruleparameterList
		{ after(grammarAccess.getUnlabelledStatementAccess().getParameterListParameterListParserRuleCall_2_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleStatement__GotoStatementAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleStatementAccess().getGotoStatementGotoStatementParserRuleCall_1_0_0()); }
		rulegotoStatement
		{ after(grammarAccess.getSimpleStatementAccess().getGotoStatementGotoStatementParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleStatement__AssignmentStatementAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleStatementAccess().getAssignmentStatementAssignmentStatementParserRuleCall_1_1_0()); }
		ruleassignmentStatement
		{ after(grammarAccess.getSimpleStatementAccess().getAssignmentStatementAssignmentStatementParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentStatement__VariableAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignmentStatementAccess().getVariableVariableParserRuleCall_0_0()); }
		rulevariable
		{ after(grammarAccess.getAssignmentStatementAccess().getVariableVariableParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentStatement__ExpressionAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignmentStatementAccess().getExpressionExpressionParserRuleCall_2_0()); }
		ruleexpression
		{ after(grammarAccess.getAssignmentStatementAccess().getExpressionExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__IdentifierAssignment_0_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableAccess().getIdentifierIdentifierParserRuleCall_0_0_1_0()); }
		ruleidentifier
		{ after(grammarAccess.getVariableAccess().getIdentifierIdentifierParserRuleCall_0_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__IdentifierAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableAccess().getIdentifierIdentifierParserRuleCall_0_1_0()); }
		ruleidentifier
		{ after(grammarAccess.getVariableAccess().getIdentifierIdentifierParserRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__ExpressionAssignment_1_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableAccess().getExpressionExpressionParserRuleCall_1_0_1_0()); }
		ruleexpression
		{ after(grammarAccess.getVariableAccess().getExpressionExpressionParserRuleCall_1_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Expression1Assignment_1_0_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableAccess().getExpression1ExpressionParserRuleCall_1_0_2_1_0()); }
		ruleexpression
		{ after(grammarAccess.getVariableAccess().getExpression1ExpressionParserRuleCall_1_0_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Expression2Assignment_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableAccess().getExpression2ExpressionParserRuleCall_1_1_1_0()); }
		ruleexpression
		{ after(grammarAccess.getVariableAccess().getExpression2ExpressionParserRuleCall_1_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Expression3Assignment_1_1_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableAccess().getExpression3ExpressionParserRuleCall_1_1_2_1_0()); }
		ruleexpression
		{ after(grammarAccess.getVariableAccess().getExpression3ExpressionParserRuleCall_1_1_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Identifier2Assignment_1_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableAccess().getIdentifier2IdentifierParserRuleCall_1_2_1_0()); }
		ruleidentifier
		{ after(grammarAccess.getVariableAccess().getIdentifier2IdentifierParserRuleCall_1_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__SimpleExpressionAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getSimpleExpressionSimpleExpressionParserRuleCall_0_0()); }
		rulesimpleExpression
		{ after(grammarAccess.getExpressionAccess().getSimpleExpressionSimpleExpressionParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__RelationaloperatorAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getRelationaloperatorRelationaloperatorParserRuleCall_1_0_0()); }
		rulerelationaloperator
		{ after(grammarAccess.getExpressionAccess().getRelationaloperatorRelationaloperatorParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__ExpressionAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getExpressionExpressionParserRuleCall_1_1_0()); }
		ruleexpression
		{ after(grammarAccess.getExpressionAccess().getExpressionExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleExpression__TermAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleExpressionAccess().getTermTermParserRuleCall_0_0()); }
		ruleterm
		{ after(grammarAccess.getSimpleExpressionAccess().getTermTermParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleExpression__AdditiveoperatorAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleExpressionAccess().getAdditiveoperatorAdditiveoperatorParserRuleCall_1_0_0()); }
		ruleadditiveoperator
		{ after(grammarAccess.getSimpleExpressionAccess().getAdditiveoperatorAdditiveoperatorParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleExpression__SimpleExpressionAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleExpressionAccess().getSimpleExpressionSimpleExpressionParserRuleCall_1_1_0()); }
		rulesimpleExpression
		{ after(grammarAccess.getSimpleExpressionAccess().getSimpleExpressionSimpleExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__SignedFactorAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTermAccess().getSignedFactorSignedFactorParserRuleCall_0_0()); }
		rulesignedFactor
		{ after(grammarAccess.getTermAccess().getSignedFactorSignedFactorParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__MultiplicativeoperatorAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTermAccess().getMultiplicativeoperatorMultiplicativeoperatorParserRuleCall_1_0_0()); }
		rulemultiplicativeoperator
		{ after(grammarAccess.getTermAccess().getMultiplicativeoperatorMultiplicativeoperatorParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__TermAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTermAccess().getTermTermParserRuleCall_1_1_0()); }
		ruleterm
		{ after(grammarAccess.getTermAccess().getTermTermParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SignedFactor__FactorAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSignedFactorAccess().getFactorFactorParserRuleCall_1_0()); }
		rulefactor
		{ after(grammarAccess.getSignedFactorAccess().getFactorFactorParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__ExpressionAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFactorAccess().getExpressionExpressionParserRuleCall_0_1_0()); }
		ruleexpression
		{ after(grammarAccess.getFactorAccess().getExpressionExpressionParserRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__UnsignedConstantAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFactorAccess().getUnsignedConstantUnsignedConstantParserRuleCall_1_0()); }
		ruleunsignedConstant
		{ after(grammarAccess.getFactorAccess().getUnsignedConstantUnsignedConstantParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__FactorAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFactorAccess().getFactorFactorParserRuleCall_2_1_0()); }
		rulefactor
		{ after(grammarAccess.getFactorAccess().getFactorFactorParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__BoolAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFactorAccess().getBoolBOOLTerminalRuleCall_3_0()); }
		RULE_BOOL
		{ after(grammarAccess.getFactorAccess().getBoolBOOLTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__FunctionDesignatorAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFactorAccess().getFunctionDesignatorFunctionDesignatorParserRuleCall_4_0()); }
		rulefunctionDesignator
		{ after(grammarAccess.getFactorAccess().getFunctionDesignatorFunctionDesignatorParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__VariableAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFactorAccess().getVariableVariableParserRuleCall_5_0()); }
		rulevariable
		{ after(grammarAccess.getFactorAccess().getVariableVariableParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnsignedConstant__UnsignedNumberAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnsignedConstantAccess().getUnsignedNumberUnsignedNumberParserRuleCall_0_0()); }
		ruleunsignedNumber
		{ after(grammarAccess.getUnsignedConstantAccess().getUnsignedNumberUnsignedNumberParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnsignedConstant__String_literalAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnsignedConstantAccess().getString_literalSTRING_LITERALTerminalRuleCall_1_0()); }
		RULE_STRING_LITERAL
		{ after(grammarAccess.getUnsignedConstantAccess().getString_literalSTRING_LITERALTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnsignedConstant__ConstantChrAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnsignedConstantAccess().getConstantChrConstantChrParserRuleCall_2_0()); }
		ruleconstantChr
		{ after(grammarAccess.getUnsignedConstantAccess().getConstantChrConstantChrParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDesignator__IdentifierAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionDesignatorAccess().getIdentifierIdentifierParserRuleCall_0_0()); }
		ruleidentifier
		{ after(grammarAccess.getFunctionDesignatorAccess().getIdentifierIdentifierParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDesignator__ParameterListAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionDesignatorAccess().getParameterListParameterListParserRuleCall_2_0()); }
		ruleparameterList
		{ after(grammarAccess.getFunctionDesignatorAccess().getParameterListParameterListParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__ActualParameterAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterListAccess().getActualParameterActualParameterParserRuleCall_1_1_0()); }
		ruleactualParameter
		{ after(grammarAccess.getParameterListAccess().getActualParameterActualParameterParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActualParameter__ExpressionAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActualParameterAccess().getExpressionExpressionParserRuleCall_0()); }
		ruleexpression
		{ after(grammarAccess.getActualParameterAccess().getExpressionExpressionParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GotoStatement__LabelAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGotoStatementAccess().getLabelLabelParserRuleCall_1_0()); }
		rulelabel
		{ after(grammarAccess.getGotoStatementAccess().getLabelLabelParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StructuredStatement__CompoundStatementAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStructuredStatementAccess().getCompoundStatementCompoundStatementParserRuleCall_0_0()); }
		rulecompoundStatement
		{ after(grammarAccess.getStructuredStatementAccess().getCompoundStatementCompoundStatementParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StructuredStatement__ConditionalStatementAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStructuredStatementAccess().getConditionalStatementConditionalStatementParserRuleCall_1_0()); }
		ruleconditionalStatement
		{ after(grammarAccess.getStructuredStatementAccess().getConditionalStatementConditionalStatementParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statements__StatementAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementsAccess().getStatementStatementParserRuleCall_0_0()); }
		rulestatement
		{ after(grammarAccess.getStatementsAccess().getStatementStatementParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statements__StatementAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementsAccess().getStatementStatementParserRuleCall_1_1_0()); }
		rulestatement
		{ after(grammarAccess.getStatementsAccess().getStatementStatementParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalStatement__CaseStatementAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionalStatementAccess().getCaseStatementCaseStatementParserRuleCall_0()); }
		rulecaseStatement
		{ after(grammarAccess.getConditionalStatementAccess().getCaseStatementCaseStatementParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__ExpressionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCaseStatementAccess().getExpressionExpressionParserRuleCall_1_0()); }
		ruleexpression
		{ after(grammarAccess.getCaseStatementAccess().getExpressionExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__CaseListElementAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCaseStatementAccess().getCaseListElementCaseListElementParserRuleCall_3_0()); }
		rulecaseListElement
		{ after(grammarAccess.getCaseStatementAccess().getCaseListElementCaseListElementParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__CaseListElement1Assignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCaseStatementAccess().getCaseListElement1CaseListElementParserRuleCall_4_1_0()); }
		rulecaseListElement
		{ after(grammarAccess.getCaseStatementAccess().getCaseListElement1CaseListElementParserRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__StatementsAssignment_5_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCaseStatementAccess().getStatementsStatementsParserRuleCall_5_2_0()); }
		rulestatements
		{ after(grammarAccess.getCaseStatementAccess().getStatementsStatementsParserRuleCall_5_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseListElement__ConstListAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCaseListElementAccess().getConstListConstListParserRuleCall_0_0()); }
		ruleconstList
		{ after(grammarAccess.getCaseListElementAccess().getConstListConstListParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseListElement__StatementAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCaseListElementAccess().getStatementStatementParserRuleCall_2_0()); }
		rulestatement
		{ after(grammarAccess.getCaseListElementAccess().getStatementStatementParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_BOOL : ('true'|'false');

RULE_IDENT : ('a'..'z'|'A'..'Z') ('a'..'z'|'A'..'Z'|RULE_NUM|'_')*;

RULE_STRING_LITERAL : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

fragment RULE_EXPONENT : 'e' ('+'|'-')? RULE_NUM+;

RULE_NUM : ('0'..'9')+;

RULE_NUM_REAL : RULE_NUM+ '.' RULE_NUM+ RULE_EXPONENT?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
